; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--min_array_alignment=4 --split_sections --debug -c --asm --info=totals -o.\output\adckey.o --depend=.\output\adckey.d --cpu=Cortex-M0 --apcs=interwork -I..\CMSIS\CM0\DeviceSupport\Nuvoton\NUC123Series -I..\CMSIS\CM0\CoreSupport -I..\INC\DrvInc -I..\INC\SysInc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -D__MICROLIB --omf_browse=.\output\adckey.crf ..\AppSrc\adcKey.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||i.ADC_GET_RSLT||, CODE, READONLY, ALIGN=2

ADC_GET_RSLT PROC
        LDR      r1,|L1.16|
        LSLS     r0,r0,#2
        ADDS     r0,r0,r1
        LDR      r0,[r0,#0]
        LSLS     r0,r0,#22
        LSRS     r0,r0,#22
        BX       lr
        ENDP

        DCW      0x0000
|L1.16|
        DCD      0x400e0000

        AREA ||i.ADC_IRQHandler||, CODE, READONLY, ALIGN=2

ADC_IRQHandler PROC
        PUSH     {r4-r6,lr}
        LDR      r1,|L2.68|
        MOVS     r0,#1
        STR      r0,[r1,#0x30]
        MOVS     r0,#0
        BL       ADC_GET_RSLT
        MOV      r5,r0
        MOVS     r0,#4
        BL       ADC_GET_RSLT
        LDR      r4,|L2.72|
        STR      r0,[r4,#0x30]  ; bt_volage_adc
        MOVS     r0,#5
        BL       ADC_GET_RSLT
        STR      r0,[r4,#0x18]  ; wl_coco_adc
        MOV      r0,r5
        BL       adcKeyRemap
        LDRB     r0,[r4,#6]  ; soft_mute_flag
        CMP      r0,#1
        BNE      |L2.66|
        LDR      r0,[r4,#0x2c]  ; soft_mute_counter
        MOVS     r1,#0x7d
        ADDS     r0,r0,#1
        LSLS     r1,r1,#4
        STR      r0,[r4,#0x2c]  ; soft_mute_counter
        CMP      r0,r1
        BCC      |L2.66|
        MOVS     r0,#0
        STRB     r0,[r4,#6]
        STR      r0,[r4,#0x2c]  ; soft_mute_counter
|L2.66|
        POP      {r4-r6,pc}
        ENDP

|L2.68|
        DCD      0x400e0000
|L2.72|
        DCD      ||.data||

        AREA ||i.DECT_DC||, CODE, READONLY, ALIGN=2

DECT_DC PROC
        LDR      r0,|L3.16|
        LDR      r0,[r0,#0]
        CMP      r0,#0
        BEQ      |L3.12|
        MOVS     r0,#0
        BX       lr
|L3.12|
        MOVS     r0,#1
        BX       lr
        ENDP

|L3.16|
        DCD      0x5000423c

        AREA ||i.GPIO_SET_MODE||, CODE, READONLY, ALIGN=1

GPIO_SET_MODE PROC
        PUSH     {r4,lr}
        LDR      r3,[r0,#0]
        LSLS     r1,r1,#1
        MOVS     r4,#3
        LSLS     r4,r4,r1
        BICS     r3,r3,r4
        LSLS     r2,r2,r1
        ORRS     r3,r3,r2
        STR      r3,[r0,#0]
        POP      {r4,pc}
        ENDP


        AREA ||i.adcKeyClkInit||, CODE, READONLY, ALIGN=2

adcKeyClkInit PROC
        MOVS     r1,#1
        LSLS     r1,r1,#28
        MOVS     r0,#5
        LSLS     r0,r0,#28
        LDR      r2,[r0,#0xc]
        ORRS     r2,r2,r1
        STR      r2,[r0,#0xc]
        LDR      r2,[r0,#0xc]
        BICS     r2,r2,r1
        STR      r2,[r0,#0xc]
        LDR      r0,|L5.52|
        LDR      r2,[r0,#0x14]
        MOVS     r3,#0xc
        BICS     r2,r2,r3
        STR      r2,[r0,#0x14]
        LDR      r2,[r0,#0x18]
        MOVS     r3,#0xff
        LSLS     r3,r3,#16
        BICS     r2,r2,r3
        LSLS     r3,r0,#8
        ORRS     r2,r2,r3
        STR      r2,[r0,#0x18]
        LDR      r2,[r0,#8]
        ORRS     r2,r2,r1
        STR      r2,[r0,#8]
        BX       lr
        ENDP

|L5.52|
        DCD      0x50000200

        AREA ||i.adcKeyHook||, CODE, READONLY, ALIGN=2

adcKeyHook PROC
        PUSH     {r4-r6,lr}
        BL       DECT_DC
        MOVS     r5,#0
        LDR      r4,|L6.224|
        CMP      r0,#0
        LDR      r0,[r4,#0x10]  ; auto_standy_delay_minunte
        BEQ      |L6.26|
        CMP      r0,#0xa
        BNE      |L6.22|
        STR      r5,[r4,#0x28]  ; audio_quiet_time
|L6.22|
        MOVS     r0,#0x1e
        B        |L6.34|
|L6.26|
        CMP      r0,#0x1e
        BNE      |L6.32|
        STR      r5,[r4,#0x28]  ; audio_quiet_time
|L6.32|
        MOVS     r0,#0xa
|L6.34|
        STR      r0,[r4,#0x10]  ; auto_standy_delay_minunte
        BL       audioDetect
        LDR      r1,|L6.228|
        MOVS     r6,#1
        LDRB     r2,[r1,#0]  ; play_key_flag
        ORRS     r0,r0,r2
        CMP      r0,#0
        BEQ      |L6.56|
        STRB     r5,[r1,#0]
        B        |L6.134|
|L6.56|
        LDR      r0,[r4,#0x28]  ; audio_quiet_time
        MOVS     r2,#0x7d
        ADDS     r0,r0,#1
        STR      r0,[r4,#0x28]  ; audio_quiet_time
        LDR      r1,[r4,#0x10]  ; auto_standy_delay_minunte
        LSLS     r2,r2,#4
        MULS     r1,r2,r1
        CMP      r0,r1
        BLS      |L6.136|
        BL       DECT_DC
        CMP      r0,#0
        BEQ      |L6.92|
        LDR      r0,|L6.232|
        LDR      r0,[r0,#0]  ; dc_auto_down_flag
        CMP      r0,#5
        BEQ      |L6.98|
        B        |L6.136|
|L6.92|
        BL       enterStandby
        B        |L6.136|
|L6.98|
        LDR      r0,|L6.236|
        STR      r5,[r0,#0]  ; BT_MATCH_FLAG
        BL       setConfig
        MOVS     r0,#0x64
        BL       sysDelayAMs
        LDR      r0,|L6.240|
        STR      r6,[r0,#0]
        ADDS     r0,r0,#4
        STR      r6,[r0,#0]
        LDR      r0,|L6.240|
        SUBS     r0,r0,#4
        STR      r5,[r0,#0]
        LDR      r0,|L6.244|
        STRB     r6,[r0,#0]
        BL       sleep
|L6.134|
        STR      r5,[r4,#0x28]  ; audio_quiet_time
|L6.136|
        LDR      r0,|L6.248|
        STR      r5,[r0,#0]  ; audio_L
        LDR      r0,|L6.252|
        STR      r5,[r0,#0]  ; audio_R
        LDR      r1,[r4,#0x30]  ; bt_volage_adc
        LDR      r0,[r4,#0x34]  ; bt_volage
        ADDS     r0,r0,r1
        STR      r0,[r4,#0x34]  ; bt_volage
        LDR      r1,[r4,#0x14]  ; bt_count
        ADDS     r1,r1,#1
        STR      r1,[r4,#0x14]  ; bt_count
        CMP      r1,#0x40
        BCC      |L6.192|
        LSRS     r0,r0,#6
        LDR      r1,|L6.256|
        STR      r5,[r4,#0x14]  ; bt_count
        STR      r0,[r4,#0x34]  ; bt_volage
        LDR      r2,[r1,#0]  ; systick_counter
        LDR      r3,|L6.260|
        LDR      r1,|L6.264|
        CMP      r2,r3
        BCC      |L6.200|
        MOVS     r2,#0x1d
        LSLS     r2,r2,#5
        CMP      r0,r2
        BCS      |L6.194|
        MOVS     r0,#2
        STRB     r0,[r1,#0]
|L6.192|
        POP      {r4-r6,pc}
|L6.194|
        LDR      r2,|L6.268|
        CMP      r0,r2
        BCS      |L6.204|
|L6.200|
        STRB     r6,[r1,#0]
|L6.202|
        POP      {r4-r6,pc}
|L6.204|
        MOVS     r0,#3
        STRB     r0,[r1,#0]
        LDRB     r0,[r4,#5]  ; battery_high_flag
        ADDS     r0,r0,#1
        UXTB     r0,r0
        STRB     r0,[r4,#5]
        CMP      r0,#5
        BLS      |L6.202|
        STRB     r5,[r4,#5]
        POP      {r4-r6,pc}
        ENDP

|L6.224|
        DCD      ||.data||
|L6.228|
        DCD      play_key_flag
|L6.232|
        DCD      dc_auto_down_flag
|L6.236|
        DCD      BT_MATCH_FLAG
|L6.240|
        DCD      0x500042c8
|L6.244|
        DCD      sleep_flag
|L6.248|
        DCD      audio_L
|L6.252|
        DCD      audio_R
|L6.256|
        DCD      systick_counter
|L6.260|
        DCD      0x00001388
|L6.264|
        DCD      battery_state
|L6.268|
        DCD      0x000003b2

        AREA ||i.adcKeyInit||, CODE, READONLY, ALIGN=2

adcKeyInit PROC
        PUSH     {r3-r7,lr}
        MOVS     r1,#5
        LSLS     r1,r1,#28
        LDR      r0,[r1,#0x3c]
        MOVS     r2,#1
        ORRS     r0,r0,r2
        STR      r0,[r1,#0x3c]
        LDR      r0,|L7.148|
        LDR      r2,[r0,#0x14]
        LSLS     r5,r0,#10
        ORRS     r2,r2,r5
        STR      r2,[r0,#0x14]
        LDR      r2,[r1,#0x3c]
        MOVS     r3,#0x10
        ORRS     r2,r2,r3
        STR      r2,[r1,#0x3c]
        LDR      r2,[r0,#0x14]
        LSLS     r6,r0,#14
        ORRS     r2,r2,r6
        STR      r2,[r0,#0x14]
        LDR      r2,[r1,#0x3c]
        MOVS     r3,#0x20
        ORRS     r2,r2,r3
        STR      r2,[r1,#0x3c]
        LDR      r1,[r0,#0x14]
        LSLS     r7,r0,#15
        ORRS     r1,r1,r7
        STR      r1,[r0,#0x14]
        LDR      r4,|L7.152|
        MOVS     r2,#0
        MOVS     r1,#1
        MOV      r0,r4
        BL       GPIO_SET_MODE
        MOVS     r2,#0
        MOV      r1,r2
        MOV      r0,r4
        BL       GPIO_SET_MODE
        MOVS     r2,#0
        MOVS     r1,#4
        MOV      r0,r4
        BL       GPIO_SET_MODE
        MOVS     r2,#0
        MOVS     r1,#5
        MOV      r0,r4
        BL       GPIO_SET_MODE
        LDR      r0,[r4,#4]
        ORRS     r0,r0,r5
        STR      r0,[r4,#4]
        LDR      r0,[r4,#4]
        ORRS     r0,r0,r6
        STR      r0,[r4,#4]
        LDR      r0,[r4,#4]
        ORRS     r0,r0,r7
        STR      r0,[r4,#4]
        LDR      r0,|L7.156|
        MOVS     r1,#8
        LDR      r2,[r0,#0x20]
        MOVS     r3,#0xc
        BICS     r2,r2,r3
        ORRS     r2,r2,r1
        STR      r2,[r0,#0x20]
        LDR      r2,[r0,#0x24]
        MOVS     r1,#0x31
        ORRS     r2,r2,r1
        STR      r2,[r0,#0x24]
        LDR      r1,[r0,#0x20]
        MOVS     r2,#1
        ORRS     r1,r1,r2
        STR      r1,[r0,#0x20]
        POP      {r3-r7,pc}
        ENDP

|L7.148|
        DCD      0x50000040
|L7.152|
        DCD      0x500040c0
|L7.156|
        DCD      0x400e0000

        AREA ||i.adcKeyRemap||, CODE, READONLY, ALIGN=2

adcKeyRemap PROC
        PUSH     {r4,lr}
        LDR      r2,|L8.232|
        LDRH     r1,[r2,#0xa]  ; key_bak
        CMP      r0,r1
        BLS      |L8.14|
        SUBS     r1,r0,r1
        B        |L8.16|
|L8.14|
        SUBS     r1,r1,r0
|L8.16|
        MOVS     r3,#0
        CMP      r1,#0x73
        BLE      |L8.30|
        STRH     r3,[r2,#0xc]
        STRH     r3,[r2,#0xe]
        STRH     r0,[r2,#0xa]
|L8.28|
        POP      {r4,pc}
|L8.30|
        LDRH     r1,[r2,#0xe]  ; key_adc_value
        ADDS     r1,r1,r0
        UXTH     r1,r1
        STRH     r1,[r2,#0xe]
        STRH     r0,[r2,#0xa]
        LDRH     r0,[r2,#0xc]  ; key_irq_index
        ADDS     r0,r0,#1
        UXTH     r0,r0
        STRH     r0,[r2,#0xc]
        CMP      r0,#8
        BNE      |L8.28|
        LSRS     r0,r1,#3
        MOVS     r4,#0x7d
        STRH     r3,[r2,#0xc]
        LSLS     r4,r4,#3
        MOVS     r1,#0x55
        STRH     r0,[r2,#0xe]
        CMP      r0,r4
        BHI      |L8.148|
        MOVS     r4,#0xd7
        LSLS     r4,r4,#2
        CMP      r0,r4
        BHI      |L8.148|
        MOVS     r4,#0xcd
        LSLS     r4,r4,#2
        CMP      r0,r4
        BLS      |L8.88|
        MOVS     r0,#0x58
        B        |L8.144|
|L8.88|
        LDR      r4,|L8.236|
        CMP      r0,r4
        BHI      |L8.148|
        LDR      r4,|L8.236|
        SUBS     r4,r4,#0x28
        CMP      r0,r4
        BLS      |L8.106|
        MOVS     r0,#0x59
        B        |L8.144|
|L8.106|
        MOVS     r4,#5
        LSLS     r4,r4,#7
        CMP      r0,r4
        BHI      |L8.148|
        MOVS     r4,#0x4b
        LSLS     r4,r4,#3
        CMP      r0,r4
        BLS      |L8.126|
        MOVS     r0,#0x5a
        B        |L8.144|
|L8.126|
        MOVS     r4,#0xff
        ADDS     r4,r4,#0x7d
        CMP      r0,r4
        BHI      |L8.148|
        MOVS     r4,#0xff
        ADDS     r4,r4,#0x55
        CMP      r0,r4
        BLS      |L8.148|
        MOVS     r0,#0x61
|L8.144|
        STRB     r0,[r2,#3]
        B        |L8.150|
|L8.148|
        STRB     r1,[r2,#3]
|L8.150|
        LDRB     r0,[r2,#3]  ; key_buf
        STRB     r0,[r2,#4]
        LDR      r0,|L8.240|
        LDR      r0,[r0,#0]
        CMP      r0,#0
        BEQ      |L8.166|
        MOVS     r0,#0x56
        STRB     r0,[r2,#3]
|L8.166|
        STRH     r3,[r2,#0xe]
        LDR      r0,[r2,#0x18]  ; wl_coco_adc
        LDR      r1,|L8.244|
        MOV      r2,r0
        SUBS     r2,r2,#0xb9
        CMP      r2,#0x1f
        BCS      |L8.184|
        LDR      r0,|L8.248|
        B        |L8.196|
|L8.184|
        MOV      r2,r0
        SUBS     r2,r2,#0xff
        SUBS     r2,r2,#0x8a
        CMP      r2,#0x27
        BCS      |L8.202|
        LDR      r0,|L8.252|
|L8.196|
        LDRB     r0,[r0,#0]  ; WL_COCO_KEY1
        STRB     r0,[r1,#0]
        POP      {r4,pc}
|L8.202|
        LDR      r2,|L8.256|
        ADDS     r2,r0,r2
        CMP      r2,#0x3f
        BCS      |L8.214|
        LDR      r0,|L8.260|
        B        |L8.196|
|L8.214|
        LDR      r2,|L8.256|
        SUBS     r2,r2,#0xcc
        ADDS     r0,r0,r2
        CMP      r0,#0x2b
        BCS      |L8.228|
        LDR      r0,|L8.264|
        B        |L8.196|
|L8.228|
        STRB     r3,[r1,#0]
        POP      {r4,pc}
        ENDP

|L8.232|
        DCD      ||.data||
|L8.236|
        DCD      0x000002ee
|L8.240|
        DCD      0x50004260
|L8.244|
        DCD      WL_COCO_KEY
|L8.248|
        DCD      WL_COCO_KEY1
|L8.252|
        DCD      WL_COCO_KEY2
|L8.256|
        DCD      0xfffffdb7
|L8.260|
        DCD      WL_COCO_KEY3
|L8.264|
        DCD      WL_COCO_KEY4

        AREA ||i.adcReadKey||, CODE, READONLY, ALIGN=2

adcReadKey PROC
        LDR      r3,|L9.52|
        MOVS     r1,#0x55
        LDRB     r0,[r3,#3]  ; key_buf
        CMP      r0,#0x55
        BEQ      |L9.20|
        LDRB     r2,[r3,#8]  ; key_word_r
        CMP      r2,r0
        BNE      |L9.26|
        STRB     r1,[r3,#0]
        B        |L9.48|
|L9.20|
        STRB     r1,[r3,#0]
        STRB     r1,[r3,#9]
        B        |L9.46|
|L9.26|
        LDRB     r2,[r3,#9]  ; key_word_bak
        CMP      r2,#0x55
        BEQ      |L9.42|
        CMP      r2,r0
        BNE      |L9.42|
        STRB     r0,[r3,#0]
        STRB     r0,[r3,#8]
        B        |L9.48|
|L9.42|
        STRB     r0,[r3,#9]
        STRB     r1,[r3,#0]
|L9.46|
        STRB     r1,[r3,#8]
|L9.48|
        LDRB     r0,[r3,#0]  ; key_word
        BX       lr
        ENDP

|L9.52|
        DCD      ||.data||

        AREA ||i.adcReadKeyContinue||, CODE, READONLY, ALIGN=2

adcReadKeyContinue PROC
        LDR      r2,|L10.56|
        MOVS     r0,#0x55
        STRB     r0,[r2,#1]
        LDRB     r0,[r2,#0]  ; key_word
        CMP      r0,#0x55
        BEQ      |L10.20|
        MOVS     r0,#5
        MVNS     r0,r0
        STR      r0,[r2,#0x20]  ; kwcdc
        B        |L10.50|
|L10.20|
        LDR      r1,[r2,#0x20]  ; kwcdc
        LDR      r0,|L10.56|
        ADDS     r1,r1,#1
        STR      r1,[r2,#0x20]  ; kwcdc
        LDRB     r0,[r0,#3]
        CMP      r1,#8
        BGE      |L10.38|
        STRB     r0,[r2,#7]
        B        |L10.50|
|L10.38|
        MOVS     r1,#0
        STR      r1,[r2,#0x20]  ; kwcdc
        LDRB     r1,[r2,#7]  ; key_c_r
        CMP      r1,r0
        BNE      |L10.50|
        STRB     r0,[r2,#1]
|L10.50|
        LDRB     r0,[r2,#1]  ; key_word_continue
        BX       lr
        ENDP

        DCW      0x0000
|L10.56|
        DCD      ||.data||

        AREA ||i.adckeyScan||, CODE, READONLY, ALIGN=2

adckeyScan PROC
        PUSH     {r4-r6,lr}
        BL       adcReadKey
        LDR      r4,|L11.80|
        STRB     r0,[r4,#0]
        BL       adcReadKeyContinue
        LDR      r5,|L11.84|
        STRB     r0,[r4,#1]
        LDRB     r0,[r5,#0]  ; dev_state
        CMP      r0,#0
        BEQ      |L11.50|
        CMP      r0,#1
        BEQ      |L11.34|
        CMP      r0,#2
        BNE      |L11.50|
        B        |L11.40|
|L11.34|
        BL       devStartDealAdcKey
        B        |L11.44|
|L11.40|
        BL       devStandbyDealAdcKey
|L11.44|
        LDRB     r0,[r5,#0]  ; dev_state
        CMP      r0,#2
        BEQ      |L11.54|
|L11.50|
        BL       adcKeyHook
|L11.54|
        LDR      r0,[r4,#0x1c]  ; adcKeySubHook
        CMP      r0,#0
        BEQ      |L11.66|
        BLX      r0
        MOVS     r0,#0
        STR      r0,[r4,#0x1c]  ; adcKeySubHook
|L11.66|
        LDR      r3,|L11.88|
        MOVS     r2,#0
        MOVS     r1,#0x1e
        LDRB     r0,[r4,#2]  ; adc_key_task
        BL       startATask
        POP      {r4-r6,pc}
        ENDP

|L11.80|
        DCD      ||.data||
|L11.84|
        DCD      dev_state
|L11.88|
        DCD      adckeyScan

        AREA ||i.adckeyTaskInit||, CODE, READONLY, ALIGN=2

adckeyTaskInit PROC
        PUSH     {r4,lr}
        BL       adcKeyInit
        LDR      r0,|L12.60|
        LDR      r1,[r0,#0]
        MOVS     r2,#0xff
        LSLS     r2,r2,#8
        BICS     r1,r1,r2
        MOVS     r2,#1
        LSLS     r2,r2,#15
        ORRS     r1,r1,r2
        STR      r1,[r0,#0]
        BL       DrvADC_EnableInt
        BL       getATask
        LDR      r4,|L12.64|
        STRB     r0,[r4,#2]
        BL       getATask
        LDR      r1,|L12.68|
        LDR      r3,|L12.72|
        STRB     r0,[r1,#0]
        MOVS     r2,#0
        MOVS     r1,#0x1e
        LDRB     r0,[r4,#2]  ; adc_key_task
        BL       startATask
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L12.60|
        DCD      0xe000e41c
|L12.64|
        DCD      ||.data||
|L12.68|
        DCD      appkey_id
|L12.72|
        DCD      adckeyScan

        AREA ||i.audioDetect||, CODE, READONLY, ALIGN=2

audioDetect PROC
        LDR      r0,|L13.28|
        LDR      r0,[r0,#0]  ; audio_L
        LSRS     r0,r0,#10
        CMP      r0,#0xf
        BHI      |L13.20|
        LDR      r0,|L13.32|
        LDR      r0,[r0,#0]  ; audio_R
        LSRS     r0,r0,#10
        CMP      r0,#0xf
        BLS      |L13.24|
|L13.20|
        MOVS     r0,#1
        BX       lr
|L13.24|
        MOVS     r0,#0
        BX       lr
        ENDP

|L13.28|
        DCD      audio_L
|L13.32|
        DCD      audio_R

        AREA ||i.devStandbyDealAdcKey||, CODE, READONLY, ALIGN=2

devStandbyDealAdcKey PROC
        PUSH     {r4,lr}
        LDR      r0,|L14.12|
        LDRB     r0,[r0,#0]  ; key_word
        BL       delStandbytkey
        POP      {r4,pc}
        ENDP

|L14.12|
        DCD      ||.data||

        AREA ||i.devStartDealAdcKey||, CODE, READONLY, ALIGN=2

devStartDealAdcKey PROC
        PUSH     {r4,lr}
        LDR      r4,|L15.40|
        LDRB     r0,[r4,#0]  ; key_word
        BL       delStartkey
        LDRB     r0,[r4,#1]  ; key_word_continue
        CMP      r0,#0x58
        BEQ      |L15.20|
        CMP      r0,#0x59
        BNE      |L15.36|
|L15.20|
        LDR      r1,[r4,#0x24]  ; k_counter
        ADDS     r1,r1,#1
        STR      r1,[r4,#0x24]  ; k_counter
        BEQ      |L15.36|
        BL       delStartkey
        MOVS     r0,#0
        STR      r0,[r4,#0x24]  ; k_counter
|L15.36|
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L15.40|
        DCD      ||.data||

        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.data||, DATA, ALIGN=2

key_word
        DCB      0x55
key_word_continue
        DCB      0x55
adc_key_task
        DCB      0xff
key_buf
        DCB      0x55
key_buf_adc
        DCB      0x55
battery_high_flag
        DCB      0x00
soft_mute_flag
        DCB      0x00
key_c_r
        DCB      0x55
key_word_r
        DCB      0x00
key_word_bak
        DCB      0x55
key_bak
        DCW      0x0000
key_irq_index
        DCW      0x0000
key_adc_value
        DCW      0x0000
auto_standy_delay_minunte
        DCD      0x0000000a
bt_count
        DCD      0x00000078
wl_coco_adc
        DCD      0x00000000
adcKeySubHook
        DCD      0x00000000
kwcdc
        DCD      0x00000000
k_counter
        DCD      0x00000000
audio_quiet_time
        DCD      0x00000000
soft_mute_counter
        DCD      0x00000000
bt_volage_adc
        DCD      0x00000000
bt_volage
        DCD      0x00000000

        AREA ||area_number.19||, DATA, ALIGN=1

        EXPORTAS ||area_number.19||, ||.data||
u16ADCBuf
        DCW      0x0000

        AREA ||area_number.20||, DATA, ALIGN=2

        EXPORTAS ||area_number.20||, ||.data||
battery_volage
        DCD      0x00000000

        AREA ||area_number.21||, DATA, ALIGN=2

        EXPORTAS ||area_number.21||, ||.data||
dc_time_stamp
        DCD      0x00000000

        EXPORT ADC_IRQHandler [CODE]
        EXPORT adcKeyClkInit [CODE]
        EXPORT adcKeyHook [CODE]
        EXPORT adcKeyInit [CODE]
        EXPORT adcKeyRemap [CODE]
        EXPORT adcReadKey [CODE]
        EXPORT adcReadKeyContinue [CODE]
        EXPORT adckeyScan [CODE]
        EXPORT adckeyTaskInit [CODE]
        EXPORT audioDetect [CODE]
        EXPORT devStandbyDealAdcKey [CODE]
        EXPORT devStartDealAdcKey [CODE]
        EXPORT key_word [DATA,SIZE=1]
        EXPORT key_word_continue [DATA,SIZE=1]
        EXPORT adc_key_task [DATA,SIZE=1]
        EXPORT key_buf [DATA,SIZE=1]
        EXPORT key_buf_adc [DATA,SIZE=1]
        EXPORT battery_high_flag [DATA,SIZE=1]
        EXPORT soft_mute_flag [DATA,SIZE=1]
        EXPORT auto_standy_delay_minunte [DATA,SIZE=4]
        EXPORT adcKeySubHook [DATA,SIZE=4]
        EXPORT u16ADCBuf [DATA,SIZE=2]
        EXPORT battery_volage [DATA,SIZE=4]
        EXPORT dc_time_stamp [DATA,SIZE=4]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT delStandbytkey [CODE]
        IMPORT delStartkey [CODE]
        IMPORT audio_L [DATA]
        IMPORT audio_R [DATA]
        IMPORT enterStandby [CODE]
        IMPORT setConfig [CODE]
        IMPORT sysDelayAMs [CODE]
        IMPORT sleep [CODE]
        IMPORT play_key_flag [DATA]
        IMPORT dc_auto_down_flag [DATA]
        IMPORT BT_MATCH_FLAG [DATA]
        IMPORT sleep_flag [DATA]
        IMPORT systick_counter [DATA]
        IMPORT battery_state [DATA]
        IMPORT startATask [CODE]
        IMPORT dev_state [DATA]
        IMPORT DrvADC_EnableInt [CODE]
        IMPORT getATask [CODE]
        IMPORT appkey_id [DATA]
        IMPORT WL_COCO_KEY [DATA]
        IMPORT WL_COCO_KEY1 [DATA]
        IMPORT WL_COCO_KEY2 [DATA]
        IMPORT WL_COCO_KEY3 [DATA]
        IMPORT WL_COCO_KEY4 [DATA]

        KEEP ADC_GET_RSLT
        KEEP DECT_DC
        KEEP GPIO_SET_MODE
        KEEP key_c_r
        KEEP key_word_r
        KEEP key_word_bak
        KEEP key_bak
        KEEP key_irq_index
        KEEP key_adc_value
        KEEP bt_count
        KEEP wl_coco_adc
        KEEP kwcdc
        KEEP k_counter
        KEEP audio_quiet_time
        KEEP soft_mute_counter
        KEEP bt_volage_adc
        KEEP bt_volage

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,3
        ATTR SETSTRING Tag_conformance,"2.06"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
