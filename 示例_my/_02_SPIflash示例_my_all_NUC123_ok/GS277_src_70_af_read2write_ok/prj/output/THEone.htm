<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\THEone.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\THEone.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.02 [Build 28]: Last Updated: Thu Sep 01 16:34:46 2016
<BR><P>
<H3>Maximum Stack Usage =        308 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
ledTask &rArr; DWHP83DealMsg &rArr; doCuMsg &rArr; changetoWirelessSlave &rArr; changeInputChannel &rArr; changeInputVolumeUp &rArr; seW58ChangInputVolumeCheck &rArr; ampSetVolume &rArr; ampSetEqDefault &rArr; ampSendCmd_3A &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[2e]">SH_DoCommand</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[d]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1e]">ADC_IRQHandler</a> from adckey.o(i.ADC_IRQHandler) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[6]">BOD_IRQHandler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[23]">DWP83SpiritTask</a> from dwhp83.o(i.DWP83SpiritTask) referenced from dwhp83.o(i.DWP83SpiritTask)
 <LI><a href="#[23]">DWP83SpiritTask</a> from dwhp83.o(i.DWP83SpiritTask) referenced from dwhp83.o(i.DWPH83Init)
 <LI><a href="#[d]">Default_Handler</a> from startup_nuc123series.o(.text) referenced 8 times from startup_nuc123series.o(RESET)
 <LI><a href="#[8]">EINT0_IRQHandler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[9]">EINT1_IRQHandler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[a]">GPAB_IRQHandler</a> from power.o(i.GPAB_IRQHandler) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[b]">GPCDF_IRQHandler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[17]">I2C0_IRQHandler</a> from i2csys.o(i.I2C0_IRQHandler) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[18]">I2C1_IRQHandler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[1c]">I2S_IRQHandler</a> from filter.o(i.I2S_IRQHandler) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[1b]">PDMA_IRQHandler</a> from mypdma.o(i.PDMA_IRQHandler) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[1a]">PS2_IRQHandler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[c]">PWMA_IRQHandler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[1d]">PWRWU_IRQHandler</a> from power.o(i.PWRWU_IRQHandler) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[2d]">Reset_Handler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[14]">SPI0_IRQHandler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[15]">SPI1_IRQHandler</a> from i2s_spi.o(i.SPI1_IRQHandler) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[16]">SPI2_IRQHandler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from systimertask.o(i.SysTick_Handler) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[20]">SystemInit</a> from system_nuc123series.o(i.SystemInit) referenced from startup_nuc123series.o(.text)
 <LI><a href="#[e]">TMR0_IRQHandler</a> from led.o(i.TMR0_IRQHandler) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[f]">TMR1_IRQHandler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[10]">TMR2_IRQHandler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[11]">TMR3_IRQHandler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[12]">UART0_IRQHandler</a> from csr_module.o(i.UART0_IRQHandler) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[13]">UART1_IRQHandler</a> from uart.o(i.UART1_IRQHandler) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[19]">USBD_IRQHandler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[7]">WDT_IRQHandler</a> from power.o(i.WDT_IRQHandler) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[22]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_nuc123series.o(.text)
 <LI><a href="#[24]">adckeyScan</a> from adckey.o(i.adckeyScan) referenced from adckey.o(i.adckeyScan)
 <LI><a href="#[24]">adckeyScan</a> from adckey.o(i.adckeyScan) referenced from adckey.o(i.adckeyTaskInit)
 <LI><a href="#[25]">ampDecVolume</a> from sta339.o(i.ampDecVolume) referenced from sta339.o(i.ampAddVolume)
 <LI><a href="#[25]">ampDecVolume</a> from sta339.o(i.ampDecVolume) referenced from sta339.o(i.ampDecVolume)
 <LI><a href="#[2a]">changeInputChannel</a> from cs8422.o(i.changeInputChannel) referenced from sew58.o(i.seW58ChangInputVolumeCheck)
 <LI><a href="#[27]">dwph83Check</a> from dwhp83.o(i.dwph83Check) referenced from dwhp83.o(i.changetoWirelessSlave)
 <LI><a href="#[27]">dwph83Check</a> from dwhp83.o(i.dwph83Check) referenced from dwhp83.o(i.dwph83Check)
 <LI><a href="#[28]">irKeyScan</a> from irkey.o(i.irKeyScan) referenced from irkey.o(i.irKeyScan)
 <LI><a href="#[28]">irKeyScan</a> from irkey.o(i.irKeyScan) referenced from irkey.o(i.irKeyTaskInit)
 <LI><a href="#[29]">ledTask</a> from led.o(i.ledTask) referenced from led.o(i.ledTask)
 <LI><a href="#[29]">ledTask</a> from led.o(i.ledTask) referenced from led.o(i.ledTaskInit)
 <LI><a href="#[1f]">main</a> from main.o(i.main) referenced from entry8.o(.ARM.Collect$$$$00000009)
 <LI><a href="#[21]">resetHook</a> from power.o(i.resetHook) referenced from startup_nuc123series.o(.text)
 <LI><a href="#[26]">seW58ChangInputVolumeCheck</a> from sew58.o(i.seW58ChangInputVolumeCheck) referenced from sew58.o(i.changeInputVolumeDown)
 <LI><a href="#[26]">seW58ChangInputVolumeCheck</a> from sew58.o(i.seW58ChangInputVolumeCheck) referenced from sew58.o(i.seW58ChangInputVolumeCheck)
 <LI><a href="#[26]">seW58ChangInputVolumeCheck</a> from sew58.o(i.seW58ChangInputVolumeCheck) referenced from sew58.o(i.turnDownVolume)
 <LI><a href="#[26]">seW58ChangInputVolumeCheck</a> from sew58.o(i.seW58ChangInputVolumeCheck) referenced from sew58.o(i.turnUpVolume)
 <LI><a href="#[2b]">seW58FlasfLed</a> from sew58.o(i.seW58FlasfLed) referenced from sew58.o(i.seW58ChangInputVolumeCheck)
 <LI><a href="#[2b]">seW58FlasfLed</a> from sew58.o(i.seW58FlasfLed) referenced from sew58.o(i.seW58FlasfLed)
 <LI><a href="#[2c]">seW58sendCmd</a> from sew58.o(i.seW58sendCmd) referenced from sew58.o(i.seW58sendCmd)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[22]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(.text)
</UL>
<P><STRONG><a name="[13c]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[31]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[13d]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[13e]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8.o(.ARM.Collect$$$$00000009))

<P><STRONG><a name="[2d]"></a>Reset_Handler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>GPCDF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PS2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PWMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>USBD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SH_DoCommand</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_nuc123series.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[13f]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Init
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetAPBClockFreq
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUART_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SClkInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breathingColor
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
</UL>

<P><STRONG><a name="[30]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[140]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1e]"></a>ADC_IRQHandler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, adckey.o(i.ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_IRQHandler &rArr; adcKeyRemap
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcKeyRemap
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GET_RSLT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>BTInit</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, csr_module.o(i.BTInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = BTInit &rArr; DrvUART_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUART_Init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUART_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOn
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c5]"></a>BTSendCmd</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, csr_module.o(i.BTSendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BTSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_version_read
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_name_send
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_dis_last_connect
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btStartUp
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btShutDown
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btPairing
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btForgetAll
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btEnaleHFP
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btEnableMic
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btDisableMic
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btDisableHFP
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartdecode
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openCall
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeCall
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btReconnect
</UL>

<P><STRONG><a name="[3e]"></a>CLK_GetAPBClockFreq</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drvi2c.o(i.CLK_GetAPBClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Init
</UL>

<P><STRONG><a name="[41]"></a>CLK_Init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, main.o(i.CLK_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CLK_Init &rArr; SystemCoreClockUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irClkInit
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcKeyClkInit
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickInit
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Init
</UL>

<P><STRONG><a name="[47]"></a>DETECT_USER_MODULE</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cs8422.o(i.DETECT_USER_MODULE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DETECT_USER_MODULE &rArr; Dwhp83CuMuDetect &rArr; readDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83CuMuDetect
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextInput
</UL>

<P><STRONG><a name="[49]"></a>DWHP83DealMsg</STRONG> (Thumb, 334 bytes, Stack size 16 bytes, dwhp83.o(i.DWHP83DealMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = DWHP83DealMsg &rArr; doCuMsg &rArr; changetoWirelessSlave &rArr; changeInputChannel &rArr; changeInputVolumeUp &rArr; seW58ChangInputVolumeCheck &rArr; ampSetVolume &rArr; ampSetEqDefault &rArr; ampSendCmd_3A &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changetoWirelessSlave
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btShutDown
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83CuMuDetect
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83toSUB
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_SB_alive
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitGpioI2c
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDwhp83
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doMuMsg
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doCuMsg
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUB_volume_mute
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CLR_PIN
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[55]"></a>DWHP83Mute</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dwhp83.o(i.DWHP83Mute))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DWHP83Mute &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitGpioI2c
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playMusic
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterStandby
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callOnMode
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[57]"></a>DWHP83SendCmd</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, dwhp83.o(i.DWHP83SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DWHP83SendCmd &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitGpioI2c
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83SpiritTask
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwhp83CuAck
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doMuMsg
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doCuMsg
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealMuContainer
</UL>

<P><STRONG><a name="[58]"></a>DWHP83UnMute</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dwhp83.o(i.DWHP83UnMute))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DWHP83UnMute &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitGpioI2c
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterStandby
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputChannel
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callOffMode
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[59]"></a>DWHP83toEXT_MCU</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dwhp83.o(i.DWHP83toEXT_MCU))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DWHP83toEXT_MCU &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterStandby
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[4c]"></a>DWHP83toSUB</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dwhp83.o(i.DWHP83toSUB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DWHP83toSUB &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83DealMsg
</UL>

<P><STRONG><a name="[5a]"></a>DWP83CuCV</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, dwhp83.o(i.DWP83CuCV))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DWP83CuCV &rArr; DWPH83VolumeChange &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWPH83VolumeChange
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampDecVolume
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampAddVolume
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83SpiritTask
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
</UL>

<P><STRONG><a name="[5c]"></a>DWP83CuCV0</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dwhp83.o(i.DWP83CuCV0))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DWP83CuCV0 &rArr; DWPH83VolumeChange &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWPH83VolumeChange
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83SpiritTask
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
</UL>

<P><STRONG><a name="[79]"></a>DWP83CuPowerOn</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dwhp83.o(i.DWP83CuPowerOn))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83Master
</UL>

<P><STRONG><a name="[23]"></a>DWP83SpiritTask</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, dwhp83.o(i.DWP83SpiritTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DWP83SpiritTask &rArr; DWP83CuCV0 &rArr; DWPH83VolumeChange &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ismute
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83GetStatus
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83CuMuDetect
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83CuCV0
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83CuCV
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealMuContainer
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWPH83VolumeChange
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>
<BR>[Address Reference Count : 2]<UL><LI> dwhp83.o(i.DWP83SpiritTask)
<LI> dwhp83.o(i.DWPH83Init)
</UL>
<P><STRONG><a name="[61]"></a>DWPH83Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, dwhp83.o(i.DWPH83Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DWPH83Init &rArr; startATask
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getATask
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>DWPH83VolumeChange</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, dwhp83.o(i.DWPH83VolumeChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DWPH83VolumeChange &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitGpioI2c
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83SpiritTask
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83CuCV0
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83CuCV
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_rx_volume_2_SUB
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doCuMsg
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealMuContainer
</UL>

<P><STRONG><a name="[63]"></a>DrvADC_DisableInt</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, drvadc.o(i.DrvADC_DisableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DrvADC_DisableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
</UL>

<P><STRONG><a name="[aa]"></a>DrvADC_EnableInt</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drvadc.o(i.DrvADC_EnableInt))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adckeyTaskInit
</UL>

<P><STRONG><a name="[65]"></a>DrvI2C_Init</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, drvi2c.o(i.DrvI2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetAPBClockFreq
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_RESET_IP2
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSysInit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSpirit
</UL>

<P><STRONG><a name="[108]"></a>DrvI2S_EnableInt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drvi2s.o(i.DrvI2S_EnableInt))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2sStart
</UL>

<P><STRONG><a name="[106]"></a>DrvPDMA_EnableInt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drvpdma.o(i.DrvPDMA_EnableInt))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2sDmaInit
</UL>

<P><STRONG><a name="[105]"></a>DrvPDMA_Init</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, drvpdma.o(i.DrvPDMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DrvPDMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2sDmaInit
</UL>

<P><STRONG><a name="[68]"></a>DrvSPI_Init</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, drvspi.o(i.DrvSPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DrvSPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_RESET_IP2
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashInit
</UL>

<P><STRONG><a name="[6a]"></a>DrvTIMER_DisableInt</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, drvtimer.o(i.DrvTIMER_DisableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DrvTIMER_DisableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
</UL>

<P><STRONG><a name="[6c]"></a>DrvTIMER_EnableInt</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, drvtimer.o(i.DrvTIMER_EnableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DrvTIMER_EnableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledInit
</UL>

<P><STRONG><a name="[6e]"></a>DrvTIMER_Init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, drvtimer.o(i.DrvTIMER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DrvTIMER_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APBCLK_ENABLE
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irKeyInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledInit
</UL>

<P><STRONG><a name="[70]"></a>DrvUART_DisableInt</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drvuart.o(i.DrvUART_DisableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DrvUART_DisableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOff
</UL>

<P><STRONG><a name="[36]"></a>DrvUART_EnableInt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, drvuart.o(i.DrvUART_EnableInt))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTInit
</UL>

<P><STRONG><a name="[35]"></a>DrvUART_Init</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, drvuart.o(i.DrvUART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DrvUART_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_RESET_IP2
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTInit
</UL>

<P><STRONG><a name="[73]"></a>DrvWDT_DisableInt</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, drvtimer.o(i.DrvWDT_DisableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DrvWDT_DisableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_DISABLE_INT
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doPowerOff
</UL>

<P><STRONG><a name="[76]"></a>DrvWDT_EnableInt</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, drvtimer.o(i.DrvWDT_EnableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DrvWDT_EnableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTInit
</UL>

<P><STRONG><a name="[77]"></a>DrvWDT_Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, drvtimer.o(i.DrvWDT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DrvWDT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APBCLK_ENABLE
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTInit
</UL>

<P><STRONG><a name="[48]"></a>Dwhp83CuMuDetect</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, dwhp83.o(i.Dwhp83CuMuDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Dwhp83CuMuDetect &rArr; readDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitGpioI2c
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDwhp83
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83SpiritTask
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterStandby
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputChannel
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422InitAllConf
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83DealMsg
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DETECT_USER_MODULE
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwph83Check
</UL>

<P><STRONG><a name="[5d]"></a>Dwhp83GetStatus</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, dwhp83.o(i.Dwhp83GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Dwhp83GetStatus &rArr; readDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitGpioI2c
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDwhp83
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83SpiritTask
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[78]"></a>Dwhp83Master</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dwhp83.o(i.Dwhp83Master))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Dwhp83Master &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitGpioI2c
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83CuPowerOn
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[7a]"></a>Dwhp83ReadVersion</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dwhp83.o(i.Dwhp83ReadVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Dwhp83ReadVersion &rArr; readDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitGpioI2c
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDwhp83
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
</UL>

<P><STRONG><a name="[7b]"></a>Dwhp83Slave</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dwhp83.o(i.Dwhp83Slave))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Dwhp83Slave &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitGpioI2c
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterStandby
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputChannel
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422InitAllConf
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwph83Check
</UL>

<P><STRONG><a name="[a]"></a>GPAB_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, power.o(i.GPAB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GPAB_IRQHandler &rArr; IR_IRQHandler &rArr; IrKeyRemap &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_IRQHandler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DisableInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>Hal_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(i.Hal_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Hal_Init &rArr; dealPowerKey &rArr; sysDelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTaskInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealPowerKey
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17]"></a>I2C0_IRQHandler</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, i2csys.o(i.I2C0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_START
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CLEAR_SI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>I2SClkInit</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, i2s_spi.o(i.I2SClkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2SClkInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_SET_MCK_DIV
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_CLR_TXFIFO
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_CLR_RXFIFO
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOn
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c]"></a>I2S_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, filter.o(i.I2S_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>IR_IRQHandler</STRONG> (Thumb, 366 bytes, Stack size 24 bytes, irkey.o(i.IR_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IR_IRQHandler &rArr; IrKeyRemap &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrKeyRemap
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_IRQHandler_Test
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putKey2Pool
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPAB_IRQHandler
</UL>

<P><STRONG><a name="[88]"></a>IR_IRQHandler_Test</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, irkey.o(i.IR_IRQHandler_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IR_IRQHandler_Test
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_IRQHandler
</UL>

<P><STRONG><a name="[89]"></a>IrKeyRemap</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, irkey.o(i.IrKeyRemap))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IrKeyRemap &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_IRQHandler
</UL>

<P><STRONG><a name="[8b]"></a>MU_tell_CU_change</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dwhp83.o(i.MU_tell_CU_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MU_tell_CU_change &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[1b]"></a>PDMA_IRQHandler</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, mypdma.o(i.PDMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = PDMA_IRQHandler &rArr; i2sDmaInit &rArr; DrvPDMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_GET_CH_INTR_STS
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;triggerFilter
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2sDmaInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>PWRWU_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, power.o(i.PWRWU_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PWRWU_IRQHandler &rArr; ledColorSet &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledColorSet
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>RX_SB_alive</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dwhp83.o(i.RX_SB_alive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RX_SB_alive &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[92]"></a>SB_rx_volume_2_SUB</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dwhp83.o(i.SB_rx_volume_2_SUB))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SB_rx_volume_2_SUB &rArr; DWPH83VolumeChange &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWPH83VolumeChange
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[93]"></a>SB_volume_mute</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dwhp83.o(i.SB_volume_mute))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SB_volume_mute &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[94]"></a>SB_volume_unmute</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dwhp83.o(i.SB_volume_unmute))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SB_volume_unmute &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[15]"></a>SPI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, i2s_spi.o(i.SPI1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>SUB_volume_mute</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dwhp83.o(i.SUB_volume_mute))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SUB_volume_mute &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83DealMsg
</UL>

<P><STRONG><a name="[95]"></a>SUB_volume_unmute</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dwhp83.o(i.SUB_volume_unmute))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SUB_volume_unmute &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, systimertask.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SysTick_Handler &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSpirit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, system_nuc123series.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemCoreClockUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Init
</UL>

<P><STRONG><a name="[20]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_nuc123series.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(.text)
</UL>
<P><STRONG><a name="[e]"></a>TMR0_IRQHandler</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, led.o(i.TMR0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TMR0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TX_SB_alive</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dwhp83.o(i.TX_SB_alive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TX_SB_alive &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83DealMsg
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[12]"></a>UART0_IRQHandler</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, csr_module.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UART1_IRQHandler</STRONG> (Thumb, 266 bytes, Stack size 20 bytes, uart.o(i.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>WDTInit</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, power.o(i.WDTInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WDTInit &rArr; DrvWDT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvWDT_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvWDT_EnableInt
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_CLEAR_RESET_FLAG
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
</UL>

<P><STRONG><a name="[7]"></a>WDT_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, power.o(i.WDT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WDT_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, appkey.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrKeyRemap
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledColorSet
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seW58ChangInputVolumeCheck
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getChangeVolume
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_analyse
</UL>

<P><STRONG><a name="[141]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[142]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[143]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[99]"></a>ack</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dwhp83.o(i.ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ack &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_PIN
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CLR_PIN
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBuf
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDwhp83
</UL>

<P><STRONG><a name="[45]"></a>adcKeyClkInit</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, adckey.o(i.adcKeyClkInit))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Init
</UL>

<P><STRONG><a name="[9c]"></a>adcKeyHook</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, adckey.o(i.adcKeyHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = adcKeyHook &rArr; sleep &rArr; outStandby &rArr; playMusic &rArr; ampSetVolume &rArr; ampSetEqDefault &rArr; ampSendCmd_3A &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayAMs
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setConfig
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterStandby
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audioDetect
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DECT_DC
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adckeyScan
</UL>

<P><STRONG><a name="[a3]"></a>adcKeyInit</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, adckey.o(i.adcKeyInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = adcKeyInit &rArr; GPIO_SET_MODE
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_MODE
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adckeyTaskInit
</UL>

<P><STRONG><a name="[33]"></a>adcKeyRemap</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, adckey.o(i.adcKeyRemap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adcKeyRemap
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[a5]"></a>adcReadKey</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, adckey.o(i.adcReadKey))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adckeyScan
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealPowerKey
</UL>

<P><STRONG><a name="[a6]"></a>adcReadKeyContinue</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, adckey.o(i.adcReadKeyContinue))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adckeyScan
</UL>

<P><STRONG><a name="[24]"></a>adckeyScan</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, adckey.o(i.adckeyScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = adckeyScan &rArr; devStartDealAdcKey &rArr; delStartkey &rArr; changetoWirelessSlave &rArr; changeInputChannel &rArr; changeInputVolumeUp &rArr; seW58ChangInputVolumeCheck &rArr; ampSetVolume &rArr; ampSetEqDefault &rArr; ampSendCmd_3A &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devStartDealAdcKey
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devStandbyDealAdcKey
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcReadKeyContinue
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcReadKey
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcKeyHook
</UL>
<BR>[Address Reference Count : 2]<UL><LI> adckey.o(i.adckeyScan)
<LI> adckey.o(i.adckeyTaskInit)
</UL>
<P><STRONG><a name="[a9]"></a>adckeyTaskInit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, adckey.o(i.adckeyTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = adckeyTaskInit &rArr; adcKeyInit &rArr; GPIO_SET_MODE
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_EnableInt
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getATask
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcKeyInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ab]"></a>addI2cChain</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, i2csys.o(i.addI2cChain))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSpirit
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeeeprom
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readeeprom
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seW58ChangInputVolumeCheck
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnUpVolume
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnDownVolume
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seW58sendCmd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_3A
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_38
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422SendCmd
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcmSendCmd
</UL>

<P><STRONG><a name="[f4]"></a>addMuContainer</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, dwhp83.o(i.addMuContainer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = addMuContainer
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doCuMsg
</UL>

<P><STRONG><a name="[128]"></a>adpcmDataInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, i2s_spi.o(i.adpcmDataInit))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playMusic
</UL>

<P><STRONG><a name="[ac]"></a>ampAddVolume</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, sta339.o(i.ampAddVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = ampAddVolume &rArr; ampSetVolume &rArr; ampSetEqDefault &rArr; ampSendCmd_3A &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSetVolume
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83CuCV
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopATask
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
</UL>

<P><STRONG><a name="[25]"></a>ampDecVolume</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, sta339.o(i.ampDecVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = ampDecVolume &rArr; ampSetVolume &rArr; ampSetEqDefault &rArr; ampSendCmd_3A &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSetVolume
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83CuCV
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopATask
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sta339.o(i.ampDecVolume)
<LI> sta339.o(i.ampAddVolume)
</UL>
<P><STRONG><a name="[af]"></a>ampInitAllConf</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, sta339.o(i.ampInitAllConf))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ampInitAllConf &rArr; ampSendCmd_3A &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getATask
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeAmp38Cmd
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitGpioI2c
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_3A
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_38
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_TIMER_RESET
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOn
</UL>

<P><STRONG><a name="[b5]"></a>ampMute</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sta339.o(i.ampMute))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = ampMute &rArr; ampSendCmd_38 &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_38
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playMusic
</UL>

<P><STRONG><a name="[b6]"></a>ampPowerDown</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sta339.o(i.ampPowerDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ampPowerDown &rArr; writeAmp38Cmd &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeAmp38Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOff
</UL>

<P><STRONG><a name="[12f]"></a>ampResumeI2c</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sta339.o(i.ampResumeI2c))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resumeI2c
</UL>

<P><STRONG><a name="[b3]"></a>ampSendCmd_38</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, sta339.o(i.ampSendCmd_38))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ampSendCmd_38 &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initI2cDataBlock
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addI2cChain
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSetVolume
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendEqs_38
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampInitAllConf
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampunMute
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampMute
</UL>

<P><STRONG><a name="[b0]"></a>ampSendCmd_3A</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, sta339.o(i.ampSendCmd_3A))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ampSendCmd_3A &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initI2cDataBlock
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addI2cChain
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSetVolume
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendEqs_3A
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampInitAllConf
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callOnMode
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callOffMode
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSetEqDefault
</UL>

<P><STRONG><a name="[b8]"></a>ampSendEqs_38</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, sta339.o(i.ampSendEqs_38))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = ampSendEqs_38 &rArr; ampSendCmd_38 &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_38
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOn
</UL>

<P><STRONG><a name="[b9]"></a>ampSendEqs_38b</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, sta339.o(i.ampSendEqs_38b))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ampSendEqs_38b &rArr; writeAmp38Cmd &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeAmp38Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOn
</UL>

<P><STRONG><a name="[ba]"></a>ampSendEqs_3A</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, sta339.o(i.ampSendEqs_3A))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = ampSendEqs_3A &rArr; ampSendCmd_3A &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_3A
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOn
</UL>

<P><STRONG><a name="[bb]"></a>ampSetEqDefault</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, sta339.o(i.ampSetEqDefault))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ampSetEqDefault &rArr; ampSendCmd_3A &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_3A
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSetVolume
</UL>

<P><STRONG><a name="[ae]"></a>ampSetVolume</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, sta339.o(i.ampSetVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = ampSetVolume &rArr; ampSetEqDefault &rArr; ampSendCmd_3A &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeAmp38Cmd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcm5121SetVolume
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSetEqDefault
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_3A
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_38
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playMusic
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampDecVolume
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampAddVolume
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seW58ChangInputVolumeCheck
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOn
</UL>

<P><STRONG><a name="[bd]"></a>ampunMute</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sta339.o(i.ampunMute))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = ampunMute &rArr; ampSendCmd_38 &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_38
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playMusic
</UL>

<P><STRONG><a name="[be]"></a>asCenter</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, appkey.o(i.asCenter))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = asCenter &rArr; writeeeprom &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeeeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
</UL>

<P><STRONG><a name="[c0]"></a>asStreao</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, appkey.o(i.asStreao))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = asStreao &rArr; unMute &rArr; seW58sendCmd &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unMute
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mute
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeeeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
</UL>

<P><STRONG><a name="[9e]"></a>audioDetect</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, adckey.o(i.audioDetect))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcKeyHook
</UL>

<P><STRONG><a name="[11b]"></a>bootLDROM</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, main.o(i.bootLDROM))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>breathingColor</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, led.o(i.breathingColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = breathingColor &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[c4]"></a>btDisableHFP</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, csr_module.o(i.btDisableHFP))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = btDisableHFP &rArr; BTSendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
</UL>

<P><STRONG><a name="[c6]"></a>btDisableMic</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, csr_module.o(i.btDisableMic))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = btDisableMic &rArr; BTSendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
</UL>

<P><STRONG><a name="[c7]"></a>btEnableMic</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, csr_module.o(i.btEnableMic))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = btEnableMic &rArr; BTSendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
</UL>

<P><STRONG><a name="[c8]"></a>btEnaleHFP</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, csr_module.o(i.btEnaleHFP))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = btEnaleHFP &rArr; BTSendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
</UL>

<P><STRONG><a name="[c9]"></a>btForgetAll</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, csr_module.o(i.btForgetAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = btForgetAll &rArr; BTSendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
</UL>

<P><STRONG><a name="[ca]"></a>btGetMsg</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, csr_module.o(i.btGetMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = btGetMsg &rArr; BT_analyse &rArr; btStartUp &rArr; BTSendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendInfo
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iputs
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_analyse
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c]"></a>btPairing</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, csr_module.o(i.btPairing))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = btPairing &rArr; BTSendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_analyse
</UL>

<P><STRONG><a name="[3d]"></a>btReconnect</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, csr_module.o(i.btReconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = btReconnect &rArr; BTSendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_analyse
</UL>

<P><STRONG><a name="[51]"></a>btShutDown</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, csr_module.o(i.btShutDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = btShutDown &rArr; BTSendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterStandby
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputChannel
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422InitAllConf
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83DealMsg
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doCuMsg
</UL>

<P><STRONG><a name="[3a]"></a>btStartUp</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, csr_module.o(i.btStartUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = btStartUp &rArr; BTSendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputChannel
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_analyse
</UL>

<P><STRONG><a name="[cd]"></a>bt_dis_last_connect</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, csr_module.o(i.bt_dis_last_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bt_dis_last_connect &rArr; BTSendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[ce]"></a>bt_name_send</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, csr_module.o(i.bt_name_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bt_name_send &rArr; BTSendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
</UL>

<P><STRONG><a name="[cf]"></a>bt_version_read</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, csr_module.o(i.bt_version_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bt_version_read &rArr; BTSendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
</UL>

<P><STRONG><a name="[f0]"></a>callDetect</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, csr_module.o(i.callDetect))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[d0]"></a>callOffMode</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sta339.o(i.callOffMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = callOffMode &rArr; ampSendCmd_3A &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seW58SetBypass
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83UnMute
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeAmp38Cmd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_3A
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[d2]"></a>callOnMode</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sta339.o(i.callOnMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = callOnMode &rArr; ampSendCmd_3A &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83Mute
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seW58SetBypass
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeAmp38Cmd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_3A
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[2a]"></a>changeInputChannel</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, cs8422.o(i.changeInputChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = changeInputChannel &rArr; changeInputVolumeUp &rArr; seW58ChangInputVolumeCheck &rArr; ampSetVolume &rArr; ampSetEqDefault &rArr; ampSendCmd_3A &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unMute
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mute
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledColorSet
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btStartUp
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btShutDown
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83Slave
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83CuMuDetect
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputVolumeUp
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422SRCSourceSDIN
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83UnMute
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422SRCSourceAES3
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422AESRX2
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHOOSE_BT_INPUT
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHOOSE_AUX_INPUT
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changetoWirelessSlave
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sew58.o(i.seW58ChangInputVolumeCheck)
</UL>
<P><STRONG><a name="[d9]"></a>changeInputVolumeDown</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sew58.o(i.changeInputVolumeDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = changeInputVolumeDown &rArr; startATask
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initI2cDataBlock
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getChangeVolume
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w3d_mute
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[d8]"></a>changeInputVolumeUp</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sew58.o(i.changeInputVolumeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = changeInputVolumeUp &rArr; seW58ChangInputVolumeCheck &rArr; ampSetVolume &rArr; ampSetEqDefault &rArr; ampSendCmd_3A &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initI2cDataBlock
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seW58ChangInputVolumeCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputChannel
</UL>

<P><STRONG><a name="[db]"></a>change_to_local_coco</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dwhp83.o(i.change_to_local_coco))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = change_to_local_coco &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[4f]"></a>changetoWirelessSlave</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dwhp83.o(i.changetoWirelessSlave))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = changetoWirelessSlave &rArr; changeInputChannel &rArr; changeInputVolumeUp &rArr; seW58ChangInputVolumeCheck &rArr; ampSetVolume &rArr; ampSetEqDefault &rArr; ampSendCmd_3A &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83DealMsg
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doCuMsg
</UL>

<P><STRONG><a name="[dc]"></a>closeCall</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, csr_module.o(i.closeCall))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = closeCall &rArr; BTSendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[d6]"></a>cs8422AESRX2</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cs8422.o(i.cs8422AESRX2))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = cs8422AESRX2 &rArr; cs8422SendCmd &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputChannel
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422InitAllConf
</UL>

<P><STRONG><a name="[e0]"></a>cs8422Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cs8422.o(i.cs8422Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cs8422Init
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getATask
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e1]"></a>cs8422InitAllConf</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, cs8422.o(i.cs8422InitAllConf))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = cs8422InitAllConf &rArr; getMuAddr &rArr; cs8422SRCSourceSDIN &rArr; cs8422SendCmd &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledColorSet
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btShutDown
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83Slave
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83CuMuDetect
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422SRCSourceSDIN
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMuAddr
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422SendCmd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422SRCSourceAES3
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422AESRX2
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHOOSE_BT_INPUT
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHOOSE_AUX_INPUT
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
</UL>

<P><STRONG><a name="[d7]"></a>cs8422SRCSourceAES3</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cs8422.o(i.cs8422SRCSourceAES3))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = cs8422SRCSourceAES3 &rArr; cs8422SendCmd &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputChannel
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422InitAllConf
</UL>

<P><STRONG><a name="[d4]"></a>cs8422SRCSourceSDIN</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cs8422.o(i.cs8422SRCSourceSDIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = cs8422SRCSourceSDIN &rArr; cs8422SendCmd &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputChannel
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422InitAllConf
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMuAddr
</UL>

<P><STRONG><a name="[df]"></a>cs8422SendCmd</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, cs8422.o(i.cs8422SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = cs8422SendCmd &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initI2cDataBlock
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addI2cChain
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_TIMER_RESET
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422InitAllConf
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422SRCSourceSDIN
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422SRCSourceAES3
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422AESRX2
</UL>

<P><STRONG><a name="[5e]"></a>dealMuContainer</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, dwhp83.o(i.dealMuContainer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dealMuContainer &rArr; DWPH83VolumeChange &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWPH83VolumeChange
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83SpiritTask
</UL>

<P><STRONG><a name="[80]"></a>dealPowerKey</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, power.o(i.dealPowerKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dealPowerKey &rArr; sysDelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcReadKey
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayUs
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_MODE
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DECT_DC
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Init
</UL>

<P><STRONG><a name="[e7]"></a>delStandbytkey</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, appkey.o(i.delStandbytkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = delStandbytkey &rArr; outStandby &rArr; playMusic &rArr; ampSetVolume &rArr; ampSetEqDefault &rArr; ampSendCmd_3A &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irKeyScan
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devStandbyDealAdcKey
</UL>

<P><STRONG><a name="[e9]"></a>delStartkey</STRONG> (Thumb, 2388 bytes, Stack size 24 bytes, appkey.o(i.delStartkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = delStartkey &rArr; changetoWirelessSlave &rArr; changeInputChannel &rArr; changeInputVolumeUp &rArr; seW58ChangInputVolumeCheck &rArr; ampSetVolume &rArr; ampSetEqDefault &rArr; ampSendCmd_3A &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w3d_mute
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testOutputSpeakers
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soundbar_coco_check
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_soundbar_coco
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_local_coco
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playMusic
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledColorSet
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ismute
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isDwhp83Linked
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextInput
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changetoWirelessSlave
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_to_local_coco
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputVolumeDown
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callDetect
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_version_read
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_name_send
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_dis_last_connect
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btStartUp
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btShutDown
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btPairing
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btForgetAll
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btEnaleHFP
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btEnableMic
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btDisableMic
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btDisableHFP
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSetVolume
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampDecVolume
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampAddVolume
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83Slave
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83ReadVersion
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83Master
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83GetStatus
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83CuMuDetect
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83SpiritTask
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83CuCV0
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83CuCV
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83toSUB
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83toEXT_MCU
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83Mute
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeeeprom
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asStreao
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asCenter
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayAMs
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setConfig
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterStandby
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irKeyScan
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devStartDealAdcKey
</UL>

<P><STRONG><a name="[9a]"></a>delayus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dwhp83.o(i.delayus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBuf
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeAmp38Cmd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDwhp83
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nack
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWriteByte
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStop
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRestart
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cReadByte
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cAck
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack
</UL>

<P><STRONG><a name="[a8]"></a>devStandbyDealAdcKey</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, adckey.o(i.devStandbyDealAdcKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = devStandbyDealAdcKey &rArr; delStandbytkey &rArr; outStandby &rArr; playMusic &rArr; ampSetVolume &rArr; ampSetEqDefault &rArr; ampSendCmd_3A &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStandbytkey
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adckeyScan
</UL>

<P><STRONG><a name="[a7]"></a>devStartDealAdcKey</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, adckey.o(i.devStartDealAdcKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = devStartDealAdcKey &rArr; delStartkey &rArr; changetoWirelessSlave &rArr; changeInputChannel &rArr; changeInputVolumeUp &rArr; seW58ChangInputVolumeCheck &rArr; ampSetVolume &rArr; ampSetEqDefault &rArr; ampSendCmd_3A &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adckeyScan
</UL>

<P><STRONG><a name="[54]"></a>doCuMsg</STRONG> (Thumb, 404 bytes, Stack size 16 bytes, dwhp83.o(i.doCuMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = doCuMsg &rArr; changetoWirelessSlave &rArr; changeInputChannel &rArr; changeInputVolumeUp &rArr; seW58ChangInputVolumeCheck &rArr; ampSetVolume &rArr; ampSetEqDefault &rArr; ampSendCmd_3A &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changetoWirelessSlave
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btShutDown
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwhp83CuAck
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addMuContainer
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWPH83VolumeChange
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83SendCmd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CLR_PIN
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83DealMsg
</UL>

<P><STRONG><a name="[53]"></a>doMuMsg</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, dwhp83.o(i.doMuMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = doMuMsg &rArr; DWHP83SendCmd &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveCoCo
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83DealMsg
</UL>

<P><STRONG><a name="[f6]"></a>doPowerOff</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, power.o(i.doPowerOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = doPowerOff &rArr; ledColorSet &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledColorSet
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvWDT_DisableInt
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DECT_DC
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOff
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[135]"></a>dps</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(i.dps))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendInfo
</UL>

<P><STRONG><a name="[f3]"></a>dwhp83CuAck</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dwhp83.o(i.dwhp83CuAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dwhp83CuAck &rArr; DWHP83SendCmd &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doCuMsg
</UL>

<P><STRONG><a name="[27]"></a>dwph83Check</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, dwhp83.o(i.dwph83Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dwph83Check &rArr; Dwhp83Slave &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83Slave
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83CuMuDetect
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
</UL>
<BR>[Address Reference Count : 2]<UL><LI> dwhp83.o(i.changetoWirelessSlave)
<LI> dwhp83.o(i.dwph83Check)
</UL>
<P><STRONG><a name="[9f]"></a>enterStandby</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, power.o(i.enterStandby))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = enterStandby &rArr; playMusic &rArr; ampSetVolume &rArr; ampSetEqDefault &rArr; ampSendCmd_3A &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testOutputSpeakers
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_soundbar_coco
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playMusic
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mute
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledColorSet
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btShutDown
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83Slave
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83CuMuDetect
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83toEXT_MCU
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83Mute
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setConfig
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seW58SetVolume
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOff
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DECT_DC
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seW58sendCmd
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83UnMute
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcKeyHook
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b]"></a>exitGpioI2c</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dwhp83.o(i.exitGpioI2c))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soundbar_coco_check
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83Slave
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83ReadVersion
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83Master
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83GetStatus
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83CuMuDetect
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83Mute
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_coco_check
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampInitAllConf
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83UnMute
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83DealMsg
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveCoCo
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWPH83VolumeChange
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83SendCmd
</UL>

<P><STRONG><a name="[62]"></a>getATask</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, systimertask.o(i.getATask))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irKeyTaskInit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adckeyTaskInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampInitAllConf
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seW58Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWPH83Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTaskInit
</UL>

<P><STRONG><a name="[da]"></a>getChangeVolume</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, sew58.o(i.getChangeVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = getChangeVolume &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputVolumeDown
</UL>

<P><STRONG><a name="[f9]"></a>getConfig</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, appkey.o(i.getConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = getConfig &rArr; readeeprom &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readeeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10a]"></a>getIrKey</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, irkey.o(i.getIrKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = getIrKey
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irKeyScan
</UL>

<P><STRONG><a name="[e2]"></a>getMuAddr</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cs8422.o(i.getMuAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = getMuAddr &rArr; cs8422SRCSourceSDIN &rArr; cs8422SendCmd &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422SRCSourceSDIN
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHOOSE_AUX_INPUT
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422InitAllConf
</UL>

<P><STRONG><a name="[ef]"></a>getNextInput</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, cs8422.o(i.getNextInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = getNextInput &rArr; DETECT_USER_MODULE &rArr; Dwhp83CuMuDetect &rArr; readDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DETECT_USER_MODULE
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
</UL>

<P><STRONG><a name="[fb]"></a>i2cAck</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, dwhp83.o(i.i2cAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2cAck &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_PIN
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CLR_PIN
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBuf
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeAmp38Cmd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDwhp83
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
</UL>

<P><STRONG><a name="[fc]"></a>i2cReadByte</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, dwhp83.o(i.i2cReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = i2cReadByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_PIN
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CLR_PIN
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBuf
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDwhp83
</UL>

<P><STRONG><a name="[fd]"></a>i2cRestart</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dwhp83.o(i.i2cRestart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2cRestart &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_PIN
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CLR_PIN
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBuf
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDwhp83
</UL>

<P><STRONG><a name="[96]"></a>i2cSpirit</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, i2csys.o(i.i2cSpirit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readI2cChain
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_START
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addI2cChain
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[ff]"></a>i2cStart</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, dwhp83.o(i.i2cStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayUs
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWriteByte
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cAck
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_PIN
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_MODE
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CLR_PIN
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBuf
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeAmp38Cmd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDwhp83
</UL>

<P><STRONG><a name="[102]"></a>i2cStop</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dwhp83.o(i.i2cStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2cStop &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_PIN
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CLR_PIN
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBuf
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeAmp38Cmd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDwhp83
</UL>

<P><STRONG><a name="[103]"></a>i2cSysInit</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, i2csys.o(i.i2cSysInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = i2cSysInit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_MODE
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOn
</UL>

<P><STRONG><a name="[101]"></a>i2cWriteByte</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dwhp83.o(i.i2cWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_PIN
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CLR_PIN
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBuf
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeAmp38Cmd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDwhp83
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
</UL>

<P><STRONG><a name="[8e]"></a>i2sDmaInit</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, mypdma.o(i.i2sDmaInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = i2sDmaInit &rArr; DrvPDMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvPDMA_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvPDMA_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_IRQHandler
</UL>

<P><STRONG><a name="[107]"></a>i2sStart</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, i2s_spi.o(i.i2sStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2sStart
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2S_EnableInt
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_CLR_TXFIFO
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_CLR_RXFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setConfig
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOn
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>initI2cDataBlock</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, i2csys.o(i.initI2cDataBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = initI2cDataBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputVolumeDown
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeeeprom
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readeeprom
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seW58ChangInputVolumeCheck
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputVolumeUp
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seW58sendCmd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_3A
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_38
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422SendCmd
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcmSendCmd
</UL>

<P><STRONG><a name="[12c]"></a>initIRKeyPool</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, irkey.o(i.initIRKeyPool))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOff
</UL>

<P><STRONG><a name="[cb]"></a>iputs</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uart.o(i.iputs))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btGetMsg
</UL>

<P><STRONG><a name="[46]"></a>irClkInit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, irkey.o(i.irClkInit))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Init
</UL>

<P><STRONG><a name="[109]"></a>irKeyInit</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, irkey.o(i.irKeyInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = irKeyInit &rArr; DrvTIMER_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTIMER_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irKeyTaskInit
</UL>

<P><STRONG><a name="[28]"></a>irKeyScan</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, irkey.o(i.irKeyScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = irKeyScan &rArr; delStartkey &rArr; changetoWirelessSlave &rArr; changeInputChannel &rArr; changeInputVolumeUp &rArr; seW58ChangInputVolumeCheck &rArr; ampSetVolume &rArr; ampSetEqDefault &rArr; ampSendCmd_3A &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIrKey
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStandbytkey
</UL>
<BR>[Address Reference Count : 2]<UL><LI> irkey.o(i.irKeyScan)
<LI> irkey.o(i.irKeyTaskInit)
</UL>
<P><STRONG><a name="[10b]"></a>irKeyTaskInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, irkey.o(i.irKeyTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = irKeyTaskInit &rArr; irKeyInit &rArr; DrvTIMER_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irKeyInit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getATask
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[111]"></a>isBtPaired</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, csr_module.o(i.isBtPaired))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[10e]"></a>isCallIn</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, csr_module.o(i.isCallIn))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[ed]"></a>isDwhp83Linked</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dwhp83.o(i.isDwhp83Linked))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[110]"></a>isMute</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sew58.o(i.isMute))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[5f]"></a>ismute</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sew58.o(i.ismute))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83SpiritTask
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
</UL>

<P><STRONG><a name="[10c]"></a>itoa</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uart.o(i.itoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = itoa &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartdecode
</UL>

<P><STRONG><a name="[90]"></a>ledColorSet</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, led.o(i.ledColorSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ledColorSet &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterStandby
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputChannel
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422InitAllConf
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOff
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRWU_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doPowerOff
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[81]"></a>ledInit</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, led.o(i.ledInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ledInit &rArr; DrvTIMER_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTIMER_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTIMER_EnableInt
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_MODE
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Init
</UL>

<P><STRONG><a name="[29]"></a>ledTask</STRONG> (Thumb, 2442 bytes, Stack size 24 bytes, led.o(i.ledTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = ledTask &rArr; DWHP83DealMsg &rArr; doCuMsg &rArr; changetoWirelessSlave &rArr; changeInputChannel &rArr; changeInputVolumeUp &rArr; seW58ChangInputVolumeCheck &rArr; ampSetVolume &rArr; ampSetEqDefault &rArr; ampSendCmd_3A &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unMute
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soundbar_coco_check
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_soundbar_coco
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_local_coco
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playMusic
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mute
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledColorSet
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isDwhp83Linked
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_to_local_coco
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputVolumeDown
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callDetect
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_dis_last_connect
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btStartUp
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btPairing
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83Slave
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83Master
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83GetStatus
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83CuMuDetect
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83SpiritTask
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83toEXT_MCU
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83Mute
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setConfig
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seW58sendCmd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seW58SetBypass
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openCall
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isMute
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isCallIn
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isBtPaired
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doPowerOff
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422SRCSourceSDIN
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeCall
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callOnMode
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callOffMode
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btReconnect
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_SB_alive
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_volume_unmute
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_volume_mute
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_rx_volume_2_SUB
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RX_SB_alive
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MU_tell_CU_change
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83UnMute
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83DealMsg
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breathingColor
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DECT_DC
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHOOSE_BT_INPUT
</UL>
<BR>[Address Reference Count : 2]<UL><LI> led.o(i.ledTask)
<LI> led.o(i.ledTaskInit)
</UL>
<P><STRONG><a name="[114]"></a>ledTaskInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, led.o(i.ledTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ledTaskInit &rArr; startATask
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getATask
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[115]"></a>local_coco_check</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, dwhp83.o(i.local_coco_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = local_coco_check &rArr; readDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitGpioI2c
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDwhp83
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
</UL>

<P><STRONG><a name="[1f]"></a>main</STRONG> (Thumb, 330 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = main &rArr; sleep &rArr; outStandby &rArr; playMusic &rArr; ampSetVolume &rArr; ampSetEqDefault &rArr; ampSendCmd_3A &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irKeyTaskInit
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledColorSet
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2sStart
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getConfig
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterStandby
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adckeyTaskInit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartdecode
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashRead
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPageWrite
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seW58Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runTimedTasks
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBuf
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btGetMsg
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SClkInit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWPH83Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTSendCmd
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTInit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootLDROM
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openMcuCtrlPin
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_MODE
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DECT_DC
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTaskInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry8.o(.ARM.Collect$$$$00000009)
</UL>
<P><STRONG><a name="[c1]"></a>mute</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sew58.o(i.mute))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = mute &rArr; seW58sendCmd &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seW58SetMute
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seW58sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asStreao
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterStandby
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputChannel
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOn
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[121]"></a>nack</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dwhp83.o(i.nack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nack &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_PIN
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CLR_PIN
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBuf
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDwhp83
</UL>

<P><STRONG><a name="[10f]"></a>openCall</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, csr_module.o(i.openCall))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = openCall &rArr; BTSendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[e8]"></a>outStandby</STRONG> (Thumb, 406 bytes, Stack size 24 bytes, power.o(i.outStandby))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = outStandby &rArr; playMusic &rArr; ampSetVolume &rArr; ampSetEqDefault &rArr; ampSendCmd_3A &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resumeI2c
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unMute
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soundbar_coco_check
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_soundbar_coco
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_local_coco
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playMusic
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mute
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledColorSet
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btDisableHFP
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83Slave
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83Master
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83CuMuDetect
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readeeprom
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getConfig
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcReadKey
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_coco_check
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422InitAllConf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUB_volume_unmute
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOn
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTInit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DECT_DC
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStandbytkey
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[126]"></a>pcm5121Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pcm5121.o(i.pcm5121Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = pcm5121Init &rArr; pcmSendCmd &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcmSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOn
</UL>

<P><STRONG><a name="[bc]"></a>pcm5121SetVolume</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, pcm5121.o(i.pcm5121SetVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = pcm5121SetVolume &rArr; pcmSendCmd &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcmSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSetVolume
</UL>

<P><STRONG><a name="[127]"></a>pcmSendCmd</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, pcm5121.o(i.pcmSendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = pcmSendCmd &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initI2cDataBlock
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addI2cChain
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcm5121Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcm5121SetVolume
</UL>

<P><STRONG><a name="[eb]"></a>playMusic</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, i2s_spi.o(i.playMusic))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = playMusic &rArr; ampSetVolume &rArr; ampSetEqDefault &rArr; ampSendCmd_3A &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSetVolume
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83Mute
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartdecode
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampunMute
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampMute
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readWaveHeaderInfo
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adpcmDataInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterStandby
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[f8]"></a>powerOff</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, power.o(i.powerOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = powerOff &rArr; ampPowerDown &rArr; writeAmp38Cmd &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initIRKeyPool
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledColorSet
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUART_DisableInt
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopFlashLed
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampPowerDown
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeMcuCtrlPin
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_DISABLE_MCK
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_MODE
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DECT_DC
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doPowerOff
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterStandby
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seW58ChangInputVolumeCheck
</UL>

<P><STRONG><a name="[124]"></a>powerOn</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, power.o(i.powerOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = powerOn &rArr; ampSetVolume &rArr; ampSetEqDefault &rArr; ampSendCmd_3A &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSysInit
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mute
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2sStart
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSetVolume
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seW58DefaultVolume
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcm5121Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendEqs_3A
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendEqs_38b
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendEqs_38
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampInitAllConf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openMcuCtrlPin
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SClkInit
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTInit
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seW58sendCmd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seW58SetBypass
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
</UL>

<P><STRONG><a name="[8a]"></a>putKey2Pool</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, irkey.o(i.putKey2Pool))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_IRQHandler
</UL>

<P><STRONG><a name="[11a]"></a>readBuf</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, dwhp83.o(i.readBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = readBuf &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nack
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWriteByte
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStop
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRestart
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cReadByte
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cAck
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>readDwhp83</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dwhp83.o(i.readDwhp83))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = readDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nack
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWriteByte
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStop
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRestart
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cReadByte
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cAck
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soundbar_coco_check
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83ReadVersion
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83GetStatus
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83CuMuDetect
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_coco_check
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83DealMsg
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveCoCo
</UL>

<P><STRONG><a name="[fe]"></a>readI2cChain</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, i2csys.o(i.readI2cChain))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSpirit
</UL>

<P><STRONG><a name="[129]"></a>readWaveHeaderInfo</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, i2s_spi.o(i.readWaveHeaderInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = readWaveHeaderInfo &rArr; spiSendWord
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSendWord
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playMusic
</UL>

<P><STRONG><a name="[fa]"></a>readeeprom</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, appkey.o(i.readeeprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = readeeprom &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initI2cDataBlock
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addI2cChain
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getConfig
</UL>

<P><STRONG><a name="[21]"></a>resetHook</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, power.o(i.resetHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = resetHook &rArr; GPIO_SET_MODE
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_CLEAR_RESET_FLAG
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_MODE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(.text)
</UL>
<P><STRONG><a name="[123]"></a>resumeI2c</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, i2csys.o(i.resumeI2c))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = resumeI2c
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seW58ResumeI2c
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampResumeI2c
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
</UL>

<P><STRONG><a name="[11f]"></a>runTimedTasks</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, systimertask.o(i.runTimedTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = runTimedTasks
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f5]"></a>saveCoCo</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dwhp83.o(i.saveCoCo))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = saveCoCo &rArr; readDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitGpioI2c
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDwhp83
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doMuMsg
</UL>

<P><STRONG><a name="[26]"></a>seW58ChangInputVolumeCheck</STRONG> (Thumb, 432 bytes, Stack size 32 bytes, sew58.o(i.seW58ChangInputVolumeCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = seW58ChangInputVolumeCheck &rArr; ampSetVolume &rArr; ampSetEqDefault &rArr; ampSendCmd_3A &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unMute
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initI2cDataBlock
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSetVolume
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addI2cChain
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seW58SetSubOutGain
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seW58SetMute
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnUpVolume
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnDownVolume
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopATask
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOff
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seW58sendCmd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seW58SetBypass
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputVolumeUp
</UL>
<BR>[Address Reference Count : 4]<UL><LI> sew58.o(i.seW58ChangInputVolumeCheck)
<LI> sew58.o(i.turnDownVolume)
<LI> sew58.o(i.turnUpVolume)
<LI> sew58.o(i.changeInputVolumeDown)
</UL>
<P><STRONG><a name="[12d]"></a>seW58DefaultVolume</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sew58.o(i.seW58DefaultVolume))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOn
</UL>

<P><STRONG><a name="[2b]"></a>seW58FlasfLed</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sew58.o(i.seW58FlasfLed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = seW58FlasfLed &rArr; startATask
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sew58.o(i.seW58ChangInputVolumeCheck)
<LI> sew58.o(i.seW58FlasfLed)
</UL>
<P><STRONG><a name="[117]"></a>seW58Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, sew58.o(i.seW58Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = seW58Init
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getATask
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[130]"></a>seW58ResumeI2c</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sew58.o(i.seW58ResumeI2c))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resumeI2c
</UL>

<P><STRONG><a name="[d1]"></a>seW58SetBypass</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sew58.o(i.seW58SetBypass))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seW58ChangInputVolumeCheck
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOn
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callOnMode
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callOffMode
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[13b]"></a>seW58SetChannelCheck</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sew58.o(i.seW58SetChannelCheck))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testOutputSpeakers
</UL>

<P><STRONG><a name="[120]"></a>seW58SetMute</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sew58.o(i.seW58SetMute))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unMute
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mute
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seW58ChangInputVolumeCheck
</UL>

<P><STRONG><a name="[132]"></a>seW58SetSubOutGain</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sew58.o(i.seW58SetSubOutGain))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seW58ChangInputVolumeCheck
</UL>

<P><STRONG><a name="[f7]"></a>seW58SetVolume</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sew58.o(i.seW58SetVolume))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterStandby
</UL>

<P><STRONG><a name="[2c]"></a>seW58sendCmd</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, sew58.o(i.seW58sendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = seW58sendCmd &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initI2cDataBlock
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addI2cChain
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unMute
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testOutputSpeakers
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mute
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterStandby
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seW58ChangInputVolumeCheck
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOn
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sew58.o(i.seW58sendCmd)
</UL>
<P><STRONG><a name="[cc]"></a>sendInfo</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, uart.o(i.sendInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = sendInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dps
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btGetMsg
</UL>

<P><STRONG><a name="[a0]"></a>setConfig</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, appkey.o(i.setConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = setConfig &rArr; writeeeprom &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2sStart
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeeeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterStandby
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcKeyHook
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[ee]"></a>set_local_coco</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, dwhp83.o(i.set_local_coco))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = set_local_coco &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[f2]"></a>set_soundbar_coco</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, dwhp83.o(i.set_soundbar_coco))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = set_soundbar_coco &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterStandby
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[a2]"></a>sleep</STRONG> (Thumb, 552 bytes, Stack size 24 bytes, power.o(i.sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = sleep &rArr; outStandby &rArr; playMusic &rArr; ampSetVolume &rArr; ampSetEqDefault &rArr; ampSendCmd_3A &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_DisableInt
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irKeyTaskInit
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledColorSet
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adckeyTaskInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUART_DisableInt
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvWDT_DisableInt
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTIMER_EnableInt
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTIMER_DisableInt
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskFlush
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayUs
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeMcuCtrlPin
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_DISABLE_MCK
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_MODE
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableInt
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DECT_DC
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seW58Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWPH83Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doPowerOff
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTaskInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcKeyHook
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ec]"></a>soundbar_coco_check</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dwhp83.o(i.soundbar_coco_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = soundbar_coco_check &rArr; readDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitGpioI2c
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDwhp83
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[125]"></a>spiFlashInit</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, i2s_spi.o(i.spiFlashInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = spiFlashInit &rArr; spiFlashRead &rArr; spiSendWord
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSPI_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashRead
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
</UL>

<P><STRONG><a name="[11e]"></a>spiFlashPageWrite</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, i2s_spi.o(i.spiFlashPageWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = spiFlashPageWrite &rArr; spiSendWord
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSendWord
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11d]"></a>spiFlashRead</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, i2s_spi.o(i.spiFlashRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = spiFlashRead &rArr; spiSendWord
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSendWord
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashInit
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>startATask</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, systimertask.o(i.startATask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = startATask
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irKeyTaskInit
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irKeyScan
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changetoWirelessSlave
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputVolumeDown
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampDecVolume
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampAddVolume
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83SpiritTask
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adckeyTaskInit
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adckeyScan
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seW58FlasfLed
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seW58ChangInputVolumeCheck
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnUpVolume
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnDownVolume
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWPH83Init
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seW58sendCmd
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTaskInit
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwph83Check
</UL>

<P><STRONG><a name="[12a]"></a>stopFlashLed</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sew58.o(i.stopFlashLed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stopFlashLed
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopATask
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unMute
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOff
</UL>

<P><STRONG><a name="[52]"></a>strncpy</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(i.strncpy))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83DealMsg
</UL>

<P><STRONG><a name="[a1]"></a>sysDelayAMs</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, systimertask.o(i.sysDelayAMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sysDelayAMs
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_TIMER_RESET
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcKeyHook
</UL>

<P><STRONG><a name="[39]"></a>sysDelayMs</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, systimertask.o(i.sysDelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sysDelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_TIMER_RESET
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unMute
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_soundbar_coco
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_local_coco
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playMusic
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mute
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83SpiritTask
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getConfig
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asStreao
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asCenter
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setConfig
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterStandby
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputChannel
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seW58ChangInputVolumeCheck
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422InitAllConf
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOn
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOff
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRWU_IRQHandler
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealPowerKey
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doPowerOff
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callOnMode
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callOffMode
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83DealMsg
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_analyse
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMuAddr
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwph83Check
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doCuMsg
</UL>

<P><STRONG><a name="[e5]"></a>sysDelayUs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, systimertask.o(i.sysDelayUs))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealPowerKey
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
</UL>

<P><STRONG><a name="[7f]"></a>sysTaskInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, systimertask.o(i.sysTaskInit))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Init
</UL>

<P><STRONG><a name="[137]"></a>taskFlush</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, systimertask.o(i.taskFlush))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
</UL>

<P><STRONG><a name="[ea]"></a>testOutputSpeakers</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sew58.o(i.testOutputSpeakers))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = testOutputSpeakers &rArr; seW58sendCmd &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seW58SetChannelCheck
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seW58sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterStandby
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
</UL>

<P><STRONG><a name="[8d]"></a>triggerFilter</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, filter.o(i.triggerFilter))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_IRQHandler
</UL>

<P><STRONG><a name="[116]"></a>uartdecode</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, uart.o(i.uartdecode))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = uartdecode &rArr; itoa &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTSendCmd
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playMusic
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>unMute</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sew58.o(i.unMute))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = unMute &rArr; seW58sendCmd &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seW58SetMute
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopFlashLed
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seW58sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asStreao
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputChannel
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seW58ChangInputVolumeCheck
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[f1]"></a>w3d_mute</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sew58.o(i.w3d_mute))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = w3d_mute &rArr; changeInputVolumeDown &rArr; startATask
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputVolumeDown
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
</UL>

<P><STRONG><a name="[b4]"></a>writeAmp38Cmd</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, dwhp83.o(i.writeAmp38Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = writeAmp38Cmd &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWriteByte
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStop
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cAck
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CLR_PIN
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSetVolume
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendEqs_38b
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampPowerDown
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampInitAllConf
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callOnMode
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callOffMode
</UL>

<P><STRONG><a name="[56]"></a>writeDwhp83</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, dwhp83.o(i.writeDwhp83))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWriteByte
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStop
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cAck
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CLR_PIN
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_soundbar_coco
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_local_coco
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_to_local_coco
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83Slave
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83Master
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83toSUB
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83toEXT_MCU
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83Mute
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterStandby
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUB_volume_unmute
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_SB_alive
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_volume_unmute
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_volume_mute
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RX_SB_alive
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MU_tell_CU_change
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83UnMute
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUB_volume_mute
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWPH83VolumeChange
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83SendCmd
</UL>

<P><STRONG><a name="[bf]"></a>writeeeprom</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, appkey.o(i.writeeeprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = writeeeprom &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initI2cDataBlock
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addI2cChain
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asStreao
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asCenter
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setConfig
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[d]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drvadc.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_DisableInt
</UL>

<P><STRONG><a name="[3f]"></a>CLK_GetHCLKFreq</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, drvi2c.o(i.CLK_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetAPBClockFreq
</UL>

<P><STRONG><a name="[67]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drvi2c.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Init
</UL>

<P><STRONG><a name="[66]"></a>SYS_RESET_IP2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drvi2c.o(i.SYS_RESET_IP2))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Init
</UL>

<P><STRONG><a name="[69]"></a>SYS_RESET_IP2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drvspi.o(i.SYS_RESET_IP2))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSPI_Init
</UL>

<P><STRONG><a name="[6f]"></a>APBCLK_ENABLE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drvtimer.o(i.APBCLK_ENABLE))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvWDT_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTIMER_Init
</UL>

<P><STRONG><a name="[6b]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drvtimer.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvWDT_DisableInt
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTIMER_DisableInt
</UL>

<P><STRONG><a name="[6d]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drvtimer.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvWDT_EnableInt
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTIMER_EnableInt
</UL>

<P><STRONG><a name="[74]"></a>SYS_UnlockReg</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drvtimer.o(i.SYS_UnlockReg))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvWDT_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvWDT_EnableInt
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvWDT_DisableInt
</UL>

<P><STRONG><a name="[75]"></a>WDT_DISABLE_INT</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drvtimer.o(i.WDT_DISABLE_INT))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvWDT_DisableInt
</UL>

<P><STRONG><a name="[71]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drvuart.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUART_DisableInt
</UL>

<P><STRONG><a name="[72]"></a>SYS_RESET_IP2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drvuart.o(i.SYS_RESET_IP2))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUART_Init
</UL>

<P><STRONG><a name="[32]"></a>ADC_GET_RSLT</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, adckey.o(i.ADC_GET_RSLT))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[9d]"></a>DECT_DC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adckey.o(i.DECT_DC))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcKeyHook
</UL>

<P><STRONG><a name="[a4]"></a>GPIO_SET_MODE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, adckey.o(i.GPIO_SET_MODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_SET_MODE
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcKeyInit
</UL>

<P><STRONG><a name="[104]"></a>GPIO_SET_MODE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, i2csys.o(i.GPIO_SET_MODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_SET_MODE
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSysInit
</UL>

<P><STRONG><a name="[83]"></a>I2C_CLEAR_SI</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2csys.o(i.I2C_CLEAR_SI))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>

<P><STRONG><a name="[82]"></a>I2C_START</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2csys.o(i.I2C_START))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSpirit
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>

<P><STRONG><a name="[112]"></a>CHOOSE_BT_INPUT</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, led.o(i.CHOOSE_BT_INPUT))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[113]"></a>DECT_DC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, led.o(i.DECT_DC))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[10d]"></a>GPIO_SET_MODE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, led.o(i.GPIO_SET_MODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_SET_MODE
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledInit
</UL>

<P><STRONG><a name="[119]"></a>DECT_DC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.DECT_DC))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11c]"></a>GPIO_SET_MODE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(i.GPIO_SET_MODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_SET_MODE
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openMcuCtrlPin
</UL>

<P><STRONG><a name="[42]"></a>SYS_UnlockReg</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.SYS_UnlockReg))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Init
</UL>

<P><STRONG><a name="[44]"></a>SysTickInit</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, main.o(i.SysTickInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SysTickInit
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Init
</UL>

<P><STRONG><a name="[118]"></a>openMcuCtrlPin</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, main.o(i.openMcuCtrlPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = openMcuCtrlPin &rArr; GPIO_SET_MODE
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_MODE
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e6]"></a>DECT_DC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, power.o(i.DECT_DC))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterStandby
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOff
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealPowerKey
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doPowerOff
</UL>

<P><STRONG><a name="[7c]"></a>GPIO_DisableInt</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, power.o(i.GPIO_DisableInt))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPAB_IRQHandler
</UL>

<P><STRONG><a name="[136]"></a>GPIO_EnableInt</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, power.o(i.GPIO_EnableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
</UL>

<P><STRONG><a name="[de]"></a>GPIO_SET_MODE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, power.o(i.GPIO_SET_MODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_SET_MODE
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetHook
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOff
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openMcuCtrlPin
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeMcuCtrlPin
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealPowerKey
</UL>

<P><STRONG><a name="[12b]"></a>I2S_DISABLE_MCK</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, power.o(i.I2S_DISABLE_MCK))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOff
</UL>

<P><STRONG><a name="[8f]"></a>SYS_UnlockReg</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, power.o(i.SYS_UnlockReg))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IRQHandler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTInit
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRWU_IRQHandler
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doPowerOff
</UL>

<P><STRONG><a name="[98]"></a>WDT_CLEAR_RESET_FLAG</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, power.o(i.WDT_CLEAR_RESET_FLAG))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetHook
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTInit
</UL>

<P><STRONG><a name="[dd]"></a>closeMcuCtrlPin</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, power.o(i.closeMcuCtrlPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = closeMcuCtrlPin &rArr; GPIO_SET_MODE
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_MODE
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOff
</UL>

<P><STRONG><a name="[122]"></a>openMcuCtrlPin</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, power.o(i.openMcuCtrlPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = openMcuCtrlPin &rArr; GPIO_SET_MODE
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_MODE
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOn
</UL>

<P><STRONG><a name="[131]"></a>stopATask</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sew58.o(i.stopATask))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seW58ChangInputVolumeCheck
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopFlashLed
</UL>

<P><STRONG><a name="[134]"></a>turnDownVolume</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, sew58.o(i.turnDownVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = turnDownVolume &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addI2cChain
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seW58ChangInputVolumeCheck
</UL>

<P><STRONG><a name="[133]"></a>turnUpVolume</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, sew58.o(i.turnUpVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = turnUpVolume &rArr; addI2cChain &rArr; i2cSpirit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addI2cChain
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seW58ChangInputVolumeCheck
</UL>

<P><STRONG><a name="[139]"></a>SYS_UnlockReg</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, systimertask.o(i.SYS_UnlockReg))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayAMs
</UL>

<P><STRONG><a name="[13a]"></a>WDT_TIMER_RESET</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, systimertask.o(i.WDT_TIMER_RESET))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayAMs
</UL>

<P><STRONG><a name="[8c]"></a>PDMA_GET_CH_INTR_STS</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mypdma.o(i.PDMA_GET_CH_INTR_STS))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_IRQHandler
</UL>

<P><STRONG><a name="[85]"></a>I2S_CLR_RXFIFO</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2s_spi.o(i.I2S_CLR_RXFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2sStart
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SClkInit
</UL>

<P><STRONG><a name="[86]"></a>I2S_CLR_TXFIFO</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2s_spi.o(i.I2S_CLR_TXFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2sStart
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SClkInit
</UL>

<P><STRONG><a name="[87]"></a>I2S_SET_MCK_DIV</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2s_spi.o(i.I2S_SET_MCK_DIV))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SClkInit
</UL>

<P><STRONG><a name="[138]"></a>SPI_SET_TX_BIT_LEN</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, i2s_spi.o(i.SPI_SET_TX_BIT_LEN))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSendWord
</UL>

<P><STRONG><a name="[12e]"></a>spiSendWord</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, i2s_spi.o(i.spiSendWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spiSendWord
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SET_TX_BIT_LEN
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashRead
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPageWrite
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readWaveHeaderInfo
</UL>

<P><STRONG><a name="[b1]"></a>SYS_UnlockReg</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sta339.o(i.SYS_UnlockReg))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampInitAllConf
</UL>

<P><STRONG><a name="[b2]"></a>WDT_TIMER_RESET</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sta339.o(i.WDT_TIMER_RESET))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampInitAllConf
</UL>

<P><STRONG><a name="[ad]"></a>stopATask</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sta339.o(i.stopATask))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampDecVolume
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampAddVolume
</UL>

<P><STRONG><a name="[d5]"></a>CHOOSE_AUX_INPUT</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cs8422.o(i.CHOOSE_AUX_INPUT))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputChannel
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422InitAllConf
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMuAddr
</UL>

<P><STRONG><a name="[d3]"></a>CHOOSE_BT_INPUT</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cs8422.o(i.CHOOSE_BT_INPUT))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputChannel
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422InitAllConf
</UL>

<P><STRONG><a name="[e3]"></a>SYS_UnlockReg</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cs8422.o(i.SYS_UnlockReg))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422SendCmd
</UL>

<P><STRONG><a name="[e4]"></a>WDT_TIMER_RESET</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cs8422.o(i.WDT_TIMER_RESET))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422SendCmd
</UL>

<P><STRONG><a name="[37]"></a>BT_analyse</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, csr_module.o(i.BT_analyse))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BT_analyse &rArr; btStartUp &rArr; BTSendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btStartUp
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btPairing
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btReconnect
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btGetMsg
</UL>

<P><STRONG><a name="[3b]"></a>dumpMsg</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, csr_module.o(i.dumpMsg))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_analyse
</UL>

<P><STRONG><a name="[50]"></a>GPIO_CLR_PIN</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dwhp83.o(i.GPIO_CLR_PIN))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83DealMsg
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeAmp38Cmd
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nack
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWriteByte
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStop
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRestart
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cReadByte
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cAck
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doCuMsg
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack
</UL>

<P><STRONG><a name="[100]"></a>GPIO_SET_MODE</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, dwhp83.o(i.GPIO_SET_MODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_SET_MODE
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
</UL>

<P><STRONG><a name="[9b]"></a>GPIO_SET_PIN</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dwhp83.o(i.GPIO_SET_PIN))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nack
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWriteByte
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStop
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRestart
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cReadByte
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cAck
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
