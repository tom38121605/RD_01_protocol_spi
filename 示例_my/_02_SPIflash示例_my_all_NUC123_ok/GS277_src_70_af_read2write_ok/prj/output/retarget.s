; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--min_array_alignment=4 --split_sections --debug -c --asm --info=totals -o.\output\retarget.o --depend=.\output\retarget.d --cpu=Cortex-M0 --apcs=interwork -I..\CMSIS\CM0\DeviceSupport\Nuvoton\NUC123Series -I..\CMSIS\CM0\CoreSupport -I..\INC\DrvInc -I..\INC\SysInc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -D__MICROLIB --omf_browse=.\output\retarget.crf ..\DrvSrc\retarget.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||i.GetChar||, CODE, READONLY, ALIGN=1

GetChar PROC
        PUSH     {r3,lr}
        B        |L1.14|
|L1.4|
        LDR      r0,[sp,#0]
        CMP      r0,#0
        BEQ      |L1.14|
        UXTB     r0,r0
        POP      {r3,pc}
|L1.14|
        MOV      r2,sp
        MOVS     r1,#0
        MOVS     r0,#7
        BL       SH_DoCommand
        CMP      r0,#0
        BNE      |L1.4|
        POP      {r3,pc}
        ENDP


        AREA ||i.IsDebugFifoEmpty||, CODE, READONLY, ALIGN=2

IsDebugFifoEmpty PROC
        LDR      r0,|L2.12|
        LDR      r0,[r0,#0x18]
        LSLS     r0,r0,#3
        LSRS     r0,r0,#31
        BX       lr
        ENDP

        DCW      0x0000
|L2.12|
        DCD      0x40050000

        AREA ||i.SendChar||, CODE, READONLY, ALIGN=2

SendChar PROC
        PUSH     {r4-r6,lr}
        LDR      r4,|L3.76|
        LDR      r6,|L3.72|
        LDRB     r1,[r4,#0]  ; g_buf_len
        MOVS     r5,#0
        STRB     r0,[r6,r1]
        ADDS     r1,r1,#1
        UXTB     r1,r1
        STRB     r1,[r4,#0]
        STRB     r5,[r6,r1]
        ADDS     r1,r1,#1
        CMP      r1,#0x10
        BCS      |L3.34|
        CMP      r0,#0xa
        BEQ      |L3.34|
        CMP      r0,#0
        BNE      |L3.68|
|L3.34|
        MOVS     r2,#0
        LDR      r1,|L3.72|
        MOVS     r0,#4
        BL       SH_DoCommand
        CMP      r0,#0
        BNE      |L3.66|
        MOVS     r3,#0
        B        |L3.60|
|L3.52|
        LDRB     r0,[r6,r3]
        BL       SendChar_ToUART
        ADDS     r3,r3,#1
|L3.60|
        LDRB     r0,[r4,#0]  ; g_buf_len
        CMP      r3,r0
        BLT      |L3.52|
|L3.66|
        STRB     r5,[r4,#0]
|L3.68|
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L3.72|
        DCD      ||.bss||
|L3.76|
        DCD      ||.data||

        AREA ||i.SendChar_ToUART||, CODE, READONLY, ALIGN=2

SendChar_ToUART PROC
        LDR      r1,|L4.28|
|L4.2|
        LDR      r2,[r1,#0x18]
        LSLS     r2,r2,#8
        BMI      |L4.2|
        STR      r0,[r1,#0]
        CMP      r0,#0xa
        BNE      |L4.24|
|L4.14|
        LDR      r0,[r1,#0x18]
        LSLS     r0,r0,#8
        BMI      |L4.14|
        MOVS     r0,#0xd
        STR      r0,[r1,#0]
|L4.24|
        BX       lr
        ENDP

        DCW      0x0000
|L4.28|
        DCD      0x40050000

        AREA ||i._sys_exit||, CODE, READONLY, ALIGN=2

_sys_exit PROC
        MOVS     r2,#0
        LDR      r1,|L5.24|
        MOVS     r0,#0x18
        BL       SH_DoCommand
        B        |L5.16|
|L5.12|
        BL       IsDebugFifoEmpty
|L5.16|
        CMP      r0,#0
        BEQ      |L5.12|
|L5.20|
        B        |L5.20|
        ENDP

        DCW      0x0000
|L5.24|
        DCD      0x00020026

        AREA ||i._ttywrch||, CODE, READONLY, ALIGN=1

_ttywrch PROC
        PUSH     {r4,lr}
        BL       SendChar
        POP      {r4,pc}
        ENDP


        AREA ||i.ferror||, CODE, READONLY, ALIGN=1

ferror PROC
        MOVS     r0,#0
        MVNS     r0,r0
        BX       lr
        ENDP


        AREA ||i.fgetc||, CODE, READONLY, ALIGN=1

fgetc PROC
        PUSH     {r4,lr}
        BL       GetChar
        POP      {r4,pc}
        ENDP


        AREA ||i.fputc||, CODE, READONLY, ALIGN=1

fputc PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        BL       SendChar
        MOV      r0,r4
        POP      {r4,pc}
        ENDP


        AREA ||i.kbhit||, CODE, READONLY, ALIGN=2

kbhit PROC
        LDR      r0,|L10.12|
        LDR      r0,[r0,#0x18]
        LSLS     r0,r0,#17
        LSRS     r0,r0,#31
        BX       lr
        ENDP

        DCW      0x0000
|L10.12|
        DCD      0x40050000

        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.bss||, DATA, NOINIT, ALIGN=2

g_buf
        %        16

        AREA ||.data||, DATA, ALIGN=0

g_buf_len
        DCB      0x00

        AREA ||area_number.15||, DATA, ALIGN=2

        EXPORTAS ||area_number.15||, ||.data||
__stdout
        DCD      0x00000000

        AREA ||area_number.16||, DATA, ALIGN=2

        EXPORTAS ||area_number.16||, ||.data||
__stdin
        DCD      0x00000000

        EXPORT GetChar [CODE]
        EXPORT IsDebugFifoEmpty [CODE]
        EXPORT SendChar [CODE]
        EXPORT SendChar_ToUART [CODE]
        EXPORT _sys_exit [CODE]
        EXPORT _ttywrch [CODE]
        EXPORT ferror [CODE]
        EXPORT fgetc [CODE]
        EXPORT fputc [CODE]
        EXPORT kbhit [CODE]
        EXPORT __stdout [DATA,SIZE=4]
        EXPORT __stdin [DATA,SIZE=4]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT _printf_widthprec [CODE]
        IMPORT SH_DoCommand [CODE]

        KEEP g_buf
        KEEP g_buf_len

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,3
        ATTR SETSTRING Tag_conformance,"2.06"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
