; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--min_array_alignment=4 --split_sections --debug -c --asm --info=totals -o.\output\i2s_spi.o --depend=.\output\i2s_spi.d --cpu=Cortex-M0 --apcs=interwork -I..\CMSIS\CM0\DeviceSupport\Nuvoton\NUC123Series -I..\CMSIS\CM0\CoreSupport -I..\INC\DrvInc -I..\INC\SysInc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -D__MICROLIB --omf_browse=.\output\i2s_spi.crf ..\AppSrc\i2s_spi.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||i.I2SClkInit||, CODE, READONLY, ALIGN=2

I2SClkInit PROC
        PUSH     {r4,lr}
        MOVS     r1,#5
        MOV      r4,r0
        LSLS     r1,r1,#28
        LDR      r0,[r1,#0x38]
        MOVS     r2,#0xf
        ORRS     r0,r0,r2
        STR      r0,[r1,#0x38]
        LDR      r0,|L1.160|
        LDR      r2,[r0,#0x10]
        MOVS     r3,#0xff
        ADDS     r3,r3,#0xe1
        ORRS     r2,r2,r3
        STR      r2,[r0,#0x10]
        LDR      r2,[r1,#0x38]
        LSLS     r3,r0,#6
        BICS     r2,r2,r3
        STR      r2,[r1,#0x38]
        LDR      r2,[r0,#0x10]
        LSLS     r3,r0,#14
        ORRS     r2,r2,r3
        STR      r2,[r0,#0x10]
        LDR      r0,|L1.164|
        MOVS     r2,#1
        LDR      r3,[r0,#0x1c]
        LSRS     r3,r3,#2
        LSLS     r3,r3,#2
        ORRS     r3,r3,r2
        STR      r3,[r0,#0x1c]
        LDR      r3,[r0,#8]
        LSLS     r2,r0,#20
        ORRS     r3,r3,r2
        STR      r3,[r0,#8]
        LDR      r0,[r1,#0xc]
        ORRS     r0,r0,r2
        STR      r0,[r1,#0xc]
        LDR      r0,[r1,#0xc]
        BICS     r0,r0,r2
        STR      r0,[r1,#0xc]
        BL       I2S_CLR_RXFIFO
        BL       I2S_CLR_TXFIFO
        LDR      r0,|L1.168|
        CMP      r4,r0
        BNE      |L1.96|
        MOVS     r0,#3
        B        |L1.114|
|L1.96|
        LDR      r0,|L1.172|
        CMP      r4,r0
        BNE      |L1.106|
        MOVS     r0,#6
        B        |L1.114|
|L1.106|
        LDR      r0,|L1.176|
        CMP      r4,r0
        BNE      |L1.118|
        MOVS     r0,#0xc
|L1.114|
        BL       I2S_SET_MCK_DIV
|L1.118|
        LSLS     r1,r4,#7
        LDR      r0,|L1.180|
        BL       __aeabi_uidivmod
        ADDS     r0,r0,#5
        MOVS     r1,#0xa
        BL       __aeabi_uidivmod
        LDR      r1,|L1.184|
        SUBS     r0,r0,#1
        LDR      r2,[r1,#4]
        MOVS     r3,#0xff
        LSLS     r3,r3,#8
        BICS     r2,r2,r3
        LSLS     r0,r0,#8
        ORRS     r2,r2,r0
        STR      r2,[r1,#4]
        LDR      r0,|L1.188|
        STR      r0,[r1,#0]
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L1.160|
        DCD      0x50000040
|L1.164|
        DCD      0x50000200
|L1.168|
        DCD      0x0000bb80
|L1.172|
        DCD      0x00005dc0
|L1.176|
        DCD      0x00002ee0
|L1.180|
        DCD      0x2bf0bfb0
|L1.184|
        DCD      0x401a0000
|L1.188|
        DCD      0x00009231

        AREA ||i.I2S_CLR_RXFIFO||, CODE, READONLY, ALIGN=2

I2S_CLR_RXFIFO PROC
        LDR      r0,|L2.16|
        LDR      r1,[r0,#0]
        MOVS     r2,#1
        LSLS     r2,r2,#19
        ORRS     r1,r1,r2
        STR      r1,[r0,#0]
        BX       lr
        ENDP

        DCW      0x0000
|L2.16|
        DCD      0x401a0000

        AREA ||i.I2S_CLR_TXFIFO||, CODE, READONLY, ALIGN=2

I2S_CLR_TXFIFO PROC
        LDR      r0,|L3.16|
        LDR      r1,[r0,#0]
        MOVS     r2,#1
        LSLS     r2,r2,#18
        ORRS     r1,r1,r2
        STR      r1,[r0,#0]
        BX       lr
        ENDP

        DCW      0x0000
|L3.16|
        DCD      0x401a0000

        AREA ||i.I2S_SET_MCK_DIV||, CODE, READONLY, ALIGN=2

I2S_SET_MCK_DIV PROC
        LDR      r1,|L4.16|
        LDR      r2,[r1,#4]
        LSRS     r2,r2,#3
        LSLS     r2,r2,#3
        ORRS     r2,r2,r0
        STR      r2,[r1,#4]
        BX       lr
        ENDP

        DCW      0x0000
|L4.16|
        DCD      0x401a0000

        AREA ||i.SPI1_IRQHandler||, CODE, READONLY, ALIGN=1

SPI1_IRQHandler PROC
        BX       lr
        ENDP


        AREA ||i.SPI_SET_TX_BIT_LEN||, CODE, READONLY, ALIGN=1

SPI_SET_TX_BIT_LEN PROC
        LDR      r2,[r0,#0]
        MOVS     r3,#0xf8
        BICS     r2,r2,r3
        CMP      r1,#0x20
        BNE      |L6.12|
        MOVS     r1,#0
|L6.12|
        LSLS     r1,r1,#3
        ORRS     r2,r2,r1
        STR      r2,[r0,#0]
        BX       lr
        ENDP


        AREA ||i.adpcmDataInit||, CODE, READONLY, ALIGN=2

adpcmDataInit PROC
        LDR      r1,|L7.32|
        MOVS     r0,#0
        STR      r0,[r1,#0x60]  ; adpcm_step_size_index_L_decode
        STR      r0,[r1,#0x64]  ; adpcm_step_size_index_R_decode
        STR      r0,[r1,#0x50]  ; pre_Rdata_decode
        STR      r0,[r1,#0x54]  ; pre_Ldata_decode
        STR      r0,[r1,#0x58]  ; adpcm_step_size_index_L_encode
        STR      r0,[r1,#0x5c]  ; adpcm_step_size_index_R_encode
        STR      r0,[r1,#0x48]  ; pre_Rdata_encode
        STR      r0,[r1,#0x4c]  ; pre_Ldata_encode
        STR      r0,[r1,#0x44]  ; recode_index
        STR      r0,[r1,#0x3c]  ; flash_write_triggle
        STRB     r0,[r1,#3]
        ADDS     r1,r1,#0x80
        STR      r0,[r1,#0x24]  ; block_sample_index
        BX       lr
        ENDP

|L7.32|
        DCD      ||.data||

        AREA ||i.adpcmDecode||, CODE, READONLY, ALIGN=2

adpcmDecode PROC
        PUSH     {r3-r7,lr}
        LDR      r7,|L8.464|
        LDR      r4,|L8.468|
        MOV      r5,r7
        LDR      r0,[r7,#0x24]  ; block_sample_index
        SUBS     r5,r5,#0x80
        CMP      r0,#0
        BEQ      |L8.100|
        CMP      r0,#1
        BEQ      |L8.272|
        ADDS     r0,r0,#1
        STR      r0,[r7,#0x24]  ; block_sample_index
        LDR      r1,[r7,#0x28]  ; samples_per_block
        CMP      r0,r1
        BNE      |L8.48|
        MOVS     r0,#0
        STR      r0,[r7,#0x24]  ; block_sample_index
        LDR      r0,[r7,#0x2c]  ; data_block_size
        SUBS     r0,r0,#1
        STR      r0,[r7,#0x2c]  ; data_block_size
        LDR      r0,|L8.472|
        LDRH     r1,[r0,#2]  ; file_head
        SUBS     r1,r1,#1
        STRH     r1,[r0,#2]
|L8.48|
        MOVS     r1,#8
        MOVS     r0,#0xff
        BL       spiSendWord
        LDR      r0,[r4,#0x10]
        MOVS     r3,#0xe
        MOVS     r1,#0xc
        LDRSH    r3,[r5,r3]  ; L_cofe1
        LDR      r2,[r5,#0x74]  ; L_sample1
        LDRSH    r1,[r5,r1]  ; L_cofe0
        LDR      r4,[r5,#0x58]  ; adpcm_step_size_index_L_encode
        MULS     r2,r3,r2
        MULS     r1,r4,r1
        ADDS     r1,r1,r2
        SXTB     r0,r0
        LDR      r3,[r5,#0x6c]  ; L_delta
        ASRS     r2,r0,#4
        ASRS     r1,r1,#8
        MULS     r2,r3,r2
        ADDS     r2,r2,r1
        LDR      r1,|L8.476|
        STR      r2,[r5,#0x54]  ; pre_Ldata_decode
        CMP      r2,r1
        BLE      |L8.322|
        STR      r1,[r5,#0x54]  ; pre_Ldata_decode
        B        |L8.332|
|L8.100|
        MOVS     r1,#0x10
        MOV      r0,r4
        BL       SPI_SET_TX_BIT_LEN
        MOVS     r0,#0xff
        STR      r0,[r4,#0x20]
        LDR      r0,[r4,#0]
        MOVS     r6,#1
        ORRS     r0,r0,r6
        STR      r0,[r4,#0]
        LDR      r0,[r7,#0x24]  ; block_sample_index
        ADDS     r0,r0,#1
        STR      r0,[r7,#0x24]  ; block_sample_index
|L8.126|
        LDR      r0,[r4,#0]
        LSLS     r1,r0,#31
        LSRS     r1,r1,#31
        BNE      |L8.126|
        LDR      r0,[r4,#0x10]
        STR      r0,[r5,#0x60]  ; adpcm_step_size_index_L_decode
        MOVS     r1,#0x20
        MOV      r0,r4
        BL       SPI_SET_TX_BIT_LEN
        MOVS     r0,#0xff
        STR      r0,[r4,#0x20]
        LDR      r0,[r4,#0]
        ORRS     r0,r0,r6
        STR      r0,[r4,#0]
        LDR      r0,[r5,#0x60]  ; adpcm_step_size_index_L_decode
        LDR      r2,|L8.472|
        LSRS     r1,r0,#8
        LSLS     r1,r1,#1
        LSLS     r0,r0,#24
        LSRS     r0,r0,#23
        STR      r1,[r5,#0x64]  ; adpcm_step_size_index_R_decode
        STR      r0,[r5,#0x60]  ; adpcm_step_size_index_L_decode
        LSLS     r0,r0,#1
        ADDS     r2,r2,#0x30
        LDRH     r3,[r2,r0]
        STRH     r3,[r5,#0xc]
        ADDS     r0,r0,r2
        LDRH     r0,[r0,#2]
        STRH     r0,[r5,#0xe]
        LSLS     r0,r1,#1
        LDRH     r1,[r2,r0]
        STRH     r1,[r5,#0x10]
        ADDS     r0,r0,r2
        LDRH     r0,[r0,#2]
        STRH     r0,[r5,#0x12]
|L8.198|
        LDR      r0,[r4,#0]
        LSLS     r0,r0,#31
        LSRS     r0,r0,#31
        BNE      |L8.198|
        LDR      r0,[r4,#0x10]
        STR      r0,[r5,#0x6c]  ; L_delta
        MOVS     r1,#0x20
        MOV      r0,r4
        BL       SPI_SET_TX_BIT_LEN
        MOVS     r0,#0xff
        STR      r0,[r4,#0x20]
        LDR      r0,[r4,#0]
        ORRS     r0,r0,r6
        STR      r0,[r4,#0]
        LDR      r0,[r5,#0x6c]  ; L_delta
        LSRS     r1,r0,#16
        UXTH     r0,r0
        STR      r1,[r5,#0x70]  ; R_delta
        STR      r0,[r5,#0x6c]  ; L_delta
|L8.238|
        LDR      r0,[r4,#0]
        LSLS     r1,r0,#31
        LSRS     r1,r1,#31
        BNE      |L8.238|
        LDR      r0,[r4,#0x10]
        STR      r0,[r5,#0x58]  ; adpcm_step_size_index_L_encode
        MOVS     r1,#0x20
        MOV      r0,r4
        BL       SPI_SET_TX_BIT_LEN
        MOVS     r0,#0xff
        STR      r0,[r4,#0x20]
        LDR      r0,[r4,#0]
        ORRS     r0,r0,r6
        STR      r0,[r4,#0]
        LDR      r0,[r5,#0x58]  ; adpcm_step_size_index_L_encode
        B        |L8.274|
|L8.272|
        B        |L8.306|
|L8.274|
        ASRS     r1,r0,#16
        SXTH     r0,r0
        STR      r1,[r5,#0x5c]  ; adpcm_step_size_index_R_encode
        STR      r0,[r5,#0x58]  ; adpcm_step_size_index_L_encode
|L8.282|
        LDR      r0,[r4,#0]
        LSLS     r0,r0,#31
        LSRS     r0,r0,#31
        BNE      |L8.282|
        LDR      r0,[r4,#0x10]
        ASRS     r1,r0,#16
        SXTH     r0,r0
        STR      r0,[r5,#0x74]  ; L_sample1
        STR      r1,[r5,#0x78]  ; R_sample1
        STR      r1,[r5,#0x50]  ; pre_Rdata_decode
        STR      r0,[r5,#0x54]  ; pre_Ldata_decode
        POP      {r3-r7,pc}
|L8.306|
        MOVS     r0,#2
        STR      r0,[r7,#0x24]  ; block_sample_index
        LDR      r0,[r5,#0x58]  ; adpcm_step_size_index_L_encode
        STR      r0,[r5,#0x54]  ; pre_Ldata_decode
        LDR      r0,[r5,#0x5c]  ; adpcm_step_size_index_R_encode
        STR      r0,[r5,#0x50]  ; pre_Rdata_decode
|L8.318|
        POP      {r3-r7,pc}
        B        |L8.322|
|L8.322|
        LDR      r6,|L8.476|
        MVNS     r6,r6
        CMP      r2,r6
        BGE      |L8.332|
        STR      r6,[r5,#0x54]  ; pre_Ldata_decode
|L8.332|
        STR      r4,[r5,#0x74]  ; L_sample1
        LDR      r2,[r5,#0x54]  ; pre_Ldata_decode
        LDR      r7,|L8.464|
        SXTH     r2,r2
        STR      r2,[r5,#0x58]  ; adpcm_step_size_index_L_encode
        LSLS     r2,r0,#24
        LSRS     r2,r2,#28
        LSLS     r2,r2,#2
        ADDS     r7,r7,#0xf4
        LDR      r2,[r7,r2]
        MULS     r2,r3,r2
        LSRS     r2,r2,#8
        STR      r2,[r5,#0x6c]  ; L_delta
        CMP      r2,#0x10
        BCS      |L8.368|
        MOVS     r2,#0x10
        STR      r2,[r5,#0x6c]  ; L_delta
        B        |L8.376|
|L8.368|
        LDR      r3,|L8.480|
        CMP      r2,r3
        BLS      |L8.376|
        STR      r3,[r5,#0x6c]  ; L_delta
|L8.376|
        LDR      r2,[r5,#0x5c]  ; adpcm_step_size_index_R_encode
        MOVS     r4,#0x10
        LDRSH    r4,[r5,r4]  ; R_cofe0
        MOV      r3,r2
        MULS     r2,r4,r2
        MOVS     r6,#0x12
        LDRSH    r6,[r5,r6]  ; R_cofe1
        LDR      r4,[r5,#0x78]  ; R_sample1
        LSLS     r0,r0,#28
        MULS     r4,r6,r4
        ADDS     r2,r2,r4
        ASRS     r4,r2,#8
        LDR      r2,[r5,#0x70]  ; R_delta
        ASRS     r0,r0,#28
        MOV      r6,r2
        MULS     r6,r0,r6
        ADDS     r4,r6,r4
        STR      r4,[r5,#0x50]  ; pre_Rdata_decode
        CMP      r4,r1
        BGT      |L8.424|
        LDR      r1,|L8.476|
        MVNS     r1,r1
        CMP      r4,r1
        BGE      |L8.426|
|L8.424|
        STR      r1,[r5,#0x50]  ; pre_Rdata_decode
|L8.426|
        STR      r3,[r5,#0x78]  ; R_sample1
        LDR      r1,[r5,#0x50]  ; pre_Rdata_decode
        LSLS     r0,r0,#28
        LSRS     r0,r0,#26
        STR      r1,[r5,#0x5c]  ; adpcm_step_size_index_R_encode
        LDR      r0,[r7,r0]
        MULS     r0,r2,r0
        LSRS     r0,r0,#8
        STR      r0,[r5,#0x70]  ; R_delta
        CMP      r0,#0x10
        BCS      |L8.454|
        MOVS     r0,#0x10
        STR      r0,[r5,#0x70]  ; R_delta
        B        |L8.318|
|L8.454|
        LDR      r1,|L8.480|
        CMP      r0,r1
        BLS      |L8.318|
        STR      r1,[r5,#0x70]  ; R_delta
        B        |L8.318|
        ENDP

|L8.464|
        DCD      ||.data||+0x80
|L8.468|
        DCD      0x40034000
|L8.472|
        DCD      ||.bss||+0xd4
|L8.476|
        DCD      0x00007fff
|L8.480|
        DCD      0x00003fff

        AREA ||i.adpcmEncode||, CODE, READONLY, ALIGN=1

adpcmEncode PROC
        MOVS     r0,#0
        BX       lr
        ENDP


        AREA ||i.dealFlashEvent||, CODE, READONLY, ALIGN=2

dealFlashEvent PROC
        PUSH     {r3-r7,lr}
        LDR      r4,|L10.400|
        MOV      r5,r1
        MOV      r6,r0
        LDR      r1,[r4,#0x20]  ; imusicdatalen
        LDR      r0,[r4,#0x28]  ; iDataCount
        MOVS     r7,#0
        CMP      r0,r1
        BCS      |L10.272|
        LDR      r0,[r4,#0x18]  ; pre_freq
        CMP      r0,#0
        BEQ      |L10.40|
        MOV      r0,r4
        ADDS     r0,r0,#0x80
        STR      r7,[r4,#0x18]  ; pre_freq
        LDR      r1,[r0,#4]  ; L_delta_old
        STR      r1,[r6,#0]
        LDR      r0,[r0,#8]  ; R_delta_old
        STR      r0,[r5,#0]
        POP      {r3-r7,pc}
|L10.40|
        LDR      r4,|L10.400|
        MOVS     r0,#1
        STR      r0,[r4,#0x18]  ; pre_freq
        MOVS     r1,#8
        MOVS     r0,#0xff
        BL       spiSendWord
        LDR      r0,|L10.404|
        LDR      r0,[r0,#0x10]
        UXTB     r0,r0
        STRB     r0,[r4,#6]
        LDR      r1,[r4,#0x2c]  ; inowaddress
        MOV      r12,r0
        ADDS     r1,r1,#1
        LSLS     r0,r0,#28
        STR      r1,[r4,#0x2c]  ; inowaddress
        LSRS     r0,r0,#28
        STRB     r0,[r4,#4]
        MOVS     r1,#9
        LDRSB    r1,[r4,r1]  ; newindex_x
        MOV      lr,r1
        LSLS     r2,r1,#1
        MOV      r1,r4
        ADDS     r1,r1,#0xc0
        LDRH     r1,[r1,r2]
        MOV      r2,r4
        ADDS     r2,r2,#0x80
        LSRS     r3,r1,#3
        STR      r3,[r2,#0xc]  ; diff
        STR      r1,[r2,#0x18]  ; ustep
        LSLS     r4,r0,#29
        BPL      |L10.108|
        ADDS     r3,r3,r1
        STR      r3,[r2,#0xc]  ; diff
|L10.108|
        LSLS     r3,r0,#30
        BPL      |L10.120|
        LDR      r4,[r2,#0xc]  ; diff
        LSRS     r3,r1,#1
        ADDS     r3,r3,r4
        STR      r3,[r2,#0xc]  ; diff
|L10.120|
        LDR      r4,|L10.400|
        LSLS     r3,r0,#31
        BEQ      |L10.134|
        LDR      r3,[r2,#0xc]  ; diff
        LSRS     r1,r1,#2
        ADDS     r1,r1,r3
        STR      r1,[r2,#0xc]  ; diff
|L10.134|
        LSLS     r1,r0,#28
        BPL      |L10.144|
        LDR      r1,[r2,#0xc]  ; diff
        RSBS     r1,r1,#0
        STR      r1,[r2,#0xc]  ; diff
|L10.144|
        LDR      r3,[r2,#0xc]  ; diff
        LDR      r1,[r2,#0x1c]  ; presamplex
        ADDS     r1,r1,r3
        LDR      r3,|L10.408|
        STR      r1,[r2,#0x10]  ; newsamplex
        CMP      r1,r3
        BLE      |L10.164|
        MOV      r1,r3
        STR      r1,[r2,#0x10]  ; newsamplex
        B        |L10.174|
|L10.164|
        LDR      r3,|L10.408|
        MVNS     r3,r3
        CMP      r1,r3
        BGE      |L10.174|
        STR      r3,[r2,#0x10]  ; newsamplex
|L10.174|
        LDR      r1,[r2,#0x10]  ; newsamplex
        LDR      r3,|L10.400|
        STR      r1,[sp,#0]
        ADDS     r3,r3,#0xb0
        STR      r1,[r2,#0x1c]  ; presamplex
        LDRB     r0,[r3,r0]
        ADD      r0,r0,lr
        SXTB     r0,r0
        STRB     r0,[r4,#9]
        CMP      r0,#0
        BGE      |L10.200|
        STRB     r7,[r4,#9]
        B        |L10.208|
|L10.200|
        CMP      r0,#0x58
        BLE      |L10.208|
        MOVS     r0,#0x58
        STRB     r0,[r4,#9]
|L10.208|
        LDR      r1,|L10.400|
        MOV      r0,r12
        LSRS     r0,r0,#4
        STRB     r0,[r1,#5]
        MOVS     r3,#0xa
        LDRSB    r3,[r1,r3]  ; newindex_y
        ADDS     r1,r1,#0xc0
        MOV      r12,r3
        LSLS     r3,r3,#1
        LDRH     r1,[r1,r3]
        LSRS     r3,r1,#3
        STR      r3,[r2,#0xc]  ; diff
        STR      r1,[r2,#0x18]  ; ustep
        LSLS     r4,r0,#29
        BPL      |L10.242|
        ADDS     r3,r3,r1
        STR      r3,[r2,#0xc]  ; diff
|L10.242|
        LSLS     r3,r0,#30
        BPL      |L10.254|
        LDR      r4,[r2,#0xc]  ; diff
        LSRS     r3,r1,#1
        ADDS     r3,r3,r4
        STR      r3,[r2,#0xc]  ; diff
|L10.254|
        LSLS     r3,r0,#31
        BEQ      |L10.266|
        LDR      r3,[r2,#0xc]  ; diff
        LSRS     r1,r1,#2
        ADDS     r1,r1,r3
        STR      r1,[r2,#0xc]  ; diff
|L10.266|
        LSLS     r1,r0,#28
        BPL      |L10.280|
        B        |L10.274|
|L10.272|
        B        |L10.364|
|L10.274|
        LDR      r1,[r2,#0xc]  ; diff
        RSBS     r1,r1,#0
        STR      r1,[r2,#0xc]  ; diff
|L10.280|
        LDR      r3,[r2,#0xc]  ; diff
        LDR      r1,[r2,#0x20]  ; presampley
        ADDS     r1,r1,r3
        LDR      r3,|L10.408|
        STR      r1,[r2,#0x14]  ; newsampley
        CMP      r1,r3
        BGT      |L10.300|
        MVNS     r3,r3
        CMP      r1,r3
        BGE      |L10.304|
|L10.300|
        STR      r3,[r2,#0x14]  ; newsampley
        B        |L10.306|
|L10.304|
        LDR      r3,[r2,#0x14]  ; newsampley
|L10.306|
        LDR      r4,|L10.400|
        STR      r3,[r2,#0x20]  ; presampley
        ADDS     r4,r4,#0xb0
        LDRB     r0,[r4,r0]
        LDR      r1,|L10.400|
        ADD      r0,r0,r12
        SXTB     r0,r0
        STRB     r0,[r1,#0xa]
        CMP      r0,#0
        BGE      |L10.330|
        STRB     r7,[r1,#0xa]
        B        |L10.338|
|L10.330|
        CMP      r0,#0x58
        BLE      |L10.338|
        MOVS     r0,#0x58
        STRB     r0,[r1,#0xa]
|L10.338|
        LDR      r0,[sp,#0]
        LSLS     r3,r3,#16
        LSLS     r0,r0,#16
        STR      r0,[r1,#0x7c]  ; L_delta
        STR      r3,[r2,#0]  ; R_delta
        STR      r0,[r6,#0]
        STR      r3,[r5,#0]
        STR      r3,[r2,#8]  ; R_delta_old
        STR      r0,[r2,#4]  ; L_delta_old
        LDR      r0,[r1,#0x28]  ; iDataCount
        ADDS     r0,r0,#1
        STR      r0,[r1,#0x28]  ; iDataCount
        POP      {r3-r7,pc}
|L10.364|
        LDR      r0,|L10.404|
        STR      r7,[r4,#0x28]  ; iDataCount
        LDR      r1,[r0,#8]
        LSRS     r1,r1,#1
        LSLS     r1,r1,#1
        STR      r1,[r0,#8]
        STR      r7,[r6,#0]
        STR      r7,[r5,#0]
        BL       I2S_CLR_RXFIFO
        BL       I2S_CLR_TXFIFO
        STRB     r7,[r4,#1]
        LDR      r1,|L10.416|
        STRB     r7,[r4,#0]
        LDR      r0,|L10.412|
        STR      r0,[r1,#0]  ; adcKeySubHook
        POP      {r3-r7,pc}
        ENDP

|L10.400|
        DCD      ||.data||
|L10.404|
        DCD      0x40034000
|L10.408|
        DCD      0x00007fff
|L10.412|
        DCD      playSFMusicEnd
|L10.416|
        DCD      adcKeySubHook

        AREA ||i.i2sStart||, CODE, READONLY, ALIGN=2

i2sStart PROC
        PUSH     {r4,lr}
        BL       I2S_CLR_RXFIFO
        LDR      r4,|L11.48|
        LDR      r0,[r4,#0]
        MOVS     r1,#4
        ORRS     r0,r0,r1
        STR      r0,[r4,#0]
        BL       I2S_CLR_TXFIFO
        LDR      r0,[r4,#0]
        MOVS     r1,#2
        ORRS     r0,r0,r1
        STR      r0,[r4,#0]
        MOVS     r0,#4
        BL       DrvI2S_EnableInt
        LDR      r0,|L11.52|
        LDR      r1,[r0,#0]
        LSLS     r1,r1,#8
        LSRS     r1,r1,#8
        STR      r1,[r0,#0]
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L11.48|
        DCD      0x401a0000
|L11.52|
        DCD      0xe000e418

        AREA ||i.init_spiflash_info||, CODE, READONLY, ALIGN=2

init_spiflash_info PROC
        PUSH     {r4,lr}
        LDR      r0,|L12.32|
        LDR      r1,|L12.28|
        STR      r1,[r0,#0]  ; sflash_info_cache
        MOVS     r1,#1
        STR      r1,[r0,#8]  ; sflash_info_cache
        LSLS     r1,r1,#8
        STR      r1,[r0,#0xc]  ; sflash_info_cache
        LDR      r1,|L12.36|
        LDR      r1,[r1,#0x34]  ; flash_program_address
        STR      r1,[r0,#0x10]  ; sflash_info_cache
        BL       spiflashInfoWrite
        POP      {r4,pc}
        ENDP

|L12.28|
        DCD      0x4e534c47
|L12.32|
        DCD      ||.bss||
|L12.36|
        DCD      ||.data||

        AREA ||i.playMusic||, CODE, READONLY, ALIGN=2

playMusic PROC
        PUSH     {r3-r7,lr}
        LDR      r5,|L13.144|
        MOV      r4,r0
        LDRB     r0,[r5,#1]  ; flash_mode
        MOVS     r6,#0
        CMP      r0,#1
        BNE      |L13.30|
        CMP      r4,#1
        BNE      |L13.142|
        STR      r6,[r5,#0x28]  ; iDataCount
        LDR      r0,|L13.148|
        STRB     r6,[r5,#1]
        LDR      r1,[r0,#8]
        BICS     r1,r1,r4
        STR      r1,[r0,#8]
|L13.30|
        LDR      r7,|L13.152|
        STR      r4,[r5,#0x30]  ; flash_music_index
        LDR      r0,[r7,#8]  ; sflash_info_cache
        CMP      r0,r4
        BLS      |L13.142|
        LDR      r1,|L13.156|
        MOVS     r0,#1
        STRB     r0,[r1,#0]
        BL       ampMute
        LDR      r0,|L13.160|
        LDRB     r0,[r0,#0]  ; dev_state
        CMP      r0,#0
        BEQ      |L13.82|
        LDR      r0,[r5,#0x68]  ; volume_back
        LDR      r1,|L13.164|
        LSLS     r0,r0,#24
        BMI      |L13.74|
        LDR      r0,[r1,#0]  ; amp_volume
        MOVS     r2,#0x80
        ORRS     r0,r0,r2
        STR      r0,[r5,#0x68]  ; volume_back
|L13.74|
        MOVS     r0,#0x14
        STR      r0,[r1,#0]  ; amp_volume
        BL       ampSetVolume
|L13.82|
        STRB     r6,[r5,#1]
        BL       DWHP83Mute
        MOVS     r0,#0x1e
        BL       sysDelayMs
        BL       adpcmDataInit
        LSLS     r0,r4,#2
        ADDS     r0,r0,r7
        LDR      r0,[r0,#0xc]
        ADR      r1,|L13.168|
        STR      r0,[r5,#0x1c]  ; read_address
        BL       uartdecode
        LDR      r0,[r5,#0x1c]  ; read_address
        BL       readWaveHeaderInfo
        LDR      r0,|L13.188|
        MOVS     r4,#1
        STR      r4,[r0,#0]  ; filter_bypass
        LDR      r0,|L13.192|
        STR      r6,[r0,#0]  ; adcKeySubHook
        BL       ampunMute
        MOVS     r0,#0x14
        BL       sysDelayMs
        STRB     r4,[r5,#1]
        STRB     r4,[r5,#0]
|L13.142|
        POP      {r3-r7,pc}
        ENDP

|L13.144|
        DCD      ||.data||
|L13.148|
        DCD      0x40130000
|L13.152|
        DCD      ||.bss||
|L13.156|
        DCD      soft_mute_flag
|L13.160|
        DCD      dev_state
|L13.164|
        DCD      amp_volume
|L13.168|
        DCB      "  read_address: ",0
        DCB      0
        DCB      0
        DCB      0
|L13.188|
        DCD      filter_bypass
|L13.192|
        DCD      adcKeySubHook

        AREA ||i.playSFMusicEnd||, CODE, READONLY, ALIGN=2

playSFMusicEnd PROC
        PUSH     {r4-r6,lr}
        BL       DWHP83UnMute
        MOVS     r0,#0xa
        BL       sysDelayMs
        LDR      r0,|L14.60|
        MOVS     r4,#0
        STR      r4,[r0,#0]  ; filter_bypass
        LDR      r0,|L14.64|
        LDR      r1,[r0,#8]
        LSRS     r1,r1,#1
        LSLS     r1,r1,#1
        STR      r1,[r0,#8]
        LDR      r0,|L14.68|
        LDR      r5,|L14.72|
        LDRB     r0,[r0,#0]  ; dev_state
        CMP      r0,#0
        BEQ      |L14.54|
        LDR      r0,[r5,#0x68]  ; volume_back
        MOVS     r1,#0x80
        BICS     r0,r0,r1
        LDR      r1,|L14.76|
        STR      r0,[r5,#0x68]  ; volume_back
        STR      r0,[r1,#0]  ; amp_volume
        BL       ampSetVolume
|L14.54|
        STRB     r4,[r5,#1]
        STRB     r4,[r5,#0]
        POP      {r4-r6,pc}
        ENDP

|L14.60|
        DCD      filter_bypass
|L14.64|
        DCD      0x40034000
|L14.68|
        DCD      dev_state
|L14.72|
        DCD      ||.data||
|L14.76|
        DCD      amp_volume

        AREA ||i.play_all_sound||, CODE, READONLY, ALIGN=1

play_all_sound PROC
        BX       lr
        ENDP


        AREA ||i.readWaveHeaderInfo||, CODE, READONLY, ALIGN=2

readWaveHeaderInfo PROC
        PUSH     {r0,r4-r7,lr}
        LDR      r4,|L16.232|
        LDR      r0,[r4,#8]
        LSRS     r0,r0,#1
        LSLS     r0,r0,#1
        STR      r0,[r4,#8]
        LDR      r0,[r4,#0]
        MOVS     r7,#1
        LSLS     r7,r7,#19
        BICS     r0,r0,r7
        STR      r0,[r4,#0]
        LDR      r0,[r4,#8]
        MOVS     r1,#1
        ORRS     r0,r0,r1
        STR      r0,[r4,#8]
        MOVS     r1,#8
        MOVS     r0,#3
        BL       spiSendWord
        MOVS     r1,#0x18
        LDR      r0,[sp,#0]
        BL       spiSendWord
        LDR      r0,[r4,#0]
        ORRS     r0,r0,r7
        STR      r0,[r4,#0]
        MOVS     r1,#0x20
        MOVS     r0,#0xff
        BL       spiSendWord
        LDR      r0,[r4,#0x10]
        LDR      r5,|L16.236|
        MOVS     r1,#0x10
        STR      r0,[r5,#0x20]  ; imusicdatalen
        STR      r0,[r5,#0x24]  ; idatasum
        MOVS     r0,#0xff
        BL       spiSendWord
        LDR      r0,[r4,#0x10]
        MOV      r6,r5
        SXTH     r0,r0
        STRH     r0,[r5,#0x14]
        ADDS     r6,r6,#0x80
        STR      r0,[r6,#0x1c]  ; presamplex
        MOVS     r1,#0x10
        MOVS     r0,#0xff
        BL       spiSendWord
        LDR      r0,[r4,#0x10]
        MOVS     r1,#8
        SXTH     r0,r0
        STRH     r0,[r5,#0x16]
        STR      r0,[r6,#0x20]  ; presampley
        MOVS     r0,#0xff
        BL       spiSendWord
        LDR      r0,[r4,#0x10]
        MOVS     r6,#0
        SXTB     r0,r0
        STRB     r0,[r5,#7]
        CMP      r0,#0
        BGE      |L16.126|
        STRB     r6,[r5,#7]
|L16.126|
        MOVS     r0,#7
        LDRSB    r0,[r5,r0]  ; index0_x
        CMP      r0,#0x58
        BLE      |L16.138|
        MOVS     r0,#0x58
        STRB     r0,[r5,#7]
|L16.138|
        LDRB     r0,[r5,#7]  ; index0_x
        STRB     r0,[r5,#9]
        MOVS     r1,#8
        MOVS     r0,#0xff
        BL       spiSendWord
        LDR      r0,[r4,#0x10]
        SXTB     r0,r0
        STRB     r0,[r5,#8]
        CMP      r0,#0
        BGE      |L16.162|
        STRB     r6,[r5,#8]
|L16.162|
        MOVS     r0,#8
        LDRSB    r0,[r5,r0]  ; index0_y
        CMP      r0,#0x58
        BLE      |L16.174|
        MOVS     r0,#0x58
        STRB     r0,[r5,#8]
|L16.174|
        LDRB     r0,[r5,#8]  ; index0_y
        STRB     r0,[r5,#0xa]
        LDR      r0,[sp,#0]
        ADDS     r0,r0,#0xc
        STR      r0,[r5,#0x2c]  ; inowaddress
        LDR      r0,[r4,#8]
        LSRS     r0,r0,#1
        LSLS     r0,r0,#1
        STR      r0,[r4,#8]
        LDR      r0,[r4,#0]
        BICS     r0,r0,r7
        STR      r0,[r4,#0]
        LDR      r0,[r4,#8]
        MOVS     r1,#1
        ORRS     r0,r0,r1
        STR      r0,[r4,#8]
        MOVS     r1,#8
        MOVS     r0,#3
        BL       spiSendWord
        MOVS     r1,#0x18
        LDR      r0,[r5,#0x2c]  ; inowaddress
        BL       spiSendWord
        LDR      r0,[r4,#0]
        ORRS     r0,r0,r7
        STR      r0,[r4,#0]
        POP      {r3-r7,pc}
        ENDP

        DCW      0x0000
|L16.232|
        DCD      0x40034000
|L16.236|
        DCD      ||.data||

        AREA ||i.recodeEnd||, CODE, READONLY, ALIGN=2

recodeEnd PROC
        PUSH     {r4,lr}
        BL       init_spiflash_info
        LDR      r0,|L17.28|
        LDR      r1,[r0,#8]
        LSRS     r1,r1,#1
        LSLS     r1,r1,#1
        STR      r1,[r0,#8]
        LDR      r1,|L17.32|
        MOVS     r0,#0
        STRB     r0,[r1,#1]
        LDR      r1,|L17.36|
        STR      r0,[r1,#0]  ; filter_bypass
        POP      {r4,pc}
        ENDP

|L17.28|
        DCD      0x40034000
|L17.32|
        DCD      ||.data||
|L17.36|
        DCD      filter_bypass

        AREA ||i.recodeMusic||, CODE, READONLY, ALIGN=2

recodeMusic PROC
        PUSH     {r3-r7,lr}
        LDR      r5,|L18.192|
        MOVS     r0,#0
        STRB     r0,[r5,#1]
        MOVS     r1,#0xff
        ADDS     r1,#1
        STR      r0,[r5,#0x40]  ; flash_recode_stop
        STR      r1,[r5,#0x34]  ; flash_program_address
        STR      r0,[r5,#0x3c]  ; flash_write_triggle
        BL       adpcmDataInit
        LDR      r4,|L18.196|
        LDR      r0,[r4,#8]
        LSRS     r0,r0,#1
        LSLS     r0,r0,#1
        STR      r0,[r4,#8]
        LDR      r0,[r4,#0]
        MOVS     r7,#1
        LSLS     r7,r7,#19
        BICS     r0,r0,r7
        STR      r0,[r4,#0]
        LDR      r0,[r4,#8]
        MOVS     r6,#1
        ORRS     r0,r0,r6
        STR      r0,[r4,#8]
        MOVS     r1,#8
        MOVS     r0,#6
        BL       spiSendWord
        LDR      r0,[r4,#8]
        BICS     r0,r0,r6
        STR      r0,[r4,#8]
        NOP      
        LDR      r0,[r4,#8]
        ORRS     r0,r0,r6
        STR      r0,[r4,#8]
        MOVS     r1,#8
        MOVS     r0,#0xc7
        BL       spiSendWord
        LDR      r0,[r4,#8]
        LSRS     r0,r0,#1
        LSLS     r0,r0,#1
        STR      r0,[r4,#8]
        STRB     r6,[r5,#2]
        MOVS     r0,#5
        BL       ledColorSet
        B        |L18.160|
|L18.98|
        MOVS     r0,#0xff
        ADDS     r0,r0,#0xf5
        BL       sysDelayMs
        MOVS     r0,#5
        BL       ledColorSet
        LDR      r0,[r4,#8]
        LSRS     r0,r0,#1
        LSLS     r0,r0,#1
        STR      r0,[r4,#8]
        LDR      r0,[r4,#0]
        BICS     r0,r0,r7
        STR      r0,[r4,#0]
        LDR      r0,[r4,#8]
        ORRS     r0,r0,r6
        STR      r0,[r4,#8]
        MOVS     r1,#8
        MOVS     r0,#5
        BL       spiSendWord
        MOVS     r1,#8
        MOVS     r0,#0xff
        BL       spiSendWord
        LDR      r0,[r4,#0x10]
        STRB     r0,[r5,#2]
        LDR      r0,[r4,#8]
        LSRS     r0,r0,#1
        LSLS     r0,r0,#1
        STR      r0,[r4,#8]
|L18.160|
        LDRB     r0,[r5,#2]  ; flash_status
        LSLS     r0,r0,#31
        BNE      |L18.98|
        MOVS     r0,#2
        BL       ledColorSet
        MOVS     r0,#0x7d
        LSLS     r0,r0,#3
        BL       sysDelayMs
        LDR      r0,|L18.200|
        STR      r6,[r0,#0]  ; filter_bypass
        MOVS     r0,#2
        STRB     r0,[r5,#1]
        POP      {r3-r7,pc}
        ENDP

        DCW      0x0000
|L18.192|
        DCD      ||.data||
|L18.196|
        DCD      0x40034000
|L18.200|
        DCD      filter_bypass

        AREA ||i.spiFlashInit||, CODE, READONLY, ALIGN=2

spiFlashInit PROC
        PUSH     {r4-r6,lr}
        MOVS     r0,#5
        LSLS     r0,r0,#28
        LDR      r1,[r0,#0x38]
        MOVS     r2,#0xff
        ADDS     r2,#1
        ORRS     r1,r1,r2
        STR      r1,[r0,#0x38]
        LDR      r1,[r0,#0x38]
        LSLS     r2,r2,#1
        ORRS     r1,r1,r2
        STR      r1,[r0,#0x38]
        LDR      r1,[r0,#0x38]
        LSLS     r2,r2,#2
        ORRS     r1,r1,r2
        STR      r1,[r0,#0x38]
        LDR      r1,[r0,#0x38]
        ASRS     r5,r2,#1
        ORRS     r1,r1,r5
        STR      r1,[r0,#0x38]
        LDR      r4,|L19.132|
        LDR      r0,[r4,#8]
        STR      r0,[r4,#8]
        LDR      r0,[r4,#8]
        MOVS     r6,#1
        ORRS     r0,r0,r6
        STR      r0,[r4,#8]
        MOVS     r3,#0x20
        ADDS     r2,r2,#4
        MOVS     r1,#0
        MOV      r0,r4
        BL       DrvSPI_Init
        LDR      r0,[r4,#0]
        BICS     r0,r0,r5
        STR      r0,[r4,#0]
        LDR      r0,[r4,#0]
        LSLS     r1,r5,#9
        BICS     r0,r0,r1
        STR      r0,[r4,#0]
        LDR      r0,[r4,#0x3c]
        LSLS     r0,r0,#1
        LSRS     r0,r0,#1
        STR      r0,[r4,#0x3c]
        LDR      r0,[r4,#4]
        LSRS     r0,r0,#8
        LSLS     r0,r0,#8
        ORRS     r0,r0,r6
        STR      r0,[r4,#4]
        LDR      r2,|L19.136|
        MOVS     r1,#0xd4
        MOVS     r0,#0
        BL       spiFlashRead
        LDR      r1,|L19.136|
        LDR      r3,|L19.140|
        LDR      r2,[r1,#0]  ; sflash_info_cache
        MOVS     r0,#0
        CMP      r2,r3
        BEQ      |L19.122|
        STR      r0,[r1,#8]  ; sflash_info_cache
|L19.122|
        LDR      r1,|L19.144|
        STR      r0,[r1,#0x68]  ; volume_back
        STRB     r0,[r1,#1]
        STR      r0,[r1,#0x28]  ; iDataCount
        POP      {r4-r6,pc}
        ENDP

|L19.132|
        DCD      0x40034000
|L19.136|
        DCD      ||.bss||
|L19.140|
        DCD      0x4e534c47
|L19.144|
        DCD      ||.data||

        AREA ||i.spiFlashPageWrite||, CODE, READONLY, ALIGN=2

spiFlashPageWrite PROC
        PUSH     {r0-r2,r4-r7,lr}
        MOVS     r5,#0
        MOV      r6,r1
        MOV      r7,r0
        CMP      r1,#0
        BEQ      |L20.26|
        LSLS     r0,r7,#24
        LSRS     r0,r0,#24
        BNE      |L20.26|
        MOVS     r0,#0xff
        ADDS     r0,#1
        CMP      r6,r0
        BLS      |L20.30|
|L20.26|
        MOVS     r0,#0
        POP      {r1-r7,pc}
|L20.30|
        LDR      r4,|L20.260|
        LDR      r0,[r4,#8]
        LSRS     r0,r0,#1
        LSLS     r0,r0,#1
        STR      r0,[r4,#8]
        LDR      r1,[r4,#0]
        MOVS     r0,#1
        LSLS     r0,r0,#19
        BICS     r1,r1,r0
        STR      r1,[r4,#0]
        LDR      r0,[r4,#8]
        MOVS     r1,#1
        ORRS     r0,r0,r1
        STR      r0,[r4,#8]
        MOVS     r1,#8
        MOVS     r0,#6
        BL       spiSendWord
        LDR      r0,[r4,#8]
        LSRS     r0,r0,#1
        LSLS     r0,r0,#1
        STR      r0,[r4,#8]
        NOP      
        LDR      r0,[r4,#8]
        MOVS     r1,#1
        ORRS     r0,r0,r1
        STR      r0,[r4,#8]
        MOVS     r1,#8
        MOVS     r0,#2
        BL       spiSendWord
        LSRS     r0,r7,#8
        LSLS     r0,r0,#8
        MOVS     r1,#0x18
        BL       spiSendWord
        B        |L20.116|
|L20.104|
        LDR      r0,[sp,#8]
        MOVS     r1,#8
        LDRB     r0,[r0,r5]
        BL       spiSendWord
        ADDS     r5,r5,#1
|L20.116|
        CMP      r5,r6
        BCC      |L20.104|
        LDR      r0,[r4,#8]
        LSRS     r0,r0,#1
        LSLS     r0,r0,#1
        STR      r0,[r4,#8]
        LDR      r0,[r4,#0]
        MOVS     r5,#1
        LSLS     r5,r5,#19
        BICS     r0,r0,r5
        STR      r0,[r4,#0]
        LDR      r0,[r4,#8]
        MOVS     r6,#1
        ORRS     r0,r0,r6
        STR      r0,[r4,#8]
        MOVS     r1,#8
        MOVS     r0,#4
        BL       spiSendWord
        LDR      r0,[r4,#8]
        BICS     r0,r0,r6
        STR      r0,[r4,#8]
        LDR      r0,[r4,#8]
        BICS     r0,r0,r6
        STR      r0,[r4,#8]
        LDR      r0,[r4,#0]
        BICS     r0,r0,r5
        STR      r0,[r4,#0]
        LDR      r0,[r4,#8]
        ORRS     r0,r0,r6
        STR      r0,[r4,#8]
        MOVS     r1,#8
        MOVS     r0,#5
        BL       spiSendWord
        MOVS     r1,#8
        MOVS     r0,#0xff
        BL       spiSendWord
        LDR      r0,[r4,#0x10]
        LDR      r7,|L20.264|
        B        |L20.238|
|L20.200|
        LDR      r0,[r4,#8]
        LSRS     r0,r0,#1
        LSLS     r0,r0,#1
        STR      r0,[r4,#8]
        LDR      r0,[r4,#0]
        BICS     r0,r0,r5
        STR      r0,[r4,#0]
        LDR      r0,[r4,#8]
        ORRS     r0,r0,r6
        STR      r0,[r4,#8]
        MOVS     r1,#8
        MOVS     r0,#5
        BL       spiSendWord
        MOVS     r1,#8
        MOVS     r0,#0xff
        BL       spiSendWord
        LDR      r0,[r4,#0x10]
|L20.238|
        STRB     r0,[r7,#2]
        LDR      r0,[r4,#8]
        LSRS     r0,r0,#1
        LSLS     r0,r0,#1
        STR      r0,[r4,#8]
        LDRB     r0,[r7,#2]  ; flash_status
        LSLS     r0,r0,#31
        BNE      |L20.200|
        MOVS     r0,#1
        POP      {r1-r7,pc}
        ENDP

        DCW      0x0000
|L20.260|
        DCD      0x40034000
|L20.264|
        DCD      ||.data||

        AREA ||i.spiFlashRead||, CODE, READONLY, ALIGN=2

spiFlashRead PROC
        PUSH     {r0-r2,r4-r7,lr}
        LDR      r5,|L21.92|
        MOV      r6,r2
        LDR      r0,[r5,#8]
        MOV      r7,r1
        MOVS     r4,#0
        LSRS     r0,r0,#1
        LSLS     r0,r0,#1
        STR      r0,[r5,#8]
        LDR      r1,[r5,#0]
        MOVS     r0,#1
        LSLS     r0,r0,#19
        BICS     r1,r1,r0
        STR      r1,[r5,#0]
        LDR      r0,[r5,#8]
        MOVS     r1,#1
        ORRS     r0,r0,r1
        STR      r0,[r5,#8]
        MOVS     r1,#8
        MOVS     r0,#3
        BL       spiSendWord
        MOVS     r1,#0x18
        LDR      r0,[sp,#0]
        BL       spiSendWord
        LDR      r0,[r5,#0]
        MOVS     r1,#1
        LSLS     r1,r1,#19
        ORRS     r0,r0,r1
        STR      r0,[r5,#0]
        B        |L21.78|
|L21.64|
        MOVS     r1,#8
        MOVS     r0,#0xff
        BL       spiSendWord
        LDR      r0,[r5,#0x10]
        STRB     r0,[r6,r4]
        ADDS     r4,r4,#1
|L21.78|
        CMP      r4,r7
        BCC      |L21.64|
        LDR      r0,[r5,#8]
        LSRS     r0,r0,#1
        LSLS     r0,r0,#1
        STR      r0,[r5,#8]
        POP      {r1-r7,pc}
        ENDP

|L21.92|
        DCD      0x40034000

        AREA ||i.spiSendWord||, CODE, READONLY, ALIGN=2

spiSendWord PROC
        PUSH     {r4-r6,lr}
        LDR      r4,|L22.32|
        MOV      r5,r0
        MOV      r0,r4
        BL       SPI_SET_TX_BIT_LEN
        STR      r5,[r4,#0x20]
        LDR      r0,[r4,#0]
        MOVS     r1,#1
        ORRS     r0,r0,r1
        STR      r0,[r4,#0]
|L22.22|
        LDR      r0,[r4,#0]
        LSLS     r0,r0,#31
        LSRS     r0,r0,#31
        BNE      |L22.22|
        POP      {r4-r6,pc}
        ENDP

|L22.32|
        DCD      0x40034000

        AREA ||i.spiflashInfoWrite||, CODE, READONLY, ALIGN=2

spiflashInfoWrite PROC
        PUSH     {r4,lr}
        LDR      r2,|L23.16|
        MOVS     r1,#0xd4
        MOVS     r0,#0
        BL       spiFlashPageWrite
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L23.16|
        DCD      ||.bss||

        AREA ||i.version_sound_play||, CODE, READONLY, ALIGN=1

version_sound_play PROC
        BX       lr
        ENDP


        AREA ||i.writeFlashRecodeData||, CODE, READONLY, ALIGN=2

writeFlashRecodeData PROC
        PUSH     {r4,lr}
        LDR      r4,|L25.88|
        LDR      r0,[r4,#0x40]  ; flash_recode_stop
        CMP      r0,#1
        BEQ      |L25.62|
        LDR      r0,[r4,#0x3c]  ; flash_write_triggle
        CMP      r0,#1
        BNE      |L25.60|
        MOVS     r0,#0
        STR      r0,[r4,#0x3c]  ; flash_write_triggle
        MOVS     r1,#0xff
        MOV      r0,r4
        LDR      r2,[r4,#0x38]  ; flash_data_buf_mux
        ADDS     r1,#1
        LDR      r0,[r0,#0x34]
        CMP      r2,#2
        BEQ      |L25.82|
        LDR      r2,|L25.92|
|L25.36|
        BL       spiFlashPageWrite
        LDR      r0,[r4,#0x34]  ; flash_program_address
        MOVS     r1,#1
        ADDS     r0,r0,#0xff
        ADDS     r0,#1
        LSLS     r1,r1,#20
        STR      r0,[r4,#0x34]  ; flash_program_address
        CMP      r0,r1
        BCC      |L25.60|
        MOVS     r0,#1
        STR      r0,[r4,#0x40]  ; flash_recode_stop
|L25.60|
        POP      {r4,pc}
|L25.62|
        MOVS     r0,#5
        BL       ledColorSet
        MOVS     r0,#0xff
        ADDS     r0,r0,#0xf5
        BL       sysDelayMs
        BL       recodeEnd
        POP      {r4,pc}
|L25.82|
        LDR      r2,|L25.96|
        B        |L25.36|
        ENDP

        DCW      0x0000
|L25.88|
        DCD      ||.data||
|L25.92|
        DCD      i2s_txbuf
|L25.96|
        DCD      i2s_rxbuf

        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.bss||, DATA, NOINIT, ALIGN=2

sflash_info_cache
        %        212
file_head
        %        48
cofe_set
        %        40

        AREA ||.data||, DATA, ALIGN=2

flg_playing
        DCB      0x00
flash_mode
        DCB      0x00
flash_status
        DCB      0x00
chuck_index
        DCB      0x00
codex
        DCB      0x00
codey
        DCB      0x00
utemp
        DCB      0x00
index0_x
        DCB      0x00
index0_y
        DCB      0x00
newindex_x
        DCB      0x00
newindex_y
        DCB      0x00,0x00
L_cofe0
        DCB      0x00,0x00
L_cofe1
        DCB      0x00,0x00
R_cofe0
        DCB      0x00,0x00
R_cofe1
        DCB      0x00,0x00
sample0x
        DCB      0x00,0x00
sample0y
        DCB      0x00,0x00
pre_freq
        DCD      0x00000000
read_address
        DCD      0x00000000
imusicdatalen
        DCD      0x00000000
idatasum
        DCD      0x00000000
iDataCount
        DCD      0x00000000
inowaddress
        DCD      0x00000000
flash_music_index
        DCD      0x00000000
flash_program_address
        DCD      0x00000000
flash_data_buf_mux
        DCD      0x00000001
flash_write_triggle
        DCD      0x00000000
flash_recode_stop
        DCD      0x00000000
recode_index
        DCD      0x00000000
pre_Rdata_encode
        DCD      0x00000000
pre_Ldata_encode
        DCD      0x00000000
pre_Rdata_decode
        DCD      0x00000000
pre_Ldata_decode
        DCD      0x00000000
adpcm_step_size_index_L_encode
        DCD      0x00000000
adpcm_step_size_index_R_encode
        DCD      0x00000000
adpcm_step_size_index_L_decode
        DCD      0x00000000
adpcm_step_size_index_R_decode
        DCD      0x00000000
volume_back
        DCD      0x00000000
L_delta
        DCD      0x00000000
R_delta
        DCD      0x00000000
L_sample1
        DCD      0x00000000
R_sample1
        DCD      0x00000000
|symbol_number.102|
        DCD      0x00000000
|symbol_number.103|
        DCD      0x00000000
L_delta_old
        DCD      0x00000000
R_delta_old
        DCD      0x00000000
diff
        DCD      0x00000000
newsamplex
        DCD      0x00000000
newsampley
        DCD      0x00000000
ustep
        DCD      0x00000000
presamplex
        DCD      0x00000000
presampley
        DCD      0x00000000
block_sample_index
        DCD      0x00000000
samples_per_block
        DCD      0x00000000
data_block_size
        DCD      0x00000000
index_adjust
        DCB      0xff,0xff,0xff,0xff
        DCB      0x02,0x04,0x06,0x08
        DCB      0xff,0xff,0xff,0xff
        DCB      0x02,0x04,0x06,0x08
steptab
        DCW      0x0007,0x0008
        DCW      0x0009,0x000a
        DCW      0x000b,0x000c
        DCW      0x000d,0x000e
        DCW      0x0010,0x0011
        DCW      0x0013,0x0015
        DCW      0x0017,0x0019
        DCW      0x001c,0x001f
        DCW      0x0022,0x0025
        DCW      0x0029,0x002d
        DCW      0x0032,0x0037
        DCW      0x003c,0x0042
        DCW      0x0049,0x0050
        DCW      0x0058,0x0061
        DCW      0x006b,0x0076
        DCW      0x0082,0x008f
        DCW      0x009d,0x00ad
        DCW      0x00be,0x00d1
        DCW      0x00e6,0x00fd
        DCW      0x0117,0x0133
        DCW      0x0151,0x0173
        DCW      0x0198,0x01c1
        DCW      0x01ee,0x0220
        DCW      0x0256,0x0292
        DCW      0x02d4,0x031c
        DCW      0x036c,0x03c3
        DCW      0x0424,0x048e
        DCW      0x0502,0x0583
        DCW      0x0610,0x06ab
        DCW      0x0756,0x0812
        DCW      0x08e0,0x09c3
        DCW      0x0abd,0x0bd0
        DCW      0x0cff,0x0e4c
        DCW      0x0fba,0x114c
        DCW      0x1307,0x14ee
        DCW      0x1706,0x1954
        DCW      0x1bdc,0x1ea5
        DCW      0x21b6,0x2515
        DCW      0x28ca,0x2cdf
        DCW      0x315b,0x364b
        DCW      0x3bb9,0x41b2
        DCW      0x4844,0x4f7e
        DCW      0x5771,0x602f
        DCW      0x69ce,0x7462
        DCW      0x7fff
        DCB      0x00,0x00
AdaptationTable
        DCD      0x000000e6
        DCD      0x000000e6
        DCD      0x000000e6
        DCD      0x000000e6
        DCD      0x00000133
        DCD      0x00000199
        DCD      0x00000200
        DCD      0x00000266
        DCD      0x00000300
        DCD      0x00000266
        DCD      0x00000200
        DCD      0x00000199
        DCD      0x00000133
        DCD      0x000000e6
        DCD      0x000000e6
        DCD      0x000000e6

        AREA ||area_number.30||, DATA, ALIGN=0

        EXPORTAS ||area_number.30||, ||.data||
MUSIC_FLASH_SIZE
        DCB      0x2b

        AREA ||area_number.31||, DATA, ALIGN=2

        EXPORTAS ||area_number.31||, ||.data||
music_size
        DCD      0x00000000

        AREA ||area_number.32||, DATA, ALIGN=2

        EXPORTAS ||area_number.32||, ||.data||
audio_detect_L
        DCD      0x00000000

        AREA ||area_number.33||, DATA, ALIGN=2

        EXPORTAS ||area_number.33||, ||.data||
audio_detect_R
        DCD      0x00000000

        AREA ||area_number.34||, DATA, ALIGN=0

        EXPORTAS ||area_number.34||, ||.data||
play_music_flag
        DCB      0x00

        AREA ||area_number.35||, DATA, ALIGN=2

        EXPORTAS ||area_number.35||, ||.data||
BT_VERSION_NUMBER
        DCB      0x30,0x2e,0x30,0x30

        AREA ||area_number.36||, DATA, ALIGN=2

        EXPORTAS ||area_number.36||, ||.data||
MCU_VERSION_NUMBER
        DCB      0x36,0x2e,0x36,0x38

        AREA ||area_number.37||, DATA, ALIGN=2

        EXPORTAS ||area_number.37||, ||.data||
WL_VERSION_NUMBER
        DCB      0x30,0x2e,0x30,0x30

        AREA ||area_number.38||, DATA, ALIGN=2

        EXPORTAS ||area_number.38||, ||.data||
FLASH_VERSION_NUMBER
        DCB      0x31,0x2e,0x31,0x32

        AREA ||area_number.39||, DATA, ALIGN=2

        EXPORTAS ||area_number.39||, ||.data||
BT_name_block
        DCB      0x41,0x54,0x2b,0x53
        DCB      0x55,0x46,0x46,0x49
        DCB      0x58,0x3d,0x22,0x4c
        DCB      0x49,0x56,0x49,0x4e
        DCB      0x47,0x20,0x52,0x4f
        DCB      0x4f,0x4d,0x22,0x00
        DCD      0x00000000
        DCB      0x00,0x00,0x41,0x54
        DCB      0x2b,0x53,0x55,0x46
        DCB      0x46,0x49,0x58,0x3d
        DCB      0x22,0x4b,0x49,0x54
        DCB      0x43,0x48,0x45,0x4e
        DCB      0x22,0x00,0x00,0x00
        %        8
        DCB      0x41,0x54,0x2b,0x53
        DCB      0x55,0x46,0x46,0x49
        DCB      0x58,0x3d,0x22,0x44
        DCB      0x49,0x4e,0x49,0x4e
        DCB      0x47,0x20,0x52,0x4f
        DCB      0x4f,0x4d,0x22,0x00
        DCD      0x00000000
        DCB      0x00,0x00,0x41,0x54
        DCB      0x2b,0x53,0x55,0x46
        DCB      0x46,0x49,0x58,0x3d
        DCB      0x22,0x50,0x41,0x52
        DCB      0x54,0x59,0x20,0x52
        DCB      0x4f,0x4f,0x4d,0x22
        DCB      0x00,0x00,0x00,0x00
        DCD      0x00000000
        DCB      0x41,0x54,0x2b,0x53
        DCB      0x55,0x46,0x46,0x49
        DCB      0x58,0x3d,0x22,0x42
        DCB      0x45,0x44,0x52,0x4f
        DCB      0x4f,0x4d,0x20,0x31
        DCB      0x22,0x00,0x00,0x00
        DCD      0x00000000
        DCB      0x00,0x00,0x41,0x54
        DCB      0x2b,0x53,0x55,0x46
        DCB      0x46,0x49,0x58,0x3d
        DCB      0x22,0x42,0x45,0x44
        DCB      0x52,0x4f,0x4f,0x4d
        DCB      0x20,0x32,0x22,0x00
        %        8
        DCB      0x41,0x54,0x2b,0x53
        DCB      0x55,0x46,0x46,0x49
        DCB      0x58,0x3d,0x22,0x50
        DCB      0x41,0x54,0x49,0x4f
        DCB      0x22,0x00,0x00,0x00
        %        8
        DCB      0x00,0x00,0x41,0x54
        DCB      0x2b,0x53,0x55,0x46
        DCB      0x46,0x49,0x58,0x3d
        DCB      0x22,0x4f,0x46,0x46
        DCB      0x49,0x43,0x45,0x22
        DCB      0x00,0x00,0x00,0x00
        %        8
        DCB      0x41,0x54,0x2b,0x53
        DCB      0x55,0x46,0x46,0x49
        DCB      0x58,0x3d,0x22,0x53
        DCB      0x41,0x4c,0x4f,0x4e
        DCB      0x22,0x00,0x00,0x00
        %        8
        DCB      0x00,0x00,0x41,0x54
        DCB      0x2b,0x53,0x55,0x46
        DCB      0x46,0x49,0x58,0x3d
        DCB      0x22,0x43,0x55,0x49
        DCB      0x53,0x49,0x4e,0x45
        DCB      0x22,0x00,0x00,0x00
        %        8
        DCB      0x41,0x54,0x2b,0x53
        DCB      0x55,0x46,0x46,0x49
        DCB      0x58,0x3d,0x22,0x53
        DCB      0x41,0x4c,0x4c,0x45
        DCB      0x20,0x41,0x20,0x4d
        DCB      0x41,0x4e,0x47,0x45
        DCB      0x52,0x22,0x00,0x00
        DCB      0x00,0x00,0x41,0x54
        DCB      0x2b,0x53,0x55,0x46
        DCB      0x46,0x49,0x58,0x3d
        DCB      0x22,0x53,0x41,0x4c
        DCB      0x4c,0x45,0x20,0x44
        DCB      0x45,0x20,0x4a,0x45
        DCB      0x55,0x58,0x22,0x00
        DCD      0x00000000
        DCB      0x41,0x54,0x2b,0x53
        DCB      0x55,0x46,0x46,0x49
        DCB      0x58,0x3d,0x22,0x43
        DCB      0x48,0x41,0x4d,0x42
        DCB      0x52,0x45,0x20,0x31
        DCB      0x22,0x00,0x00,0x00
        DCD      0x00000000
        DCB      0x00,0x00,0x41,0x54
        DCB      0x2b,0x53,0x55,0x46
        DCB      0x46,0x49,0x58,0x3d
        DCB      0x22,0x43,0x48,0x41
        DCB      0x4d,0x42,0x52,0x45
        DCB      0x20,0x32,0x22,0x00
        %        8
        DCB      0x41,0x54,0x2b,0x53
        DCB      0x55,0x46,0x46,0x49
        DCB      0x58,0x3d,0x22,0x50
        DCB      0x41,0x54,0x49,0x4f
        DCB      0x22,0x00,0x00,0x00
        %        8
        DCB      0x00,0x00,0x41,0x54
        DCB      0x2b,0x53,0x55,0x46
        DCB      0x46,0x49,0x58,0x3d
        DCB      0x22,0x42,0x55,0x52
        DCB      0x45,0x41,0x55,0x22
        DCB      0x00,0x00,0x00,0x00
        %        8
        DCB      0x41,0x54,0x2b,0x53
        DCB      0x55,0x46,0x46,0x49
        DCB      0x58,0x3d,0x22,0x57
        DCB      0x4f,0x48,0x4e,0x5a
        DCB      0x49,0x4d,0x4d,0x45
        DCB      0x52,0x22,0x00,0x00
        DCD      0x00000000
        DCB      0x00,0x00,0x41,0x54
        DCB      0x2b,0x53,0x55,0x46
        DCB      0x46,0x49,0x58,0x3d
        DCB      0x22,0x4b,0x55,0x45
        DCB      0x43,0x48,0x45,0x22
        DCB      0x00,0x00,0x00,0x00
        %        8
        DCB      0x41,0x54,0x2b,0x53
        DCB      0x55,0x46,0x46,0x49
        DCB      0x58,0x3d,0x22,0x45
        DCB      0x53,0x53,0x5a,0x49
        DCB      0x4d,0x4d,0x45,0x52
        DCB      0x22,0x00,0x00,0x00
        DCD      0x00000000
        DCB      0x00,0x00,0x41,0x54
        DCB      0x2b,0x53,0x55,0x46
        DCB      0x46,0x49,0x58,0x3d
        DCB      0x22,0x50,0x41,0x52
        DCB      0x54,0x59,0x52,0x41
        DCB      0x55,0x4d,0x22,0x00
        %        8
        DCB      0x41,0x54,0x2b,0x53
        DCB      0x55,0x46,0x46,0x49
        DCB      0x58,0x3d,0x22,0x53
        DCB      0x43,0x48,0x4c,0x41
        DCB      0x46,0x5a,0x49,0x4d
        DCB      0x4d,0x45,0x52,0x20
        DCB      0x31,0x22,0x00,0x00
        DCB      0x00,0x00,0x41,0x54
        DCB      0x2b,0x53,0x55,0x46
        DCB      0x46,0x49,0x58,0x3d
        DCB      0x22,0x53,0x43,0x48
        DCB      0x4c,0x41,0x46,0x5a
        DCB      0x49,0x4d,0x4d,0x45
        DCB      0x52,0x20,0x32,0x22
        DCB      0x00,0x00,0x00,0x00
        DCB      0x41,0x54,0x2b,0x53
        DCB      0x55,0x46,0x46,0x49
        DCB      0x58,0x3d,0x22,0x54
        DCB      0x45,0x52,0x52,0x41
        DCB      0x53,0x53,0x45,0x22
        DCB      0x00,0x00,0x00,0x00
        DCD      0x00000000
        DCB      0x00,0x00,0x41,0x54
        DCB      0x2b,0x53,0x55,0x46
        DCB      0x46,0x49,0x58,0x3d
        DCB      0x22,0x42,0x55,0x45
        DCB      0x52,0x4f,0x22,0x00
        %        12
        DCB      0x41,0x54,0x2b,0x53
        DCB      0x55,0x46,0x46,0x49
        DCB      0x58,0x3d,0x22,0x20
        DCB      0x22,0x00,0x00,0x00
        %        12
        DCB      0x00,0x00

        EXPORT I2SClkInit [CODE]
        EXPORT SPI1_IRQHandler [CODE]
        EXPORT adpcmDataInit [CODE]
        EXPORT adpcmDecode [CODE]
        EXPORT adpcmEncode [CODE]
        EXPORT dealFlashEvent [CODE]
        EXPORT i2sStart [CODE]
        EXPORT init_spiflash_info [CODE]
        EXPORT playMusic [CODE]
        EXPORT playSFMusicEnd [CODE]
        EXPORT play_all_sound [CODE]
        EXPORT readWaveHeaderInfo [CODE]
        EXPORT recodeEnd [CODE]
        EXPORT recodeMusic [CODE]
        EXPORT spiFlashInit [CODE]
        EXPORT spiFlashPageWrite [CODE]
        EXPORT spiFlashRead [CODE]
        EXPORT spiflashInfoWrite [CODE]
        EXPORT version_sound_play [CODE]
        EXPORT writeFlashRecodeData [CODE]
        EXPORT sflash_info_cache [DATA,SIZE=212]
        EXPORT flg_playing [DATA,SIZE=1]
        EXPORT flash_mode [DATA,SIZE=1]
        EXPORT flash_status [DATA,SIZE=1]
        EXPORT chuck_index [DATA,SIZE=1]
        EXPORT codex [DATA,SIZE=1]
        EXPORT codey [DATA,SIZE=1]
        EXPORT utemp [DATA,SIZE=1]
        EXPORT index0_x [DATA,SIZE=1]
        EXPORT index0_y [DATA,SIZE=1]
        EXPORT newindex_x [DATA,SIZE=1]
        EXPORT newindex_y [DATA,SIZE=1]
        EXPORT sample0x [DATA,SIZE=2]
        EXPORT sample0y [DATA,SIZE=2]
        EXPORT read_address [DATA,SIZE=4]
        EXPORT imusicdatalen [DATA,SIZE=4]
        EXPORT idatasum [DATA,SIZE=4]
        EXPORT iDataCount [DATA,SIZE=4]
        EXPORT inowaddress [DATA,SIZE=4]
        EXPORT flash_music_index [DATA,SIZE=4]
        EXPORT flash_program_address [DATA,SIZE=4]
        EXPORT flash_data_buf_mux [DATA,SIZE=4]
        EXPORT flash_write_triggle [DATA,SIZE=4]
        EXPORT flash_recode_stop [DATA,SIZE=4]
        EXPORT recode_index [DATA,SIZE=4]
        EXPORT pre_Rdata_encode [DATA,SIZE=4]
        EXPORT pre_Ldata_encode [DATA,SIZE=4]
        EXPORT volume_back [DATA,SIZE=4]
        EXPORT diff [DATA,SIZE=4]
        EXPORT newsamplex [DATA,SIZE=4]
        EXPORT newsampley [DATA,SIZE=4]
        EXPORT ustep [DATA,SIZE=4]
        EXPORT presamplex [DATA,SIZE=4]
        EXPORT presampley [DATA,SIZE=4]
        EXPORT AdaptationTable [DATA,SIZE=64]
        EXPORT MUSIC_FLASH_SIZE [DATA,SIZE=1]
        EXPORT music_size [DATA,SIZE=4]
        EXPORT audio_detect_L [DATA,SIZE=4]
        EXPORT audio_detect_R [DATA,SIZE=4]
        EXPORT play_music_flag [DATA,SIZE=1]
        EXPORT BT_VERSION_NUMBER [DATA,SIZE=4]
        EXPORT MCU_VERSION_NUMBER [DATA,SIZE=4]
        EXPORT WL_VERSION_NUMBER [DATA,SIZE=4]
        EXPORT FLASH_VERSION_NUMBER [DATA,SIZE=4]
        EXPORT BT_name_block [DATA,SIZE=750]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT __aeabi_uidivmod [CODE]
        IMPORT DrvI2S_EnableInt [CODE]
        IMPORT DrvSPI_Init [CODE]
        IMPORT ampMute [CODE]
        IMPORT ampSetVolume [CODE]
        IMPORT DWHP83Mute [CODE]
        IMPORT sysDelayMs [CODE]
        IMPORT uartdecode [CODE]
        IMPORT ampunMute [CODE]
        IMPORT soft_mute_flag [DATA]
        IMPORT dev_state [DATA]
        IMPORT amp_volume [DATA]
        IMPORT filter_bypass [DATA]
        IMPORT adcKeySubHook [DATA]
        IMPORT ledColorSet [CODE]
        IMPORT DWHP83UnMute [CODE]
        IMPORT i2s_rxbuf [DATA]
        IMPORT i2s_txbuf [DATA]

        KEEP I2S_CLR_RXFIFO
        KEEP I2S_CLR_TXFIFO
        KEEP I2S_SET_MCK_DIV
        KEEP SPI_SET_TX_BIT_LEN
        KEEP spiSendWord
        KEEP file_head
        KEEP cofe_set
        KEEP L_cofe0
        KEEP L_cofe1
        KEEP R_cofe0
        KEEP R_cofe1
        KEEP pre_freq
        KEEP pre_Rdata_decode
        KEEP pre_Ldata_decode
        KEEP adpcm_step_size_index_L_encode
        KEEP adpcm_step_size_index_R_encode
        KEEP adpcm_step_size_index_L_decode
        KEEP adpcm_step_size_index_R_decode
        KEEP L_delta
        KEEP R_delta
        KEEP L_sample1
        KEEP R_sample1
        KEEP |symbol_number.102|
        EXPORTAS |symbol_number.102|, L_delta
        KEEP |symbol_number.103|
        EXPORTAS |symbol_number.103|, R_delta
        KEEP L_delta_old
        KEEP R_delta_old
        KEEP block_sample_index
        KEEP samples_per_block
        KEEP data_block_size
        KEEP index_adjust
        KEEP steptab

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,3
        ATTR SETSTRING Tag_conformance,"2.06"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
