; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--min_array_alignment=4 --split_sections --debug -c --asm --info=totals -o.\output\uart.o --depend=.\output\uart.d --cpu=Cortex-M0 --apcs=interwork -I..\CMSIS\CM0\DeviceSupport\Nuvoton\NUC123Series -I..\CMSIS\CM0\CoreSupport -I..\INC\DrvInc -I..\INC\SysInc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -D__MICROLIB --omf_browse=.\output\uart.crf ..\AppSrc\uart.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||i.UART1_IRQHandler||, CODE, READONLY, ALIGN=2

UART1_IRQHandler PROC
        PUSH     {r4-r7,lr}
        LDR      r0,|L1.268|
        LDR      r1,[r0,#0x1c]
        LDR      r3,|L1.272|
        ASRS     r2,r0,#22
        LDR      r4,[r3,#4]
        ANDS     r1,r1,r2
        SUBS     r2,r4,#1
        MOV      r12,r2
        LDR      r7,|L1.276|
        LDR      r5,[r3,#0x1c]
        LDR      r2,[r3,#0x18]
        CMP      r1,#0
        BNE      |L1.182|
        LDR      r1,[r0,#0x1c]
        MOVS     r6,#1
        LSLS     r6,r6,#12
        TST      r1,r6
        BNE      |L1.182|
        B        |L1.196|
|L1.40|
        LDR      r0,[r6,#0]
        UXTB     r0,r0
        CMP      r0,#8
        BEQ      |L1.78|
        LDR      r1,[r3,#0x14]  ; lastkey
        MOV      r6,r0
        LSLS     r1,r1,#8
        ORRS     r1,r1,r0
        SUBS     r6,r6,#0x20
        STR      r1,[r3,#0x14]  ; lastkey
        CMP      r6,#0x5e
        BLS      |L1.72|
        CMP      r0,#0xa
        BEQ      |L1.72|
        CMP      r0,#0xd
        BNE      |L1.90|
|L1.72|
        CMP      r0,#0x5b
        BEQ      |L1.112|
        B        |L1.120|
|L1.78|
        CMP      r2,#0
        BEQ      |L1.90|
        CMP      r5,#0
        BEQ      |L1.92|
        SUBS     r5,r5,#1
        STR      r5,[r3,#0x1c]  ; vc
|L1.90|
        POP      {r4-r7,pc}
|L1.92|
        SUBS     r2,r2,#1
        STR      r2,[r3,#0x18]  ; column
        LDR      r0,[r3,#0]  ; in_index
        SUBS     r0,r0,#1
        STR      r0,[r3,#0]  ; in_index
        CMP      r4,r0
        BCC      |L1.90|
|L1.106|
        MOV      r0,r12
        STR      r0,[r3,#4]  ; out_index
|L1.110|
        POP      {r4-r7,pc}
|L1.112|
        LSLS     r6,r1,#16
        LSRS     r6,r6,#24
        CMP      r6,#0x1b
        BEQ      |L1.110|
|L1.120|
        LSLS     r1,r1,#8
        LDR      r6,|L1.280|
        LSRS     r1,r1,#16
        CMP      r1,r6
        BNE      |L1.138|
        MOV      r1,r0
        SUBS     r1,r1,#0x41
        CMP      r1,#3
        BLS      |L1.110|
|L1.138|
        ADDS     r6,r4,#7
        LDR      r1,[r3,#0]  ; in_index
        ADDS     r6,r6,#0xf9
        CMP      r1,r6
        BHI      |L1.152|
        CMP      r2,#0xff
        BLS      |L1.174|
|L1.152|
        ADDS     r5,r5,#1
        STR      r5,[r3,#0x1c]  ; vc
        CMP      r0,#0xd
        BNE      |L1.110|
        MOVS     r1,#0
        STR      r1,[r3,#0x1c]  ; vc
        LDRB     r1,[r3,#0]  ; in_index
        SUBS     r1,r1,#1
        UXTB     r1,r1
        STRB     r0,[r7,r1]
        B        |L1.106|
|L1.174|
        UXTB     r6,r1
        STRB     r0,[r7,r6]
        ADDS     r1,r1,#1
        STR      r1,[r3,#0]  ; in_index
|L1.182|
        LDR      r6,|L1.268|
        LDR      r0,[r6,#0x18]
        MOVS     r1,#1
        LSLS     r1,r1,#14
        TST      r0,r1
        BEQ      |L1.40|
|L1.194|
        POP      {r4-r7,pc}
|L1.196|
        LDR      r1,[r0,#0x1c]
        MOVS     r2,#1
        LSLS     r2,r2,#9
        TST      r1,r2
        LDR      r2,|L1.272|
        LDR      r2,[r2,#8]
        BEQ      |L1.194|
        LDR      r5,|L1.284|
        MOVS     r6,#1
        LDR      r1,[r3,#0xc]  ; utx_out
        LSLS     r6,r6,#23
|L1.218|
        CMP      r1,r2
        BCS      |L1.228|
        LDR      r4,[r0,#0x18]
        TST      r4,r6
        BEQ      |L1.252|
|L1.228|
        CMP      r1,r2
        BNE      |L1.194|
        LDR      r4,[r0,#4]
        MOVS     r1,#2
        BICS     r4,r4,r1
        STR      r4,[r0,#4]
        MOVS     r0,#1
        STR      r0,[r3,#0x10]  ; txidle
        UXTB     r0,r2
        STR      r0,[r3,#8]  ; utx_in
        STR      r0,[r3,#0xc]  ; utx_out
        POP      {r4-r7,pc}
|L1.252|
        LSLS     r4,r1,#23
        LSRS     r4,r4,#23
        LDRB     r4,[r5,r4]
        STR      r4,[r0,#0]
        ADDS     r1,r1,#1
        STR      r1,[r3,#0xc]  ; utx_out
        B        |L1.218|
        ENDP

        DCW      0x0000
|L1.268|
        DCD      0x40150000
|L1.272|
        DCD      ||.data||
|L1.276|
        DCD      ||.bss||
|L1.280|
        DCD      0x00001b5b
|L1.284|
        DCD      ||.bss||+0x100

        AREA ||i.clr||, CODE, READONLY, ALIGN=1

||clr|| PROC
        MOVS     r0,#0
|L2.2|
        ADDS     r0,r0,#1
        CMP      r0,#0x50
        BCC      |L2.2|
        BX       lr
        ENDP


        AREA ||i.dps||, CODE, READONLY, ALIGN=2

||dps|| PROC
        LDR      r1,|L3.8|
        MOVS     r0,#0
        STR      r0,[r1,#0x18]  ; column
        BX       lr
        ENDP

|L3.8|
        DCD      ||.data||

        AREA ||i.igetc||, CODE, READONLY, ALIGN=2

igetc PROC
        LDR      r2,|L4.16|
        LDR      r3,|L4.20|
        LDR      r1,[r2,#4]  ; out_index
        UXTB     r0,r1
        LDRB     r0,[r3,r0]
        ADDS     r1,r1,#1
        STR      r1,[r2,#4]  ; out_index
        BX       lr
        ENDP

|L4.16|
        DCD      ||.data||
|L4.20|
        DCD      ||.bss||

        AREA ||i.iputc||, CODE, READONLY, ALIGN=1

iputc PROC
        BX       lr
        ENDP


        AREA ||i.iputchar||, CODE, READONLY, ALIGN=2

iputchar PROC
        PUSH     {r4,lr}
        LDR      r2,|L6.40|
        LDR      r4,|L6.44|
        LDR      r1,[r2,#8]  ; utx_in
        LSLS     r3,r1,#23
        LSRS     r3,r3,#23
        STRB     r0,[r4,r3]
        ADDS     r1,r1,#1
        STR      r1,[r2,#8]  ; utx_in
        LDR      r0,[r2,#0x10]  ; txidle
        CMP      r0,#1
        BNE      |L6.38|
        MOVS     r0,#0
        STR      r0,[r2,#0x10]  ; txidle
        LDR      r2,|L6.48|
        MOVS     r0,#2
        LDR      r1,[r2,#4]
        ORRS     r1,r1,r0
        STR      r1,[r2,#4]
|L6.38|
        POP      {r4,pc}
        ENDP

|L6.40|
        DCD      ||.data||
|L6.44|
        DCD      ||.bss||+0x100
|L6.48|
        DCD      0x40050000

        AREA ||i.iputs||, CODE, READONLY, ALIGN=1

iputs PROC
        BX       lr
        ENDP


        AREA ||i.itoa||, CODE, READONLY, ALIGN=1

itoa PROC
        PUSH     {r4-r6,lr}
        MOV      r5,r1
        MOVS     r4,#0
        B        |L8.20|
|L8.8|
        MOVS     r1,#0xa
        BL       __aeabi_uidivmod
        ADDS     r1,r1,#0x30
        STRB     r1,[r5,r4]
        ADDS     r4,r4,#1
|L8.20|
        CMP      r0,#0
        BNE      |L8.8|
        CMP      r4,#0
        BNE      |L8.34|
        MOVS     r4,#1
        MOVS     r1,#0x30
        STRB     r1,[r5,#0]
|L8.34|
        MOVS     r1,#0
        STRB     r1,[r5,r4]
        MOV      r2,r4
        B        |L8.54|
|L8.42|
        SUBS     r4,r4,#1
        LDRB     r1,[r5,r0]
        LDRB     r3,[r5,r4]
        STRB     r3,[r5,r0]
        ADDS     r0,r0,#1
        STRB     r1,[r5,r4]
|L8.54|
        CMP      r0,r4
        BCC      |L8.42|
        MOV      r0,r2
        POP      {r4-r6,pc}
        ENDP


        AREA ||i.itoh||, CODE, READONLY, ALIGN=2

itoh PROC
        MOV      r2,r0
        MOV      r0,r1
        LDR      r3,|L9.28|
        LSRS     r1,r2,#4
        LDRB     r1,[r3,r1]
        STRB     r1,[r0,#0]
        LSLS     r1,r2,#28
        LSRS     r1,r1,#28
        LDRB     r1,[r3,r1]
        STRB     r1,[r0,#1]
        MOVS     r1,#0
        STRB     r1,[r0,#2]
        BX       lr
        ENDP

        DCW      0x0000
|L9.28|
        DCD      ||.constdata||

        AREA ||i.iungetc||, CODE, READONLY, ALIGN=1

iungetc PROC
        BX       lr
        ENDP


        AREA ||i.sendBack||, CODE, READONLY, ALIGN=1

sendBack PROC
        BX       lr
        ENDP


        AREA ||i.sendDevInfo||, CODE, READONLY, ALIGN=1

sendDevInfo PROC
        BX       lr
        ENDP


        AREA ||i.sendInfo||, CODE, READONLY, ALIGN=1

sendInfo PROC
        PUSH     {lr}
        BL       ||dps||
        POP      {pc}
        ENDP


        AREA ||i.sendStartInfo||, CODE, READONLY, ALIGN=1

sendStartInfo PROC
        PUSH     {lr}
        BL       ||clr||
        BL       sendDevInfo
        BL       ||dps||
        POP      {pc}
        ENDP


        AREA ||i.smscSendCmd||, CODE, READONLY, ALIGN=1

smscSendCmd PROC
        BX       lr
        ENDP


        AREA ||i.strcmp||, CODE, READONLY, ALIGN=1

strcmp PROC
        PUSH     {r4,lr}
        MOVS     r2,#0
        B        |L16.18|
|L16.6|
        LDRB     r4,[r1,r2]
        CMP      r3,r4
        BEQ      |L16.16|
        MOVS     r0,#0
        POP      {r4,pc}
|L16.16|
        ADDS     r2,r2,#1
|L16.18|
        LDRB     r3,[r0,r2]
        CMP      r3,#0
        BNE      |L16.6|
        LDRB     r4,[r1,r2]
        CMP      r4,#0
        BNE      |L16.6|
        MOVS     r0,#1
        POP      {r4,pc}
        ENDP


        AREA ||i.strncmp||, CODE, READONLY, ALIGN=1

strncmp PROC
        PUSH     {r4,lr}
        B        |L17.16|
|L17.4|
        LDRB     r3,[r0,r2]
        LDRB     r4,[r1,r2]
        CMP      r3,r4
        BEQ      |L17.16|
        MOVS     r0,#0
        POP      {r4,pc}
|L17.16|
        SUBS     r2,r2,#1
        BCS      |L17.4|
        MOVS     r0,#1
        POP      {r4,pc}
        ENDP


        AREA ||i.strncpy||, CODE, READONLY, ALIGN=1

strncpy PROC
        B        |L18.6|
|L18.2|
        LDRB     r3,[r0,r2]
        STRB     r3,[r1,r2]
|L18.6|
        SUBS     r2,r2,#1
        BCS      |L18.2|
        MOV      r0,r1
        BX       lr
        ENDP


        AREA ||i.uartInit||, CODE, READONLY, ALIGN=2

uartInit PROC
        PUSH     {r4-r6,lr}
        MOVS     r0,#5
        LSLS     r0,r0,#28
        LDR      r1,[r0,#0x34]
        SUB      sp,sp,#0x28
        MOVS     r2,#0x30
        ORRS     r1,r1,r2
        STR      r1,[r0,#0x34]
        LDR      r0,|L19.148|
        LDR      r1,[r0,#0x10]
        MOVS     r2,#9
        LSLS     r2,r2,#15
        BICS     r1,r1,r2
        STR      r1,[r0,#0x10]
        LDR      r0,|L19.152|
        STR      r0,[sp,#8]
        MOVS     r0,#0xe1
        LSLS     r0,r0,#9
        STR      r0,[sp,#0xc]
        MOVS     r0,#3
        STR      r0,[sp,#0x10]
        MOVS     r0,#0x10
        STR      r0,[sp,#0x1c]
        MOVS     r0,#3
        MOVS     r4,#0
        LSLS     r0,r0,#28
        MOVS     r5,#1
        STR      r4,[sp,#0]
        STR      r0,[sp,#0x20]
        STR      r5,[sp,#4]
        STR      r4,[sp,#0x14]
        MOVS     r0,#0x64
        ADD      r1,sp,#0x20
        STRB     r0,[r1,#4]
        LDR      r6,|L19.156|
        MOV      r1,sp
        MOV      r0,r6
        BL       DrvUART_Init
        LDR      r1,|L19.160|
        LDR      r0,[r1,#0]
        MOVS     r2,#0xff
        LSLS     r2,r2,#8
        BICS     r0,r0,r2
        LSLS     r2,r5,#15
        ORRS     r0,r0,r2
        STR      r0,[r1,#0]
        LDR      r1,|L19.164|
        MOV      r0,r6
        BL       DrvUART_EnableInt
        LDR      r1,|L19.168|
        MOVS     r0,#0
|L19.106|
        STRB     r4,[r1,r0]
        ADDS     r0,r0,#1
        CMP      r0,#0xff
        BLS      |L19.106|
        MOVS     r0,#0
        LDR      r1,|L19.172|
        MOVS     r2,#1
        LSLS     r2,r2,#9
|L19.122|
        STRB     r4,[r1,r0]
        ADDS     r0,r0,#1
        CMP      r0,r2
        BCC      |L19.122|
        LDR      r0,|L19.176|
        STR      r4,[r0,#4]  ; out_index
        STR      r4,[r0,#0]  ; in_index
        STR      r4,[r0,#0xc]  ; utx_out
        STR      r5,[r0,#0x10]  ; txidle
        STR      r4,[r0,#8]  ; utx_in
        ADD      sp,sp,#0x28
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L19.148|
        DCD      0x50000040
|L19.152|
        DCD      0x00b71b00
|L19.156|
        DCD      0x40150000
|L19.160|
        DCD      0xe000e40c
|L19.164|
        DCD      0x00000811
|L19.168|
        DCD      ||.bss||
|L19.172|
        DCD      ||.bss||+0x100
|L19.176|
        DCD      ||.data||

        AREA ||i.uartSendCmd||, CODE, READONLY, ALIGN=2

uartSendCmd PROC
        PUSH     {r4-r7,lr}
        MOVS     r2,#0
        LDR      r7,|L20.52|
        LDR      r4,|L20.56|
        B        |L20.26|
|L20.10|
        LDR      r3,[r7,#8]  ; utx_in
        LDRB     r5,[r1,r2]
        LSLS     r6,r3,#23
        LSRS     r6,r6,#23
        ADDS     r3,r3,#1
        STRB     r5,[r4,r6]
        ADDS     r2,r2,#1
        STR      r3,[r7,#8]  ; utx_in
|L20.26|
        CMP      r2,r0
        BCC      |L20.10|
        LDR      r0,[r7,#0x10]  ; txidle
        CMP      r0,#1
        BNE      |L20.50|
        MOVS     r0,#0
        LDR      r1,|L20.60|
        STR      r0,[r7,#0x10]  ; txidle
        LDR      r2,[r1,#4]
        MOVS     r0,#2
        ORRS     r2,r2,r0
        STR      r2,[r1,#4]
|L20.50|
        POP      {r4-r7,pc}
        ENDP

|L20.52|
        DCD      ||.data||
|L20.56|
        DCD      ||.bss||+0x100
|L20.60|
        DCD      0x40150000

        AREA ||i.uartdecode||, CODE, READONLY, ALIGN=2

uartdecode PROC
        PUSH     {r0-r4,lr}
        MOV      r4,r1
        MOV      r1,sp
        BL       itoa
        MOV      r2,sp
        MOVS     r1,#0x20
        B        |L21.20|
|L21.16|
        STRB     r1,[r2,r0]
        ADDS     r0,r0,#1
|L21.20|
        CMP      r0,#6
        BCC      |L21.16|
        MOVS     r1,#0
        STRB     r1,[r2,r0]
        MOV      r0,r4
        BL       BTSendCmd
        MOV      r0,sp
        BL       BTSendCmd
        ADR      r0,|L21.48|
        BL       BTSendCmd
        POP      {r0-r4,pc}
        ENDP

|L21.48|
        DCB      "\r\n",0
        DCB      0

        AREA ||i.uartdecode2||, CODE, READONLY, ALIGN=1

uartdecode2 PROC
        PUSH     {r0-r4,lr}
        MOV      r4,r1
        MOV      r1,sp
        BL       itoa
        MOV      r2,sp
        MOVS     r1,#0x20
        B        |L22.20|
|L22.16|
        STRB     r1,[r2,r0]
        ADDS     r0,r0,#1
|L22.20|
        CMP      r0,#6
        BCC      |L22.16|
        MOVS     r1,#0
        STRB     r1,[r2,r0]
        MOV      r0,r4
        BL       BTSendCmd
        MOV      r0,sp
        BL       BTSendCmd
        POP      {r0-r4,pc}
        ENDP


        AREA ||i.uartdecodeH||, CODE, READONLY, ALIGN=2

uartdecodeH PROC
        PUSH     {r0-r4,lr}
        MOV      r4,r0
        MOV      r0,r1
        BL       BTSendCmd
        LSLS     r0,r4,#24
        LDR      r1,|L23.48|
        LSRS     r0,r0,#28
        LDRB     r0,[r1,r0]
        MOV      r2,sp
        STRB     r0,[r2,#0]
        LSLS     r0,r4,#28
        LSRS     r0,r0,#28
        LDRB     r0,[r1,r0]
        STRB     r0,[r2,#1]
        MOVS     r0,#0
        STRB     r0,[r2,#2]
        MOV      r0,sp
        BL       BTSendCmd
        ADR      r0,|L23.52|
        BL       BTSendCmd
        POP      {r0-r4,pc}
        ENDP

|L23.48|
        DCD      ||.constdata||+0x10
|L23.52|
        DCB      "\r\n",0
        DCB      0

        AREA ||i.uartdecodeH2||, CODE, READONLY, ALIGN=2

uartdecodeH2 PROC
        PUSH     {r0-r4,lr}
        MOV      r4,r0
        MOV      r0,r1
        BL       BTSendCmd
        LSLS     r0,r4,#24
        LDR      r1,|L24.44|
        LSRS     r0,r0,#28
        LDRB     r0,[r1,r0]
        MOV      r2,sp
        STRB     r0,[r2,#0]
        LSLS     r0,r4,#28
        LSRS     r0,r0,#28
        LDRB     r0,[r1,r0]
        STRB     r0,[r2,#1]
        MOVS     r0,#0
        STRB     r0,[r2,#2]
        MOV      r0,sp
        BL       BTSendCmd
        POP      {r0-r4,pc}
        ENDP

        DCW      0x0000
|L24.44|
        DCD      ||.constdata||+0x20

        AREA ||i.uartdecodeH32||, CODE, READONLY, ALIGN=2

uartdecodeH32 PROC
        PUSH     {r0-r4,lr}
        MOV      r4,r0
        MOV      r0,r1
        BL       BTSendCmd
        LDR      r0,|L25.96|
        LSRS     r1,r4,#28
        LDRB     r1,[r0,r1]
        MOV      r2,sp
        STRB     r1,[r2,#0]
        LSLS     r1,r4,#4
        LSRS     r1,r1,#28
        LDRB     r1,[r0,r1]
        STRB     r1,[r2,#1]
        LSLS     r1,r4,#8
        LSRS     r1,r1,#28
        LDRB     r1,[r0,r1]
        STRB     r1,[r2,#2]
        LSLS     r1,r4,#12
        LSRS     r1,r1,#28
        LDRB     r1,[r0,r1]
        STRB     r1,[r2,#3]
        LSLS     r1,r4,#16
        LSRS     r1,r1,#28
        LDRB     r1,[r0,r1]
        STRB     r1,[r2,#4]
        LSLS     r1,r4,#20
        LSRS     r1,r1,#28
        LDRB     r1,[r0,r1]
        STRB     r1,[r2,#5]
        LSLS     r1,r4,#24
        LSRS     r1,r1,#28
        LDRB     r1,[r0,r1]
        STRB     r1,[r2,#6]
        LSLS     r1,r4,#28
        LSRS     r1,r1,#28
        LDRB     r0,[r0,r1]
        STRB     r0,[r2,#7]
        MOVS     r0,#0
        STRB     r0,[r2,#8]
        MOV      r0,r2
        BL       BTSendCmd
        ADR      r0,|L25.100|
        BL       BTSendCmd
        POP      {r0-r4,pc}
        ENDP

        DCW      0x0000
|L25.96|
        DCD      ||.constdata||+0x30
|L25.100|
        DCB      "\r\n",0
        DCB      0

        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.bss||, DATA, NOINIT, ALIGN=2

UI_buf
        %        256
utx_buf
        %        512

        AREA ||.constdata||, DATA, READONLY, ALIGN=2

HEXSTR
        DCB      0x30,0x31,0x32,0x33
        DCB      0x34,0x35,0x36,0x37
        DCB      0x38,0x39,0x41,0x42
        DCB      0x43,0x44,0x45,0x46
|symbol_number.70|
        DCB      0x30,0x31,0x32,0x33
        DCB      0x34,0x35,0x36,0x37
        DCB      0x38,0x39,0x41,0x42
        DCB      0x43,0x44,0x45,0x46
|symbol_number.71|
        DCB      0x30,0x31,0x32,0x33
        DCB      0x34,0x35,0x36,0x37
        DCB      0x38,0x39,0x41,0x42
        DCB      0x43,0x44,0x45,0x46
|symbol_number.72|
        DCB      0x30,0x31,0x32,0x33
        DCB      0x34,0x35,0x36,0x37
        DCB      0x38,0x39,0x41,0x42
        DCB      0x43,0x44,0x45,0x46
        DCB      0x47,0x4c,0x53,0x4e
        DCB      0x24,0x20,0x00

        AREA ||.data||, DATA, ALIGN=2

in_index
        DCD      0x00000000
out_index
        DCD      0x00000000
utx_in
        DCD      0x00000000
utx_out
        DCD      0x00000000
txidle
        DCD      0x00000001
lastkey
        DCD      0xffffffff
column
        DCD      0x00000000
||vc||
        DCD      0x00000000

        EXPORT UART1_IRQHandler [CODE]
        EXPORT ||clr|| [CODE]
        EXPORT ||dps|| [CODE]
        EXPORT igetc [CODE]
        EXPORT iputc [CODE]
        EXPORT iputchar [CODE]
        EXPORT iputs [CODE]
        EXPORT itoa [CODE]
        EXPORT itoh [CODE]
        EXPORT iungetc [CODE]
        EXPORT sendBack [CODE]
        EXPORT sendDevInfo [CODE]
        EXPORT sendInfo [CODE]
        EXPORT sendStartInfo [CODE]
        EXPORT smscSendCmd [CODE]
        EXPORT strcmp [CODE]
        EXPORT strncmp [CODE]
        EXPORT strncpy [CODE]
        EXPORT uartInit [CODE]
        EXPORT uartSendCmd [CODE]
        EXPORT uartdecode [CODE]
        EXPORT uartdecode2 [CODE]
        EXPORT uartdecodeH [CODE]
        EXPORT uartdecodeH2 [CODE]
        EXPORT uartdecodeH32 [CODE]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT __aeabi_uidivmod [CODE]
        IMPORT DrvUART_Init [CODE]
        IMPORT DrvUART_EnableInt [CODE]
        IMPORT BTSendCmd [CODE]

        KEEP UI_buf
        KEEP utx_buf
        KEEP HEXSTR
        KEEP |symbol_number.70|
        EXPORTAS |symbol_number.70|, HEXSTR
        KEEP |symbol_number.71|
        EXPORTAS |symbol_number.71|, HEXSTR
        KEEP |symbol_number.72|
        EXPORTAS |symbol_number.72|, HEXSTR
        KEEP in_index
        KEEP out_index
        KEEP utx_in
        KEEP utx_out
        KEEP txidle
        KEEP lastkey
        KEEP column
        KEEP ||vc||

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,3
        ATTR SETSTRING Tag_conformance,"2.06"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
