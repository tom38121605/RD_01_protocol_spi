; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--min_array_alignment=4 --split_sections --debug -c --asm --info=totals -o.\output\irkey.o --depend=.\output\irkey.d --cpu=Cortex-M0 --apcs=interwork -I..\CMSIS\CM0\DeviceSupport\Nuvoton\NUC123Series -I..\CMSIS\CM0\CoreSupport -I..\INC\DrvInc -I..\INC\SysInc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -D__MICROLIB --omf_browse=.\output\irkey.crf ..\AppSrc\irKey.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||i.IR_IRQHandler||, CODE, READONLY, ALIGN=2

IR_IRQHandler PROC
        PUSH     {r3-r7,lr}
        LDR      r1,|L1.368|
        MOVS     r0,#0x40
        STR      r0,[r1,#0x20]
        BL       IR_IRQHandler_Test
        LDR      r0,|L1.372|
        LDR      r1,[r0,#0xc]
        LDR      r7,|L1.376|
        LDR      r0,[r7,#8]  ; tcap_old
        STR      r1,[r7,#8]  ; tcap_old
        SUBS     r0,r1,r0
        LSLS     r0,r0,#8
        LSRS     r0,r0,#8
|L1.28|
        LDR      r5,[r7,#0x20]  ; ir_pulse_compensation
        MOV      r4,r0
        CMP      r5,#0x28
        BEQ      |L1.38|
        ADDS     r0,r5,r4
|L1.38|
        LDR      r1,|L1.380|
        ADDS     r1,r0,r1
        CMP      r1,#0x31
        BCC      |L1.62|
        LDR      r1,|L1.384|
        ADDS     r1,r0,r1
        CMP      r1,#0x31
        BCC      |L1.62|
        LDR      r1,|L1.388|
        ADDS     r1,r0,r1
        CMP      r1,#0x31
        BCS      |L1.64|
|L1.62|
        ADDS     r0,r0,#0x32
|L1.64|
        LDR      r1,|L1.384|
        SUBS     r1,r1,#0x95
        ADDS     r1,r0,r1
        CMP      r1,#0x3c
        BCC      |L1.94|
        MOVS     r1,#0x4b
        LSLS     r1,r1,#4
        SUBS     r1,r0,r1
        CMP      r1,#0x3c
        BCC      |L1.94|
        LDR      r1,|L1.388|
        SUBS     r1,r1,#0x95
        ADDS     r1,r0,r1
        CMP      r1,#0x3c
        BCS      |L1.96|
|L1.94|
        SUBS     r0,r0,#0x3c
|L1.96|
        LDR      r1,|L1.392|
        ADDS     r2,r4,r1
        MOVS     r1,#0x7d
        LSLS     r1,r1,#3
        CMP      r2,r1
        BCS      |L1.110|
        MOV      r0,r4
|L1.110|
        LDR      r1,|L1.396|
        ADDS     r1,r0,r1
        CMP      r1,#0x9f
        BCS      |L1.120|
        ADDS     r0,r0,#0xa0
|L1.120|
        MOVS     r1,#0x64
        BL       __aeabi_uidivmod
        MOV      r6,r0
        CMP      r0,#0x18
        LDRB     r0,[r7,#1]  ; ir_state
        BLS      |L1.254|
        STR      r0,[sp,#0]
        CMP      r0,#2
        BEQ      |L1.244|
        MOVS     r1,#0xa
        MOV      r0,r6
        BL       __aeabi_uidivmod
        CMP      r0,#0x28
        BEQ      |L1.218|
        BGT      |L1.164|
        CMP      r0,#0xb
        BEQ      |L1.226|
        CMP      r0,#0xd
        BNE      |L1.172|
        B        |L1.188|
|L1.164|
        CMP      r0,#0x29
        BEQ      |L1.218|
        CMP      r0,#0x60
        BEQ      |L1.218|
|L1.172|
        ADDS     r0,r5,r4
        STR      r0,[r7,#0x20]  ; ir_pulse_compensation
|L1.176|
        MOVS     r0,#0xf
        LSLS     r0,r0,#6
        CMP      r6,r0
        BLS      |L1.270|
|L1.184|
        MOVS     r0,#0x28
        B        |L1.268|
|L1.188|
        MOVS     r0,#0x28
        STR      r0,[r7,#0x20]  ; ir_pulse_compensation
        MOVS     r0,#2
        STRB     r0,[r7,#1]
        SUBS     r0,r0,#3
        STR      r0,[r7,#0xc]  ; ir_key_bits
        MOVS     r0,#1
        STR      r0,[r7,#0x10]  ; ir_key_bit_mask
        B        |L1.270|
|L1.206|
        LDR      r0,[sp,#0]
        CMP      r0,#1
        BNE      |L1.176|
        MOVS     r0,#3
        STRB     r0,[r7,#1]
        B        |L1.184|
|L1.218|
        LDRB     r0,[r7,#2]  ; last_key
        CMP      r0,#0x55
        BNE      |L1.206|
        B        |L1.176|
|L1.226|
        LDR      r0,[sp,#0]
        CMP      r0,#3
        BNE      |L1.176|
        MOVS     r0,#0x28
        STR      r0,[r7,#0x20]  ; ir_pulse_compensation
        MOVS     r0,#1
        STRB     r0,[r7,#1]
        LDRB     r0,[r7,#2]  ; last_key
        B        |L1.360|
|L1.244|
        MOVS     r0,#0x28
        STR      r0,[r7,#0x20]  ; ir_pulse_compensation
        MOVS     r0,#0
        STRB     r0,[r7,#1]
        B        |L1.270|
|L1.254|
        CMP      r0,#2
        BNE      |L1.266|
        CMP      r6,#0xb
        BEQ      |L1.292|
        CMP      r6,#0x16
        BEQ      |L1.326|
|L1.266|
        ADDS     r0,r5,r4
|L1.268|
        STR      r0,[r7,#0x20]  ; ir_pulse_compensation
|L1.270|
        LDR      r1,[r7,#0x14]  ; test_open
        CMP      r1,#0
        BEQ      |L1.290|
        LSLS     r0,r1,#2
        LDR      r2,|L1.400|
        ADDS     r1,r1,#1
        LDR      r0,[r2,r0]
        STR      r1,[r7,#0x14]  ; test_open
        BEQ      |L1.290|
        B        |L1.28|
|L1.290|
        POP      {r3-r7,pc}
|L1.292|
        MOVS     r0,#0x28
        STR      r0,[r7,#0x20]  ; ir_pulse_compensation
        LDR      r1,[r7,#0x10]  ; ir_key_bit_mask
        LDR      r0,[r7,#0xc]  ; ir_key_bits
        BICS     r0,r0,r1
        STR      r0,[r7,#0xc]  ; ir_key_bits
        LSLS     r1,r1,#1
        STR      r1,[r7,#0x10]  ; ir_key_bit_mask
        BNE      |L1.270|
        MOVS     r1,#1
        STRB     r1,[r7,#1]
        LDRB     r1,[r7,#0x1c]  ; ir_key_bits_index
        ADDS     r1,r1,#1
        LSLS     r1,r1,#29
        LSRS     r1,r1,#29
        STR      r1,[r7,#0x1c]  ; ir_key_bits_index
        B        |L1.354|
|L1.326|
        MOVS     r0,#0x28
        STR      r0,[r7,#0x20]  ; ir_pulse_compensation
        LDR      r0,[r7,#0x10]  ; ir_key_bit_mask
        LSLS     r0,r0,#1
        STR      r0,[r7,#0x10]  ; ir_key_bit_mask
        BNE      |L1.270|
        MOVS     r0,#1
        STRB     r0,[r7,#1]
        LDRB     r0,[r7,#0x1c]  ; ir_key_bits_index
        ADDS     r0,r0,#1
        LSLS     r0,r0,#29
        LSRS     r0,r0,#29
        STR      r0,[r7,#0x1c]  ; ir_key_bits_index
        LDR      r0,[r7,#0xc]  ; ir_key_bits
|L1.354|
        BL       IrKeyRemap
        STRB     r0,[r7,#2]
|L1.360|
        BL       putKey2Pool
        B        |L1.270|
        ENDP

        DCW      0x0000
|L1.368|
        DCD      0x50004040
|L1.372|
        DCD      0x40110020
|L1.376|
        DCD      ||.data||
|L1.380|
        DCD      0xfffffbe5
|L1.384|
        DCD      0xfffff799
|L1.388|
        DCD      0xfffff34d
|L1.392|
        DCD      0xffffcd38
|L1.396|
        DCD      0xffff645f
|L1.400|
        DCD      ||.bss||

        AREA ||i.IR_IRQHandler_Test||, CODE, READONLY, ALIGN=2

IR_IRQHandler_Test PROC
        PUSH     {r4,lr}
        LDR      r0,|L2.48|
        LDR      r2,[r0,#0xc]
        LDR      r3,|L2.52|
        LDR      r4,|L2.56|
        LDR      r0,[r3,#0x18]  ; ir_test_i
        LSLS     r1,r0,#2
        STR      r2,[r4,r1]
        CMP      r0,#0
        BEQ      |L2.32|
        ADDS     r4,r1,r4
        SUBS     r4,r4,#0x40
        LDR      r4,[r4,#0x3c]
        SUBS     r2,r2,r4
        LDR      r4,|L2.60|
        STR      r2,[r4,r1]
|L2.32|
        ADDS     r0,r0,#1
        STR      r0,[r3,#0x18]  ; ir_test_i
        CMP      r0,#0x50
        BNE      |L2.44|
        MOVS     r0,#0
        STR      r0,[r3,#0x18]  ; ir_test_i
|L2.44|
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L2.48|
        DCD      0x40110020
|L2.52|
        DCD      ||.data||
|L2.56|
        DCD      ||.bss||+0x140
|L2.60|
        DCD      ||.bss||

        AREA ||i.IrKeyRemap||, CODE, READONLY, ALIGN=2

IrKeyRemap PROC
        PUSH     {r3,lr}
        STR      r0,[sp,#0]
        MOV      r0,sp
        LDRH     r0,[r0,#0]
        MOVS     r1,#0xff
        LSLS     r1,r1,#8
        CMP      r0,r1
        BNE      |L3.124|
        MOV      r1,sp
        LDRB     r0,[r1,#2]
        LDRB     r1,[r1,#3]
        MVNS     r1,r1
        UXTB     r1,r1
        CMP      r0,r1
        BNE      |L3.124|
        MOVS     r1,#1
        LDR      r2,|L3.200|
        CMP      r0,#0x4c
        STRB     r1,[r2,#3]
        BEQ      |L3.160|
        BGT      |L3.84|
        CMP      r0,#0x19
        BEQ      |L3.152|
        BGT      |L3.66|
        SUBS     r0,r0,#0xb
        MOVS     r3,r0
        BL       __ARM_common_switch8
        DCB      0x07,0x24,0x22,0x28
        DCB      0x2a,0x22,0x26,0x2e
        DCB      0x22,0x00
|L3.66|
        CMP      r0,#0x2a
        BEQ      |L3.196|
        CMP      r0,#0x2c
        BEQ      |L3.164|
        CMP      r0,#0x42
        BEQ      |L3.176|
        CMP      r0,#0x4a
        BNE      |L3.124|
        B        |L3.192|
|L3.84|
        CMP      r0,#0x8a
        BEQ      |L3.188|
        BGT      |L3.108|
        CMP      r0,#0x60
        BEQ      |L3.144|
        CMP      r0,#0x61
        BEQ      |L3.126|
        CMP      r0,#0x6c
        BEQ      |L3.126|
        CMP      r0,#0x82
        BNE      |L3.124|
        B        |L3.172|
|L3.108|
        CMP      r0,#0x8c
        BEQ      |L3.156|
        CMP      r0,#0xa2
        BEQ      |L3.184|
        CMP      r0,#0xac
        BEQ      |L3.168|
        CMP      r0,#0xc2
        BEQ      |L3.180|
|L3.124|
        MOVS     r0,#0x55
|L3.126|
        POP      {r3,pc}
        MOVS     r0,#0x56
        POP      {r3,pc}
        MOVS     r0,#0x5a
        POP      {r3,pc}
        MOVS     r0,#0x58
        POP      {r3,pc}
        MOVS     r0,#0x59
        POP      {r3,pc}
|L3.144|
        MOVS     r0,#0x57
        POP      {r3,pc}
        MOVS     r0,#0x64
        POP      {r3,pc}
|L3.152|
        MOVS     r0,#0x65
        POP      {r3,pc}
|L3.156|
        MOVS     r0,#0x68
        POP      {r3,pc}
|L3.160|
        MOVS     r0,#0x69
        POP      {r3,pc}
|L3.164|
        MOVS     r0,#0x6a
        POP      {r3,pc}
|L3.168|
        MOVS     r0,#0x6b
        POP      {r3,pc}
|L3.172|
        MOVS     r0,#0x6d
        POP      {r3,pc}
|L3.176|
        MOVS     r0,#0x6e
        POP      {r3,pc}
|L3.180|
        MOVS     r0,#0x6f
        POP      {r3,pc}
|L3.184|
        MOVS     r0,#0x70
        POP      {r3,pc}
|L3.188|
        MOVS     r0,#0x71
        POP      {r3,pc}
|L3.192|
        MOVS     r0,#0x72
        POP      {r3,pc}
|L3.196|
        MOVS     r0,#0x73
        POP      {r3,pc}
        ENDP

|L3.200|
        DCD      ||.data||

        AREA ||i.devStartDealIrKey||, CODE, READONLY, ALIGN=1

devStartDealIrKey PROC
        PUSH     {r4,lr}
        BL       delStartkey
        POP      {r4,pc}
        ENDP


        AREA ||i.devStartbyDealIrKey||, CODE, READONLY, ALIGN=1

devStartbyDealIrKey PROC
        PUSH     {r4,lr}
        BL       delStandbytkey
        POP      {r4,pc}
        ENDP


        AREA ||i.getIrKey||, CODE, READONLY, ALIGN=2

getIrKey PROC
        PUSH     {r4-r7,lr}
        LDR      r5,|L6.124|
        MOVS     r6,#0x55
        MOV      r3,r5
        ADDS     r3,r3,#8
        LDR      r4,[r5,#4]  ; ir_keyword_pool
        MOV      r2,r3
        LDRB     r0,[r4,r3]
        SUBS     r2,r2,#0x38
        MOVS     r7,#3
        LDRB     r1,[r2,#4]
        CMP      r0,#0x55
        BEQ      |L6.36|
        STRB     r6,[r4,r3]
        MOVS     r3,#0
        STR      r3,[r5,#4]  ; ir_keyword_pool
        STR      r7,[r2,#0x2c]  ; ir_key_relax_counter
        B        |L6.62|
|L6.36|
        LDR      r0,[r2,#0x2c]  ; ir_key_relax_counter
        SUBS     r0,r0,#1
        STR      r0,[r2,#0x2c]  ; ir_key_relax_counter
        BEQ      |L6.54|
        CMP      r1,#0x58
        BEQ      |L6.60|
        CMP      r1,#0x59
        BNE      |L6.96|
        B        |L6.60|
|L6.54|
        MOV      r0,r6
        STR      r7,[r2,#0x2c]  ; ir_key_relax_counter
        B        |L6.118|
|L6.60|
        MOV      r0,r1
|L6.62|
        CMP      r0,r1
        BNE      |L6.106|
        CMP      r0,#0x58
        BEQ      |L6.74|
        CMP      r0,#0x59
        BNE      |L6.96|
|L6.74|
        LDR      r1,[r2,#0x28]  ; key_c_c
        ADDS     r1,r1,#1
        STR      r1,[r2,#0x28]  ; key_c_c
        CMP      r1,#3
        BCC      |L6.96|
        MOVS     r1,#0
        STR      r1,[r2,#0x28]  ; key_c_c
        LDR      r1,[r2,#0x24]  ; key_c_r
        SUBS     r1,r1,#1
        STR      r1,[r2,#0x24]  ; key_c_r
        BEQ      |L6.100|
|L6.96|
        MOVS     r0,#0x55
        POP      {r4-r7,pc}
|L6.100|
        MOVS     r1,#1
        STR      r1,[r2,#0x24]  ; key_c_r
        POP      {r4-r7,pc}
|L6.106|
        CMP      r0,#0x58
        BEQ      |L6.114|
        CMP      r0,#0x59
        BNE      |L6.118|
|L6.114|
        MOVS     r1,#2
        STR      r1,[r2,#0x24]  ; key_c_r
|L6.118|
        STRB     r0,[r2,#4]
        POP      {r4-r7,pc}
        ENDP

        DCW      0x0000
|L6.124|
        DCD      ||.data||+0x30

        AREA ||i.initIRKeyPool||, CODE, READONLY, ALIGN=2

initIRKeyPool PROC
        MOVS     r0,#1
        MOVS     r1,#0x55
        LDR      r2,|L7.20|
        B        |L7.12|
|L7.8|
        ADDS     r3,r2,r0
        STRB     r1,[r3,#8]
|L7.12|
        SUBS     r0,r0,#1
        BCS      |L7.8|
        BX       lr
        ENDP

        DCW      0x0000
|L7.20|
        DCD      ||.data||+0x30

        AREA ||i.irClkInit||, CODE, READONLY, ALIGN=2

irClkInit PROC
        MOVS     r0,#0x20
        MOVS     r1,#5
        LSLS     r1,r1,#28
        LDR      r2,[r1,#0xc]
        ORRS     r2,r2,r0
        STR      r2,[r1,#0xc]
        LDR      r2,[r1,#0xc]
        BICS     r2,r2,r0
        STR      r2,[r1,#0xc]
        LDR      r0,|L8.40|
        LDR      r1,[r0,#0x14]
        MOVS     r2,#7
        LSLS     r2,r2,#20
        BICS     r1,r1,r2
        STR      r1,[r0,#0x14]
        LDR      r2,[r0,#8]
        MOVS     r1,#0x20
        ORRS     r2,r2,r1
        STR      r2,[r0,#8]
        BX       lr
        ENDP

|L8.40|
        DCD      0x50000200

        AREA ||i.irKeyInit||, CODE, READONLY, ALIGN=2

irKeyInit PROC
        PUSH     {r4,lr}
        LDR      r0,|L9.92|
        LDR      r1,[r0,#0]
        MOVS     r2,#3
        LSLS     r2,r2,#12
        BICS     r1,r1,r2
        STR      r1,[r0,#0]
        LDR      r2,[r0,#0x18]
        MOVS     r1,#0x40
        BICS     r2,r2,r1
        STR      r2,[r0,#0x18]
        LDR      r2,[r0,#0x1c]
        LDR      r3,|L9.96|
        BICS     r2,r2,r3
        LSLS     r3,r1,#16
        ORRS     r2,r2,r3
        STR      r2,[r0,#0x1c]
        LDR      r2,[r0,#0x14]
        ORRS     r2,r2,r1
        STR      r2,[r0,#0x14]
        LDR      r1,|L9.100|
        MOVS     r0,#0x2a
        STR      r0,[r1,#0]
        LDR      r0,|L9.104|
        LDR      r1,[r0,#0]
        MOVS     r2,#0x80
        LSRS     r1,r1,#8
        LSLS     r1,r1,#8
        ORRS     r1,r1,r2
        STR      r1,[r0,#0]
        LDR      r1,|L9.108|
        MOVS     r0,#0x10
        STR      r0,[r1,#0]
        LDR      r4,|L9.116|
        MOVS     r3,#3
        LSLS     r3,r3,#27
        LDR      r2,|L9.112|
        MOVS     r1,#0xb
        MOV      r0,r4
        BL       DrvTIMER_Init
        LDR      r1,[r4,#0]
        LSLS     r2,r4,#25
        ORRS     r1,r1,r2
        STR      r1,[r4,#0]
        POP      {r4,pc}
        ENDP

|L9.92|
        DCD      0x50004040
|L9.96|
        DCD      0x00400040
|L9.100|
        DCD      0x50004180
|L9.104|
        DCD      0xe000e404
|L9.108|
        DCD      0xe000e100
|L9.112|
        DCD      0x000f4240
|L9.116|
        DCD      0x40110020

        AREA ||i.irKeyScan||, CODE, READONLY, ALIGN=2

irKeyScan PROC
        PUSH     {r4,lr}
        BL       getIrKey
        LDR      r1,|L10.52|
        LDRB     r1,[r1,#0]  ; dev_state
        CMP      r1,#0
        BEQ      |L10.34|
        CMP      r1,#1
        BEQ      |L10.24|
        CMP      r1,#2
        BNE      |L10.34|
        B        |L10.30|
|L10.24|
        BL       delStartkey
        B        |L10.34|
|L10.30|
        BL       delStandbytkey
|L10.34|
        LDR      r0,|L10.60|
        LDR      r3,|L10.56|
        MOVS     r2,#0
        MOVS     r1,#0x50
        LDRB     r0,[r0,#0]  ; ir_key_task
        BL       startATask
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L10.52|
        DCD      dev_state
|L10.56|
        DCD      irKeyScan
|L10.60|
        DCD      ||.data||

        AREA ||i.irKeyTaskInit||, CODE, READONLY, ALIGN=2

irKeyTaskInit PROC
        PUSH     {r4,lr}
        BL       irKeyInit
        BL       getATask
        LDR      r1,|L11.32|
        CMP      r0,#0xff
        STRB     r0,[r1,#0]
        BEQ      |L11.28|
        LDR      r3,|L11.36|
        MOVS     r2,#0
        MOVS     r1,#0x50
        BL       startATask
|L11.28|
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L11.32|
        DCD      ||.data||
|L11.36|
        DCD      irKeyScan

        AREA ||i.ir_error||, CODE, READONLY, ALIGN=2

ir_error PROC
        LDR      r1,|L12.8|
        MOVS     r0,#0
        STRB     r0,[r1,#1]
        BX       lr
        ENDP

|L12.8|
        DCD      ||.data||

        AREA ||i.putKey2Pool||, CODE, READONLY, ALIGN=2

putKey2Pool PROC
        LDR      r1,|L13.16|
        MOV      r2,r1
        LDR      r3,[r1,#0]  ; ir_keyword_pool
        ADDS     r2,r2,#8
        STRB     r0,[r3,r2]
        MOVS     r0,#0
        STR      r0,[r1,#0]  ; ir_keyword_pool
        BX       lr
        ENDP

|L13.16|
        DCD      ||.data||+0x30

        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.bss||, DATA, NOINIT, ALIGN=2

ir_pulse_pool
        %        320
ir_time_stamp
        %        320

        AREA ||.data||, DATA, ALIGN=2

ir_key_task
        DCB      0xff
ir_state
        DCB      0x01
last_key
        DCB      0x55
ir_key_flag
        DCB      0x00
ir_key_bak
        DCB      0x55,0x00,0x00,0x00
tcap_old
        DCD      0x00000000
ir_key_bits
        DCD      0x00000000
ir_key_bit_mask
        DCD      0x00000000
test_open
        DCD      0x00000000
ir_test_i
        DCD      0x00000000
ir_key_bits_index
        DCD      0x00000000
ir_pulse_compensation
        DCD      0x00000028
key_c_r
        DCD      0x00000000
key_c_c
        DCD      0x00000000
ir_key_relax_counter
        DCD      0x00000003
ir_keyword_pool
        DCD      0x00000000
        DCD      0x00000000
        DCB      0x55,0x00,0x00,0x00

        AREA ||area_number.18||, DATA, ALIGN=0

        EXPORTAS ||area_number.18||, ||.data||
ir_key_volue
        DCB      0x00

        AREA ||area_number.19||, DATA, ALIGN=0

        EXPORTAS ||area_number.19||, ||.data||
ir_keyword
        DCB      0x00

        AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

__ARM_common_switch8 PROC
        PUSH     {r4,r5}
        MOV      r4,lr
        SUBS     r4,r4,#1
        LDRB     r5,[r4,#0]
        ADDS     r4,r4,#1
        CMP      r3,r5
        BCS      |L88.16|
        MOV      r5,r3
|L88.16|
        LDRB     r3,[r4,r5]
        LSLS     r3,r3,#1
        ADDS     r3,r4,r3
        POP      {r4,r5}
        BX       r3
        ENDP


        EXPORT IR_IRQHandler [CODE]
        EXPORT IR_IRQHandler_Test [CODE]
        EXPORT IrKeyRemap [CODE]
        EXPORT devStartDealIrKey [CODE]
        EXPORT devStartbyDealIrKey [CODE]
        EXPORT getIrKey [CODE]
        EXPORT initIRKeyPool [CODE]
        EXPORT irClkInit [CODE]
        EXPORT irKeyInit [CODE]
        EXPORT irKeyScan [CODE]
        EXPORT irKeyTaskInit [CODE]
        EXPORT ir_error [CODE]
        EXPORT putKey2Pool [CODE]
        EXPORT ir_key_task [DATA,SIZE=1]
        EXPORT last_key [DATA,SIZE=1]
        EXPORT ir_key_flag [DATA,SIZE=1]
        EXPORT ir_key_bits [DATA,SIZE=4]
        EXPORT ir_keyword_pool [DATA,SIZE=12]
        EXPORT ir_key_volue [DATA,SIZE=1]
        EXPORT ir_keyword [DATA,SIZE=1]
        EXPORT __ARM_common_switch8 [CODE]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT __aeabi_uidivmod [CODE]
        IMPORT DrvTIMER_Init [CODE]
        IMPORT delStartkey [CODE]
        IMPORT delStandbytkey [CODE]
        IMPORT startATask [CODE]
        IMPORT dev_state [DATA]
        IMPORT getATask [CODE]

        KEEP ir_pulse_pool
        KEEP ir_time_stamp
        KEEP ir_state
        KEEP ir_key_bak
        KEEP tcap_old
        KEEP ir_key_bit_mask
        KEEP test_open
        KEEP ir_test_i
        KEEP ir_key_bits_index
        KEEP ir_pulse_compensation
        KEEP key_c_r
        KEEP key_c_c
        KEEP ir_key_relax_counter

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,3
        ATTR SETSTRING Tag_conformance,"2.06"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
