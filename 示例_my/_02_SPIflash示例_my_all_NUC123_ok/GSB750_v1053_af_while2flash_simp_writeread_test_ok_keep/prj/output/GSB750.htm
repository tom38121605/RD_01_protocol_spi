<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\GSB750.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\GSB750.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.02 [Build 28]: Last Updated: Wed Nov 30 15:44:29 2016
<BR><P>
<H3>Maximum Stack Usage =        240 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
adckeyScan &rArr; devStartDealAdcKey &rArr; delStartkey &rArr; enterStandby &rArr; powerOff &rArr; outStandby &rArr; powerOn &rArr; ampSendEqs_38 &rArr; ampSetEqDefault &rArr; ampSendCmd_38 &rArr; addI2cChain &rArr; i2cSpirit
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[2f]">SH_DoCommand</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[ae]">changeInputVolumeUp</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">ChangInputVolumeCheck</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1e]">ADC_IRQHandler</a> from adckey.o(i.ADC_IRQHandler) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[6]">BOD_IRQHandler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[24]">ChangInputVolumeCheck</a> from sta339.o(i.ChangInputVolumeCheck) referenced from sta339.o(i.ChangInputVolumeCheck)
 <LI><a href="#[24]">ChangInputVolumeCheck</a> from sta339.o(i.ChangInputVolumeCheck) referenced from sta339.o(i.changeInputVolumeDown)
 <LI><a href="#[24]">ChangInputVolumeCheck</a> from sta339.o(i.ChangInputVolumeCheck) referenced from sta339.o(i.turnDownVolume)
 <LI><a href="#[24]">ChangInputVolumeCheck</a> from sta339.o(i.ChangInputVolumeCheck) referenced from sta339.o(i.turnUpVolume)
 <LI><a href="#[25]">DWP83SpiritTask</a> from dwhp83.o(i.DWP83SpiritTask) referenced from dwhp83.o(i.DWP83SpiritTask)
 <LI><a href="#[25]">DWP83SpiritTask</a> from dwhp83.o(i.DWP83SpiritTask) referenced from dwhp83.o(i.DWPH83Init)
 <LI><a href="#[d]">Default_Handler</a> from startup_nuc123series.o(.text) referenced 8 times from startup_nuc123series.o(RESET)
 <LI><a href="#[8]">EINT0_IRQHandler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[9]">EINT1_IRQHandler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[a]">GPAB_IRQHandler</a> from power.o(i.GPAB_IRQHandler) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[b]">GPCDF_IRQHandler</a> from power.o(i.GPCDF_IRQHandler) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from power.o(i.HardFault_Handler) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[17]">I2C0_IRQHandler</a> from i2csys.o(i.I2C0_IRQHandler) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[18]">I2C1_IRQHandler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[1c]">I2S_IRQHandler</a> from filter.o(i.I2S_IRQHandler) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[1b]">PDMA_IRQHandler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[1a]">PS2_IRQHandler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[c]">PWMA_IRQHandler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[1d]">PWRWU_IRQHandler</a> from power.o(i.PWRWU_IRQHandler) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[2e]">Reset_Handler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[14]">SPI0_IRQHandler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[15]">SPI1_IRQHandler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[16]">SPI2_IRQHandler</a> from i2s_spi.o(i.SPI2_IRQHandler) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from systimertask.o(i.SysTick_Handler) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[20]">SystemInit</a> from system_nuc123series.o(i.SystemInit) referenced from startup_nuc123series.o(.text)
 <LI><a href="#[e]">TMR0_IRQHandler</a> from led.o(i.TMR0_IRQHandler) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[f]">TMR1_IRQHandler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[10]">TMR2_IRQHandler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[11]">TMR3_IRQHandler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[12]">UART0_IRQHandler</a> from uart.o(i.UART0_IRQHandler) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[13]">UART1_IRQHandler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[19]">USBD_IRQHandler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[7]">WDT_IRQHandler</a> from power.o(i.WDT_IRQHandler) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[22]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_nuc123series.o(.text)
 <LI><a href="#[26]">adckeyScan</a> from adckey.o(i.adckeyScan) referenced from adckey.o(i.adckeyScan)
 <LI><a href="#[26]">adckeyScan</a> from adckey.o(i.adckeyScan) referenced from adckey.o(i.adckeyTaskInit)
 <LI><a href="#[27]">ampDecVolume</a> from sta339.o(i.ampDecVolume) referenced from sta339.o(i.ampAddVolume)
 <LI><a href="#[27]">ampDecVolume</a> from sta339.o(i.ampDecVolume) referenced from sta339.o(i.ampDecVolume)
 <LI><a href="#[23]">ampFlasfLed</a> from sta339.o(i.ampFlasfLed) referenced from sta339.o(i.ChangInputVolumeCheck)
 <LI><a href="#[23]">ampFlasfLed</a> from sta339.o(i.ampFlasfLed) referenced from sta339.o(i.ampFlasfLed)
 <LI><a href="#[29]">btCheck</a> from pt2314.o(i.btCheck) referenced from pt2314.o(i.btCheck)
 <LI><a href="#[28]">btCheckDone</a> from pt2314.o(i.btCheckDone) referenced from pt2314.o(i.btCheck)
 <LI><a href="#[28]">btCheckDone</a> from pt2314.o(i.btCheckDone) referenced from pt2314.o(i.changeInputChannel)
 <LI><a href="#[28]">btCheckDone</a> from pt2314.o(i.btCheckDone) referenced from pt2314.o(i.pt2314DataResume)
 <LI><a href="#[2c]">btHangUpSignalProcess</a> from led.o(i.btHangUpSignalProcess) referenced from led.o(i.ledTask)
 <LI><a href="#[2a]">dwph83Check</a> from dwhp83.o(i.dwph83Check) referenced from pt2314.o(i.changeInputChannel)
 <LI><a href="#[2a]">dwph83Check</a> from dwhp83.o(i.dwph83Check) referenced from dwhp83.o(i.dwph83Check)
 <LI><a href="#[2a]">dwph83Check</a> from dwhp83.o(i.dwph83Check) referenced from pt2314.o(i.pt2314DataResume)
 <LI><a href="#[2d]">ledTask</a> from led.o(i.ledTask) referenced from led.o(i.ledTask)
 <LI><a href="#[2d]">ledTask</a> from led.o(i.ledTask) referenced from led.o(i.ledTaskInit)
 <LI><a href="#[1f]">main</a> from main.o(i.main) referenced from entry8.o(.ARM.Collect$$$$00000009)
 <LI><a href="#[2b]">playSFMusicEnd</a> from i2s_spi.o(i.playSFMusicEnd) referenced from i2s_spi.o(i.dealFlashEvent)
 <LI><a href="#[21]">resetHook</a> from power.o(i.resetHook) referenced from startup_nuc123series.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[22]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(.text)
</UL>
<P><STRONG><a name="[e8]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[30]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[35]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[e9]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[ea]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8.o(.ARM.Collect$$$$00000009))

<P><STRONG><a name="[2e]"></a>Reset_Handler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>PDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PS2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PWMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>USBD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SH_DoCommand</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_nuc123series.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[eb]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Init
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetAPBClockFreq
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUART_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SClkInit
</UL>

<P><STRONG><a name="[33]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[ec]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealFlashEvent
</UL>

<P><STRONG><a name="[ee]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[31]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[ef]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1e]"></a>ADC_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, adckey.o(i.ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_IRQHandler &rArr; adcKeyRemap
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcKeyRemap
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GET_RSLT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>CLK_GetAPBClockFreq</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drvi2c.o(i.CLK_GetAPBClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Init
</UL>

<P><STRONG><a name="[3b]"></a>CLK_Init</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, main.o(i.CLK_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CLK_Init &rArr; SystemCoreClockUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcKeyClkInit
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickInit
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Init
</UL>

<P><STRONG><a name="[4c]"></a>DWHP83SendCmd</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, dwhp83.o(i.DWHP83SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DWHP83SendCmd &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitGpioI2c
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealMuContainer
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83SpiritTask
</UL>

<P><STRONG><a name="[4f]"></a>DWHP83UnMute</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dwhp83.o(i.DWHP83UnMute))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DWHP83UnMute &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitGpioI2c
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampUnMuteBass
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playSFMusicEnd
</UL>

<P><STRONG><a name="[9c]"></a>DWP83CuCV</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, dwhp83.o(i.DWP83CuCV))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DWP83CuCV
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampDecVolume
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampAddVolume
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[6a]"></a>DWP83CuPowerOn</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dwhp83.o(i.DWP83CuPowerOn))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83Master
</UL>

<P><STRONG><a name="[de]"></a>DWP83MuPowerOn</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dwhp83.o(i.DWP83MuPowerOn))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
</UL>

<P><STRONG><a name="[25]"></a>DWP83SpiritTask</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, dwhp83.o(i.DWP83SpiritTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = DWP83SpiritTask &rArr; dealMuContainer &rArr; DWPH83VolumeChange &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83GetStatus
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83CuMuDetect
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealMuContainer
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWPH83VolumeChange
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83SendCmd
</UL>
<BR>[Address Reference Count : 2]<UL><LI> dwhp83.o(i.DWP83SpiritTask)
<LI> dwhp83.o(i.DWPH83Init)
</UL>
<P><STRONG><a name="[54]"></a>DWPH83Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, dwhp83.o(i.DWPH83Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DWPH83Init &rArr; startATask
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getATask
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>DWPH83VolumeChange</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, dwhp83.o(i.DWPH83VolumeChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DWPH83VolumeChange &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitGpioI2c
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealMuContainer
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83SpiritTask
</UL>

<P><STRONG><a name="[99]"></a>DrvADC_EnableInt</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drvadc.o(i.DrvADC_EnableInt))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adckeyTaskInit
</UL>

<P><STRONG><a name="[56]"></a>DrvI2C_Init</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, drvi2c.o(i.DrvI2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetAPBClockFreq
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_RESET_IP2
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSysInit
</UL>

<P><STRONG><a name="[ca]"></a>DrvI2S_EnableInt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drvi2s.o(i.DrvI2S_EnableInt))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2sStart
</UL>

<P><STRONG><a name="[59]"></a>DrvSPI_Init</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, drvspi.o(i.DrvSPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DrvSPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_RESET_IP2
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashInit
</UL>

<P><STRONG><a name="[5b]"></a>DrvTIMER_EnableInt</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, drvtimer.o(i.DrvTIMER_EnableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DrvTIMER_EnableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInit
</UL>

<P><STRONG><a name="[5d]"></a>DrvTIMER_Init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, drvtimer.o(i.DrvTIMER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DrvTIMER_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APBCLK_ENABLE
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInit
</UL>

<P><STRONG><a name="[e7]"></a>DrvUART_EnableInt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, drvuart.o(i.DrvUART_EnableInt))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInit
</UL>

<P><STRONG><a name="[5f]"></a>DrvUART_Init</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, drvuart.o(i.DrvUART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DrvUART_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_RESET_IP2
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInit
</UL>

<P><STRONG><a name="[61]"></a>DrvWDT_DisableInt</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, drvtimer.o(i.DrvWDT_DisableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DrvWDT_DisableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_DISABLE_INT
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doPowerOff
</UL>

<P><STRONG><a name="[65]"></a>DrvWDT_EnableInt</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, drvtimer.o(i.DrvWDT_EnableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DrvWDT_EnableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTwake
</UL>

<P><STRONG><a name="[66]"></a>DrvWDT_Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, drvtimer.o(i.DrvWDT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DrvWDT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APBCLK_ENABLE
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTwake
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTInit
</UL>

<P><STRONG><a name="[50]"></a>Dwhp83CuMuDetect</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, dwhp83.o(i.Dwhp83CuMuDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Dwhp83CuMuDetect &rArr; readDwhp83 &rArr; i2cStart &rArr; i2cWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDwhp83
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitGpioI2c
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwph83Check
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83SpiritTask
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputChannel
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[68]"></a>Dwhp83FixedCoCo</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dwhp83.o(i.Dwhp83FixedCoCo))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Dwhp83FixedCoCo &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitGpioI2c
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
</UL>

<P><STRONG><a name="[51]"></a>Dwhp83GetStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, dwhp83.o(i.Dwhp83GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Dwhp83GetStatus &rArr; readDwhp83 &rArr; i2cStart &rArr; i2cWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDwhp83
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitGpioI2c
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83SpiritTask
</UL>

<P><STRONG><a name="[69]"></a>Dwhp83Master</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dwhp83.o(i.Dwhp83Master))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Dwhp83Master &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitGpioI2c
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83CuPowerOn
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
</UL>

<P><STRONG><a name="[6b]"></a>Dwhp83Slave</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dwhp83.o(i.Dwhp83Slave))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Dwhp83Slave &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitGpioI2c
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwph83Check
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputChannel
</UL>

<P><STRONG><a name="[6c]"></a>Erase_Page_Data</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, main.o(i.Erase_Page_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Erase_Page_Data &rArr; spiSendWord
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSendWord
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a]"></a>GPAB_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, power.o(i.GPAB_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>GPCDF_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, power.o(i.GPCDF_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>Hal_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(i.Hal_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Hal_Init &rArr; dealPowerKey &rArr; sysDelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTaskInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealPowerKey
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, power.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>I2C0_IRQHandler</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, i2csys.o(i.I2C0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_START
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CLEAR_SI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>I2SClkInit</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, i2s_spi.o(i.I2SClkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2SClkInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_SET_MCK_DIV
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_CLR_TXFIFO
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_CLR_RXFIFO
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOn
</UL>

<P><STRONG><a name="[1c]"></a>I2S_IRQHandler</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, filter.o(i.I2S_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = I2S_IRQHandler &rArr; dealFlashEvent &rArr; spiFlashPageWrite &rArr; spiSendWord
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealFlashEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>PWRWU_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, power.o(i.PWRWU_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PWRWU_IRQHandler &rArr; ledColorSet &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledColorSet
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SPI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, i2s_spi.o(i.SPI2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, systimertask.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SysTick_Handler &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvent
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSpirit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, system_nuc123series.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemCoreClockUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Init
</UL>

<P><STRONG><a name="[20]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_nuc123series.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(.text)
</UL>
<P><STRONG><a name="[e]"></a>TMR0_IRQHandler</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, led.o(i.TMR0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART0_IRQHandler</STRONG> (Thumb, 172 bytes, Stack size 20 bytes, uart.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART0_IRQHandler &rArr; iputc
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>WB_MMI_commend</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, wb6084.o(i.WB_MMI_commend))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = WB_MMI_commend &rArr; uartSendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WB_reject_call
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WB_play_pause
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WB_open_call
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WB_enter_pairing
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WB_close_call
</UL>

<P><STRONG><a name="[80]"></a>WB_close_call</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wb6084.o(i.WB_close_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = WB_close_call &rArr; WB_MMI_commend &rArr; uartSendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WB_MMI_commend
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
</UL>

<P><STRONG><a name="[81]"></a>WB_enter_pairing</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wb6084.o(i.WB_enter_pairing))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = WB_enter_pairing &rArr; WB_MMI_commend &rArr; uartSendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WB_MMI_commend
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
</UL>

<P><STRONG><a name="[82]"></a>WB_open_call</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wb6084.o(i.WB_open_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = WB_open_call &rArr; WB_MMI_commend &rArr; uartSendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WB_MMI_commend
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
</UL>

<P><STRONG><a name="[83]"></a>WB_play_pause</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wb6084.o(i.WB_play_pause))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = WB_play_pause &rArr; WB_MMI_commend &rArr; uartSendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WB_MMI_commend
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
</UL>

<P><STRONG><a name="[84]"></a>WB_reject_call</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wb6084.o(i.WB_reject_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = WB_reject_call &rArr; WB_MMI_commend &rArr; uartSendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WB_MMI_commend
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
</UL>

<P><STRONG><a name="[85]"></a>WDTInit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, power.o(i.WDTInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WDTInit &rArr; DrvWDT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvWDT_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_TIMER_RESET
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_ENABLE_COUNTING
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_CLEAR_RESET_FLAG
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
</UL>

<P><STRONG><a name="[7]"></a>WDT_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, power.o(i.WDT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WDT_IRQHandler &rArr; WDTwake &rArr; DrvWDT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTwake
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_TIMER_RESET
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>WDTwake</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, power.o(i.WDTwake))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WDTwake &rArr; DrvWDT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvWDT_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvWDT_EnableInt
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_TIMER_RESET
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_ENABLE_COUNTING
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_CLEAR_RESET_FLAG
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IRQHandler
</UL>

<P><STRONG><a name="[40]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dwhp83.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledColorSet
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breathingColor
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getChangeVolume
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangInputVolumeCheck
</UL>

<P><STRONG><a name="[f0]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[f1]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[f2]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[8a]"></a>ack</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, dwhp83.o(i.ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ack
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDwhp83
</UL>

<P><STRONG><a name="[3f]"></a>adcKeyClkInit</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, adckey.o(i.adcKeyClkInit))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Init
</UL>

<P><STRONG><a name="[8c]"></a>adcKeyHook</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, adckey.o(i.adcKeyHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = adcKeyHook &rArr; enterStandby &rArr; powerOff &rArr; outStandby &rArr; powerOn &rArr; ampSendEqs_38 &rArr; ampSetEqDefault &rArr; ampSendCmd_38 &rArr; addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvent
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterStandby
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audioDetect
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adckeyScan
</UL>

<P><STRONG><a name="[8f]"></a>adcKeyInit</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, adckey.o(i.adcKeyInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = adcKeyInit &rArr; GPIO_SET_MODE
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_MODE
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adckeyTaskInit
</UL>

<P><STRONG><a name="[37]"></a>adcKeyRemap</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, adckey.o(i.adcKeyRemap))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adcKeyRemap
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[91]"></a>adcReadKey</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, adckey.o(i.adcReadKey))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adckeyScan
</UL>

<P><STRONG><a name="[92]"></a>adcReadKeyContinue</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, adckey.o(i.adcReadKeyContinue))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adckeyScan
</UL>

<P><STRONG><a name="[26]"></a>adckeyScan</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, adckey.o(i.adckeyScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = adckeyScan &rArr; devStartDealAdcKey &rArr; delStartkey &rArr; enterStandby &rArr; powerOff &rArr; outStandby &rArr; powerOn &rArr; ampSendEqs_38 &rArr; ampSetEqDefault &rArr; ampSendCmd_38 &rArr; addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSetS
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSetR
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSetL
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devStartDealAdcKey
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devStandbyDealAdcKey
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcReadKeyContinue
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcReadKey
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcKeyHook
</UL>
<BR>[Address Reference Count : 2]<UL><LI> adckey.o(i.adckeyScan)
<LI> adckey.o(i.adckeyTaskInit)
</UL>
<P><STRONG><a name="[98]"></a>adckeyTaskInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, adckey.o(i.adckeyTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = adckeyTaskInit &rArr; adcKeyInit &rArr; GPIO_SET_MODE
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_EnableInt
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getATask
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcKeyInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9a]"></a>addI2cChain</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, i2csys.o(i.addI2cChain))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSpirit
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_upgrade_eeprom
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_38
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampGetStatus
</UL>

<P><STRONG><a name="[9b]"></a>ampAddVolume</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, sta339.o(i.ampAddVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ampAddVolume &rArr; ampSetVolume &rArr; ampSendCmd_38 &rArr; addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledColorSet
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSetVolume
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83CuCV
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopATask
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
</UL>

<P><STRONG><a name="[27]"></a>ampDecVolume</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, sta339.o(i.ampDecVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ampDecVolume &rArr; ampSetVolume &rArr; ampSendCmd_38 &rArr; addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledColorSet
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSetVolume
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83CuCV
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopATask
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sta339.o(i.ampAddVolume)
<LI> sta339.o(i.ampDecVolume)
</UL>
<P><STRONG><a name="[23]"></a>ampFlasfLed</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sta339.o(i.ampFlasfLed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ampFlasfLed &rArr; startATask
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sta339.o(i.ampFlasfLed)
<LI> sta339.o(i.ChangInputVolumeCheck)
</UL>
<P><STRONG><a name="[9d]"></a>ampGetStatus</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, sta339.o(i.ampGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ampGetStatus &rArr; addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initI2cDataBlock
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addI2cChain
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_TIMER_RESET
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[a1]"></a>ampInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sta339.o(i.ampInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ampInit
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getATask
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a2]"></a>ampInitAllConf</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, sta339.o(i.ampInitAllConf))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ampInitAllConf &rArr; ampSendCmd_38 &rArr; addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvent
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_38
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_TIMER_RESET
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOn
</UL>

<P><STRONG><a name="[43]"></a>ampMute</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sta339.o(i.ampMute))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ampMute &rArr; ampSendCmd_38 &rArr; addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_38
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterStandby
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputChannel
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangInputVolumeCheck
</UL>

<P><STRONG><a name="[a4]"></a>ampMuteSwitch</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sta339.o(i.ampMuteSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ampMuteSwitch &rArr; changeInputVolumeDown &rArr; startATask
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputVolumeDown
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
</UL>

<P><STRONG><a name="[a6]"></a>ampPowerDown</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sta339.o(i.ampPowerDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ampPowerDown &rArr; ampSendCmd_38 &rArr; addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_38
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOff
</UL>

<P><STRONG><a name="[e1]"></a>ampResumeI2c</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sta339.o(i.ampResumeI2c))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resumeI2c
</UL>

<P><STRONG><a name="[a7]"></a>ampSendCallEqs_38</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, sta339.o(i.ampSendCallEqs_38))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ampSendCallEqs_38 &rArr; ampSetEqDefault &rArr; ampSendCmd_38 &rArr; addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_38
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSetEqDefault
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
</UL>

<P><STRONG><a name="[a3]"></a>ampSendCmd_38</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, sta339.o(i.ampSendCmd_38))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ampSendCmd_38 &rArr; addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initI2cDataBlock
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addI2cChain
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unMute
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendEqs_38
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCallEqs_38
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampMute
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSetS
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSetR
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSetL
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSetVolume
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampPowerDown
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampInitAllConf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampUnMuteBass
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSetEqDefault
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnUpVolume
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnDownVolume
</UL>

<P><STRONG><a name="[a9]"></a>ampSendEqs_38</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, sta339.o(i.ampSendEqs_38))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ampSendEqs_38 &rArr; ampSetEqDefault &rArr; ampSendCmd_38 &rArr; addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_38
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSetEqDefault
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOn
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[a8]"></a>ampSetEqDefault</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, sta339.o(i.ampSetEqDefault))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ampSetEqDefault &rArr; ampSendCmd_38 &rArr; addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_38
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendEqs_38
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCallEqs_38
</UL>

<P><STRONG><a name="[97]"></a>ampSetL</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, sta339.o(i.ampSetL))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ampSetL &rArr; ampSendCmd_38 &rArr; addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_38
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adckeyScan
</UL>

<P><STRONG><a name="[96]"></a>ampSetR</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, sta339.o(i.ampSetR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ampSetR &rArr; ampSendCmd_38 &rArr; addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_38
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adckeyScan
</UL>

<P><STRONG><a name="[95]"></a>ampSetS</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, sta339.o(i.ampSetS))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ampSetS &rArr; ampSendCmd_38 &rArr; addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_38
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adckeyScan
</UL>

<P><STRONG><a name="[47]"></a>ampSetVolume</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sta339.o(i.ampSetVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ampSetVolume &rArr; ampSendCmd_38 &rArr; addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_38
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampDecVolume
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampAddVolume
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterStandby
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOn
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playSFMusicEnd
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangInputVolumeCheck
</UL>

<P><STRONG><a name="[aa]"></a>ampUnMuteBass</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sta339.o(i.ampUnMuteBass))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ampUnMuteBass &rArr; DWHP83UnMute &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83UnMute
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_38
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[cd]"></a>amp_i2c_status_check</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sta339.o(i.amp_i2c_status_check))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[8d]"></a>audioDetect</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, adckey.o(i.audioDetect))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcKeyHook
</UL>

<P><STRONG><a name="[db]"></a>bootLDROM</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, appkey.o(i.bootLDROM))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
</UL>

<P><STRONG><a name="[ab]"></a>breathingColor</STRONG> (Thumb, 182 bytes, Stack size 20 bytes, led.o(i.breathingColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = breathingColor &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[29]"></a>btCheck</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, pt2314.o(i.btCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = btCheck &rArr; startATask
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopATask
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt2314DataResume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pt2314.o(i.btCheck)
</UL>
<P><STRONG><a name="[28]"></a>btCheckDone</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pt2314.o(i.btCheckDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = btCheckDone
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopATask
</UL>
<BR>[Address Reference Count : 3]<UL><LI> pt2314.o(i.btCheck)
<LI> pt2314.o(i.changeInputChannel)
<LI> pt2314.o(i.pt2314DataResume)
</UL>
<P><STRONG><a name="[41]"></a>changeInputChannel</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, pt2314.o(i.changeInputChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = changeInputChannel &rArr; Dwhp83Slave &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unMute
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledColorSet
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampMute
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83Slave
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83CuMuDetect
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvent
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputVolumeUp
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopATask
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_POWER_ON
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangInputVolumeCheck
</UL>

<P><STRONG><a name="[a5]"></a>changeInputVolumeDown</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sta339.o(i.changeInputVolumeDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = changeInputVolumeDown &rArr; startATask
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getChangeVolume
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampMuteSwitch
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[ae]"></a>changeInputVolumeUp</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sta339.o(i.changeInputVolumeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = changeInputVolumeUp &rArr;  ChangInputVolumeCheck (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangInputVolumeCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputChannel
</UL>

<P><STRONG><a name="[b0]"></a>check_coco</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dwhp83.o(i.check_coco))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = check_coco &rArr; readDwhp83 &rArr; i2cStart &rArr; i2cWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDwhp83
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitGpioI2c
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
</UL>

<P><STRONG><a name="[b1]"></a>clr</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uart.o(i.clr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = clr &rArr; iputc
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iputc
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendStartInfo
</UL>

<P><STRONG><a name="[78]"></a>dealFlashEvent</STRONG> (Thumb, 544 bytes, Stack size 24 bytes, i2s_spi.o(i.dealFlashEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dealFlashEvent &rArr; spiFlashPageWrite &rArr; spiSendWord
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPageWrite
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSendWord
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_CLR_TXFIFO
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_CLR_RXFIFO
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_IRQHandler
</UL>

<P><STRONG><a name="[53]"></a>dealMuContainer</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, dwhp83.o(i.dealMuContainer))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dealMuContainer &rArr; DWPH83VolumeChange &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWPH83VolumeChange
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83SpiritTask
</UL>

<P><STRONG><a name="[70]"></a>dealPowerKey</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, power.o(i.dealPowerKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dealPowerKey &rArr; sysDelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Init
</UL>

<P><STRONG><a name="[b5]"></a>delStandbytkey</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, appkey.o(i.delStandbytkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = delStandbytkey &rArr; outStandby &rArr; powerOn &rArr; ampSendEqs_38 &rArr; ampSetEqDefault &rArr; ampSendCmd_38 &rArr; addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devStandbyDealAdcKey
</UL>

<P><STRONG><a name="[b7]"></a>delStartkey</STRONG> (Thumb, 938 bytes, Stack size 24 bytes, appkey.o(i.delStartkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = delStartkey &rArr; enterStandby &rArr; powerOff &rArr; outStandby &rArr; powerOn &rArr; ampSendEqs_38 &rArr; ampSetEqDefault &rArr; ampSendCmd_38 &rArr; addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unMute
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playMusic
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledColorSet
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isDwhp83Linked
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendEqs_38
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCallEqs_38
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampMuteSwitch
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampMute
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampDecVolume
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampAddVolume
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WB_reject_call
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WB_play_pause
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WB_open_call
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WB_enter_pairing
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WB_close_call
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83Slave
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83Master
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83GetStatus
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83CuMuDetect
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvent
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterStandby
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devStartDealAdcKey
</UL>

<P><STRONG><a name="[94]"></a>devStandbyDealAdcKey</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, adckey.o(i.devStandbyDealAdcKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = devStandbyDealAdcKey &rArr; delStandbytkey &rArr; outStandby &rArr; powerOn &rArr; ampSendEqs_38 &rArr; ampSetEqDefault &rArr; ampSendCmd_38 &rArr; addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStandbytkey
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adckeyScan
</UL>

<P><STRONG><a name="[93]"></a>devStartDealAdcKey</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, adckey.o(i.devStartDealAdcKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = devStartDealAdcKey &rArr; delStartkey &rArr; enterStandby &rArr; powerOff &rArr; outStandby &rArr; powerOn &rArr; ampSendEqs_38 &rArr; ampSetEqDefault &rArr; ampSendCmd_38 &rArr; addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adckeyScan
</UL>

<P><STRONG><a name="[ba]"></a>doPowerOff</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, power.o(i.doPowerOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = doPowerOff &rArr; ledColorSet &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledColorSet
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvWDT_DisableInt
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOff
</UL>

<P><STRONG><a name="[bb]"></a>dps</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, uart.o(i.dps))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dps &rArr; iputs
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iputs
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendStartInfo
</UL>

<P><STRONG><a name="[2a]"></a>dwph83Check</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dwhp83.o(i.dwph83Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dwph83Check &rArr; Dwhp83Slave &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83Slave
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83CuMuDetect
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setConfig
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
</UL>
<BR>[Address Reference Count : 3]<UL><LI> dwhp83.o(i.dwph83Check)
<LI> pt2314.o(i.changeInputChannel)
<LI> pt2314.o(i.pt2314DataResume)
</UL>
<P><STRONG><a name="[8e]"></a>enterStandby</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, power.o(i.enterStandby))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = enterStandby &rArr; powerOff &rArr; outStandby &rArr; powerOn &rArr; ampSendEqs_38 &rArr; ampSetEqDefault &rArr; ampSendCmd_38 &rArr; addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playMusic
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampMute
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setConfig
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSetVolume
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOff
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcKeyHook
</UL>

<P><STRONG><a name="[4e]"></a>exitGpioI2c</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dwhp83.o(i.exitGpioI2c))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = exitGpioI2c
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83Slave
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83Master
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83GetStatus
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83CuMuDetect
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_coco
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83FixedCoCo
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWPH83VolumeChange
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83UnMute
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83SendCmd
</UL>

<P><STRONG><a name="[55]"></a>getATask</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, systimertask.o(i.getATask))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adckeyTaskInit
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWPH83Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt2314Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTaskInit
</UL>

<P><STRONG><a name="[af]"></a>getChangeVolume</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, sta339.o(i.getChangeVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = getChangeVolume &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputVolumeDown
</UL>

<P><STRONG><a name="[be]"></a>getMuAddr</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dwhp83.o(i.getMuAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = getMuAddr &rArr; sysDelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOn
</UL>

<P><STRONG><a name="[bf]"></a>i2cAck</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, dwhp83.o(i.i2cAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = i2cAck
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDwhp83
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
</UL>

<P><STRONG><a name="[c0]"></a>i2cReadByte</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, dwhp83.o(i.i2cReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = i2cReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDwhp83
</UL>

<P><STRONG><a name="[c1]"></a>i2cRestart</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, dwhp83.o(i.i2cRestart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = i2cRestart
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDwhp83
</UL>

<P><STRONG><a name="[7c]"></a>i2cSpirit</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, i2csys.o(i.i2cSpirit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readI2cChain
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_START
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addI2cChain
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[c3]"></a>i2cStart</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, dwhp83.o(i.i2cStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = i2cStart &rArr; i2cWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayUs
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWriteByte
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cAck
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_MODE
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDwhp83
</UL>

<P><STRONG><a name="[c6]"></a>i2cStop</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dwhp83.o(i.i2cStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2cStop
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDwhp83
</UL>

<P><STRONG><a name="[c7]"></a>i2cSysInit</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, i2csys.o(i.i2cSysInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = i2cSysInit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_MODE
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOn
</UL>

<P><STRONG><a name="[c5]"></a>i2cWriteByte</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, dwhp83.o(i.i2cWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = i2cWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDwhp83
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
</UL>

<P><STRONG><a name="[c9]"></a>i2sStart</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, i2s_spi.o(i.i2sStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2sStart
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2S_EnableInt
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_CLR_TXFIFO
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_CLR_RXFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOn
</UL>

<P><STRONG><a name="[9e]"></a>initI2cDataBlock</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, i2csys.o(i.initI2cDataBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = initI2cDataBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_upgrade_eeprom
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_38
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampGetStatus
</UL>

<P><STRONG><a name="[7d]"></a>iputc</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, uart.o(i.iputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = iputc
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[bc]"></a>iputs</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, uart.o(i.iputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = iputs
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendStartInfo
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartdecodeH
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDevInfo
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dps
</UL>

<P><STRONG><a name="[b9]"></a>isDwhp83Linked</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dwhp83.o(i.isDwhp83Linked))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[7a]"></a>ledColorSet</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, led.o(i.ledColorSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ledColorSet &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampDecVolume
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampAddVolume
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputChannel
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt2314DataResume
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doPowerOff
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRWU_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledInit
</UL>

<P><STRONG><a name="[71]"></a>ledInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, led.o(i.ledInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ledInit &rArr; timerInit &rArr; DrvTIMER_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledColorSet
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_MODE
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Init
</UL>

<P><STRONG><a name="[2d]"></a>ledTask</STRONG> (Thumb, 1204 bytes, Stack size 24 bytes, led.o(i.ledTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ledTask &rArr; ampSendEqs_38 &rArr; ampSetEqDefault &rArr; ampSendCmd_38 &rArr; addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unMute
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playMusic
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledColorSet
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isDwhp83Linked
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendEqs_38
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampMute
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83CuMuDetect
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvent
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83CuCV
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83UnMute
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputVolumeDown
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_i2c_status_check
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampUnMuteBass
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampGetStatus
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breathingColor
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DECT_DC
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUX_DETECT
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btHangUpSignalProcess
</UL>
<BR>[Address Reference Count : 2]<UL><LI> led.o(i.ledTask)
<LI> led.o(i.ledTaskInit)
</UL>
<P><STRONG><a name="[d0]"></a>ledTaskInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, led.o(i.ledTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ledTaskInit &rArr; startATask
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getATask
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[df]"></a>logClose</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, datalog.o(i.logClose))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOff
</UL>

<P><STRONG><a name="[7b]"></a>logEvent</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, datalog.o(i.logEvent))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcKeyHook
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputChannel
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt2314DataResume
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_38
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampInitAllConf
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOff
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playSFMusicEnd
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1f]"></a>main</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = main &rArr; outStandby &rArr; powerOn &rArr; ampSendEqs_38 &rArr; ampSetEqDefault &rArr; ampSendCmd_38 &rArr; addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPageWrite
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adckeyTaskInit
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWPH83Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartdecodeH
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt2314Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iputs
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampInit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Erase_Page_Data
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTaskInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry8.o(.ARM.Collect$$$$00000009)
</UL>
<P><STRONG><a name="[d4]"></a>nack</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, dwhp83.o(i.nack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nack
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDwhp83
</UL>

<P><STRONG><a name="[b6]"></a>outStandby</STRONG> (Thumb, 462 bytes, Stack size 24 bytes, power.o(i.outStandby))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = outStandby &rArr; powerOn &rArr; ampSendEqs_38 &rArr; ampSetEqDefault &rArr; ampSendCmd_38 &rArr; addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playMusic
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledColorSet
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83Slave
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83CuMuDetect
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_upgrade_eeprom
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootLDROM
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcReadKey
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resumeI2c
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSetVolume
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_coco
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83FixedCoCo
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83MuPowerOn
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendStartInfo
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_38
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOn
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTInit
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterStandby
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStandbytkey
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOff
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>playMusic</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, i2s_spi.o(i.playMusic))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterStandby
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[2b]"></a>playSFMusicEnd</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, i2s_spi.o(i.playSFMusicEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = playSFMusicEnd &rArr; DWHP83UnMute &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvent
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSetVolume
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83UnMute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2s_spi.o(i.dealFlashEvent)
</UL>
<P><STRONG><a name="[44]"></a>powerOff</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, power.o(i.powerOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = powerOff &rArr; outStandby &rArr; powerOn &rArr; ampSendEqs_38 &rArr; ampSetEqDefault &rArr; ampSendCmd_38 &rArr; addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logClose
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvent
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopFlashLed
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampPowerDown
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doPowerOff
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_MODE
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterStandby
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangInputVolumeCheck
</UL>

<P><STRONG><a name="[d9]"></a>powerOn</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, power.o(i.powerOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = powerOn &rArr; ampSendEqs_38 &rArr; ampSetEqDefault &rArr; ampSendCmd_38 &rArr; addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unMute
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendEqs_38
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSysInit
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSetVolume
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMuAddr
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt2314DataResume
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampInitAllConf
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openMcuCtrlPin
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2sStart
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SClkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
</UL>

<P><STRONG><a name="[e0]"></a>pt2314DataResume</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, pt2314.o(i.pt2314DataResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = pt2314DataResume &rArr; ledColorSet &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledColorSet
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvent
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btCheck
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopATask
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOn
</UL>

<P><STRONG><a name="[d1]"></a>pt2314Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pt2314.o(i.pt2314Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pt2314Init
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getATask
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>readDwhp83</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, dwhp83.o(i.readDwhp83))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = readDwhp83 &rArr; i2cStart &rArr; i2cWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayUs
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nack
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWriteByte
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStop
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRestart
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cReadByte
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cAck
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83GetStatus
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83CuMuDetect
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_coco
</UL>

<P><STRONG><a name="[c2]"></a>readI2cChain</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, i2csys.o(i.readI2cChain))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSpirit
</UL>

<P><STRONG><a name="[da]"></a>read_upgrade_eeprom</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, appkey.o(i.read_upgrade_eeprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = read_upgrade_eeprom &rArr; addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initI2cDataBlock
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addI2cChain
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
</UL>

<P><STRONG><a name="[21]"></a>resetHook</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, power.o(i.resetHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = resetHook
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_CLEAR_RESET_FLAG
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(.text)
</UL>
<P><STRONG><a name="[d7]"></a>resumeI2c</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, i2csys.o(i.resumeI2c))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = resumeI2c
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampResumeI2c
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
</UL>

<P><STRONG><a name="[e2]"></a>sendDevInfo</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, uart.o(i.sendDevInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sendDevInfo &rArr; iputs
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iputs
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendStartInfo
</UL>

<P><STRONG><a name="[dd]"></a>sendStartInfo</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, uart.o(i.sendStartInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = sendStartInfo &rArr; sendDevInfo &rArr; iputs
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iputs
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDevInfo
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dps
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
</UL>

<P><STRONG><a name="[bd]"></a>setConfig</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, appkey.o(i.setConfig))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterStandby
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwph83Check
</UL>

<P><STRONG><a name="[d8]"></a>spiFlashInit</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, i2s_spi.o(i.spiFlashInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = spiFlashInit &rArr; spiFlashRead &rArr; spiSendWord
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSPI_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashRead
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
</UL>

<P><STRONG><a name="[b3]"></a>spiFlashPageWrite</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, i2s_spi.o(i.spiFlashPageWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = spiFlashPageWrite &rArr; spiSendWord
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSendWord
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealFlashEvent
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d2]"></a>spiFlashRead</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, i2s_spi.o(i.spiFlashRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = spiFlashRead &rArr; spiSendWord
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSendWord
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashInit
</UL>

<P><STRONG><a name="[46]"></a>startATask</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, systimertask.o(i.startATask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = startATask
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampDecVolume
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampAddVolume
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adckeyTaskInit
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adckeyScan
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwph83Check
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWPH83Init
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83SpiritTask
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputChannel
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btCheck
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt2314DataResume
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputVolumeDown
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTaskInit
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampFlasfLed
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnUpVolume
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnDownVolume
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangInputVolumeCheck
</UL>

<P><STRONG><a name="[4b]"></a>stopFlashLed</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sta339.o(i.stopFlashLed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stopFlashLed
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopATask
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOff
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangInputVolumeCheck
</UL>

<P><STRONG><a name="[4a]"></a>sysDelayMs</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, systimertask.o(i.sysDelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sysDelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_TIMER_RESET
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendEqs_38
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCallEqs_38
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampDecVolume
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampAddVolume
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterStandby
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMuAddr
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwph83Check
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83FixedCoCo
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83SpiritTask
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputChannel
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt2314DataResume
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOn
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOff
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doPowerOff
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRWU_IRQHandler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealPowerKey
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampUnMuteBass
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playSFMusicEnd
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangInputVolumeCheck
</UL>

<P><STRONG><a name="[8b]"></a>sysDelayUs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, systimertask.o(i.sysDelayUs))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDwhp83
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nack
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWriteByte
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStop
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRestart
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cReadByte
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cAck
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitGpioI2c
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack
</UL>

<P><STRONG><a name="[6f]"></a>sysTaskInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, systimertask.o(i.sysTaskInit))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Init
</UL>

<P><STRONG><a name="[cc]"></a>timerInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, led.o(i.timerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = timerInit &rArr; DrvTIMER_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTIMER_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTIMER_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledInit
</UL>

<P><STRONG><a name="[dc]"></a>uartInit</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, uart.o(i.uartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = uartInit &rArr; DrvUART_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUART_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUART_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outStandby
</UL>

<P><STRONG><a name="[7f]"></a>uartSendCmd</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, uart.o(i.uartSendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = uartSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WB_MMI_commend
</UL>

<P><STRONG><a name="[d3]"></a>uartdecodeH</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, uart.o(i.uartdecodeH))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uartdecodeH &rArr; iputs
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iputs
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49]"></a>unMute</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sta339.o(i.unMute))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = unMute &rArr; ampSendCmd_38 &rArr; addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_38
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputChannel
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOn
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangInputVolumeCheck
</UL>

<P><STRONG><a name="[4d]"></a>writeDwhp83</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, dwhp83.o(i.writeDwhp83))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayUs
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWriteByte
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStop
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cAck
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83Slave
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83Master
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83FixedCoCo
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWPH83VolumeChange
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83UnMute
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83SendCmd
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[d]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>CLK_GetHCLKFreq</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, drvi2c.o(i.CLK_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CLK_GetHCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetAPBClockFreq
</UL>

<P><STRONG><a name="[58]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drvi2c.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Init
</UL>

<P><STRONG><a name="[57]"></a>SYS_RESET_IP2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drvi2c.o(i.SYS_RESET_IP2))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Init
</UL>

<P><STRONG><a name="[5a]"></a>SYS_RESET_IP2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drvspi.o(i.SYS_RESET_IP2))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSPI_Init
</UL>

<P><STRONG><a name="[5e]"></a>APBCLK_ENABLE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drvtimer.o(i.APBCLK_ENABLE))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvWDT_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTIMER_Init
</UL>

<P><STRONG><a name="[64]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drvtimer.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvWDT_DisableInt
</UL>

<P><STRONG><a name="[5c]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drvtimer.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvWDT_EnableInt
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTIMER_EnableInt
</UL>

<P><STRONG><a name="[62]"></a>SYS_UnlockReg</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drvtimer.o(i.SYS_UnlockReg))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvWDT_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvWDT_EnableInt
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvWDT_DisableInt
</UL>

<P><STRONG><a name="[63]"></a>WDT_DISABLE_INT</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drvtimer.o(i.WDT_DISABLE_INT))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvWDT_DisableInt
</UL>

<P><STRONG><a name="[60]"></a>SYS_RESET_IP2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drvuart.o(i.SYS_RESET_IP2))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUART_Init
</UL>

<P><STRONG><a name="[36]"></a>ADC_GET_RSLT</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, adckey.o(i.ADC_GET_RSLT))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[90]"></a>GPIO_SET_MODE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, adckey.o(i.GPIO_SET_MODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_SET_MODE
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcKeyInit
</UL>

<P><STRONG><a name="[c4]"></a>GPIO_SET_MODE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dwhp83.o(i.GPIO_SET_MODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_SET_MODE
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
</UL>

<P><STRONG><a name="[c8]"></a>GPIO_SET_MODE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, i2csys.o(i.GPIO_SET_MODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_SET_MODE
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSysInit
</UL>

<P><STRONG><a name="[73]"></a>I2C_CLEAR_SI</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2csys.o(i.I2C_CLEAR_SI))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>

<P><STRONG><a name="[72]"></a>I2C_START</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2csys.o(i.I2C_START))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSpirit
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>

<P><STRONG><a name="[75]"></a>I2S_CLR_RXFIFO</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2s_spi.o(i.I2S_CLR_RXFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealFlashEvent
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2sStart
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SClkInit
</UL>

<P><STRONG><a name="[76]"></a>I2S_CLR_TXFIFO</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2s_spi.o(i.I2S_CLR_TXFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealFlashEvent
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2sStart
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SClkInit
</UL>

<P><STRONG><a name="[77]"></a>I2S_SET_MCK_DIV</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2s_spi.o(i.I2S_SET_MCK_DIV))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SClkInit
</UL>

<P><STRONG><a name="[e3]"></a>SPI_SET_TX_BIT_LEN</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, i2s_spi.o(i.SPI_SET_TX_BIT_LEN))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSendWord
</UL>

<P><STRONG><a name="[b2]"></a>spiSendWord</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, i2s_spi.o(i.spiSendWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spiSendWord
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SET_TX_BIT_LEN
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPageWrite
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealFlashEvent
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashRead
</UL>

<P><STRONG><a name="[ce]"></a>AUX_DETECT</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, led.o(i.AUX_DETECT))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[cf]"></a>DECT_DC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, led.o(i.DECT_DC))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[cb]"></a>GPIO_SET_MODE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, led.o(i.GPIO_SET_MODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_SET_MODE
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledInit
</UL>

<P><STRONG><a name="[2c]"></a>btHangUpSignalProcess</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, led.o(i.btHangUpSignalProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = btHangUpSignalProcess &rArr; ledTask &rArr; ampSendEqs_38 &rArr; ampSetEqDefault &rArr; ampSendCmd_38 &rArr; addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(i.ledTask)
</UL>
<P><STRONG><a name="[3c]"></a>SYS_UnlockReg</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.SYS_UnlockReg))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Init
</UL>

<P><STRONG><a name="[3e]"></a>SysTickInit</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, main.o(i.SysTickInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SysTickInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Init
</UL>

<P><STRONG><a name="[6d]"></a>spiSendWord</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(i.spiSendWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spiSendWord
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Erase_Page_Data
</UL>

<P><STRONG><a name="[d6]"></a>GPIO_SET_MODE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, power.o(i.GPIO_SET_MODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_SET_MODE
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOff
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openMcuCtrlPin
</UL>

<P><STRONG><a name="[79]"></a>SYS_UnlockReg</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, power.o(i.SYS_UnlockReg))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doPowerOff
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTwake
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IRQHandler
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTInit
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRWU_IRQHandler
</UL>

<P><STRONG><a name="[88]"></a>WDT_CLEAR_RESET_FLAG</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, power.o(i.WDT_CLEAR_RESET_FLAG))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetHook
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTwake
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTInit
</UL>

<P><STRONG><a name="[87]"></a>WDT_ENABLE_COUNTING</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, power.o(i.WDT_ENABLE_COUNTING))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTwake
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTInit
</UL>

<P><STRONG><a name="[86]"></a>WDT_TIMER_RESET</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, power.o(i.WDT_TIMER_RESET))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTwake
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IRQHandler
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTInit
</UL>

<P><STRONG><a name="[d5]"></a>openMcuCtrlPin</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, power.o(i.openMcuCtrlPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = openMcuCtrlPin &rArr; GPIO_SET_MODE
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_MODE
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOn
</UL>

<P><STRONG><a name="[ad]"></a>BT_POWER_ON</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pt2314.o(i.BT_POWER_ON))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputChannel
</UL>

<P><STRONG><a name="[ac]"></a>stopATask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pt2314.o(i.stopATask))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputChannel
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btCheckDone
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btCheck
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt2314DataResume
</UL>

<P><STRONG><a name="[24]"></a>ChangInputVolumeCheck</STRONG> (Thumb, 396 bytes, Stack size 24 bytes, sta339.o(i.ChangInputVolumeCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ChangInputVolumeCheck &rArr; powerOff &rArr; outStandby &rArr; powerOn &rArr; ampSendEqs_38 &rArr; ampSetEqDefault &rArr; ampSendCmd_38 &rArr; addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unMute
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampMute
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSetVolume
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputChannel
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopFlashLed
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOff
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnUpVolume
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnDownVolume
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopATask
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputVolumeUp
</UL>
<BR>[Address Reference Count : 4]<UL><LI> sta339.o(i.changeInputVolumeDown)
<LI> sta339.o(i.turnDownVolume)
<LI> sta339.o(i.turnUpVolume)
<LI> sta339.o(i.ChangInputVolumeCheck)
</UL>
<P><STRONG><a name="[e6]"></a>DECT_DC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sta339.o(i.DECT_DC))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnUpVolume
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnDownVolume
</UL>

<P><STRONG><a name="[9f]"></a>SYS_UnlockReg</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sta339.o(i.SYS_UnlockReg))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampInitAllConf
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampGetStatus
</UL>

<P><STRONG><a name="[a0]"></a>WDT_TIMER_RESET</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sta339.o(i.WDT_TIMER_RESET))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampInitAllConf
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampGetStatus
</UL>

<P><STRONG><a name="[42]"></a>stopATask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sta339.o(i.stopATask))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampDecVolume
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampAddVolume
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopFlashLed
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangInputVolumeCheck
</UL>

<P><STRONG><a name="[48]"></a>turnDownVolume</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, sta339.o(i.turnDownVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = turnDownVolume &rArr; ampSendCmd_38 &rArr; addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_38
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DECT_DC
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangInputVolumeCheck
</UL>

<P><STRONG><a name="[45]"></a>turnUpVolume</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, sta339.o(i.turnUpVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = turnUpVolume &rArr; ampSendCmd_38 &rArr; addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_38
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DECT_DC
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangInputVolumeCheck
</UL>

<P><STRONG><a name="[e4]"></a>SYS_UnlockReg</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, systimertask.o(i.SYS_UnlockReg))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
</UL>

<P><STRONG><a name="[e5]"></a>WDT_TIMER_RESET</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, systimertask.o(i.WDT_TIMER_RESET))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
