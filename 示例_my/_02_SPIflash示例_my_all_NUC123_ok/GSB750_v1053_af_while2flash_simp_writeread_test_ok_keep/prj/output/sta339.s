; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--split_sections --debug -c --asm --info=totals -o.\output\sta339.o --depend=.\output\sta339.d --cpu=Cortex-M0 --apcs=interwork -I..\CMSIS\CM0\DeviceSupport\Nuvoton\NUC123Series -I..\CMSIS\CM0\CoreSupport -I..\INC\DrvInc -I..\INC\SysInc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -D__MICROLIB --omf_browse=.\output\sta339.crf ..\AppSrc\sta339.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||i.ChangInputVolumeCheck||, CODE, READONLY, ALIGN=2

ChangInputVolumeCheck PROC
        PUSH     {r3-r7,lr}
        LDR      r0,|L1.396|
        LDRB     r1,[r0,#0]  ; amp_volume_change
        LDR      r0,|L1.400|
        LDR      r5,|L1.396|
        LDRB     r0,[r0,#0]
        MOVS     r4,#0
        SUBS     r5,r5,#5
        CMP      r1,#0xa0
        BEQ      |L1.38|
        ADDS     r1,r5,#5
        LDRB     r2,[r1,#0]  ; amp_volume_change
        CMP      r2,#0xa2
        BEQ      |L1.250|
        MOVS     r0,#0xa0
        STRB     r0,[r1,#0]
        STRB     r4,[r5,#0]
        STRB     r4,[r5,#1]
        B        |L1.340|
|L1.38|
        LDR      r3,|L1.396|
        LDR      r1,|L1.396|
        LDR      r2,|L1.396|
        LDRB     r6,[r5,#2]  ; change_input_state
        ADDS     r3,r3,#0x3b
        SUBS     r1,r1,#5
        ADDS     r2,r2,#3
        LDRB     r7,[r3,#0]
        LDR      r1,[r1,#0x18]
        LDRB     r2,[r2,#2]
        MOVS     r3,r6
        BL       __ARM_common_switch8
        DCB      0x0b,0x0d,0x07,0x0e
        DCB      0x2f,0x4b,0x6f,0x8c
        DCB      0x22,0x1a,0x2f,0x5e
        DCB      0x0d,0x00
        LDR      r0,|L1.396|
        ADDS     r0,r0,#3
        STRB     r7,[r0,#2]
        STRB     r4,[r5,#0]
        BL       changeInputChannel
        POP      {r3-r7,pc}
        LDR      r7,|L1.396|
        ADDS     r7,r7,#3
        MOV      r6,r7
        ADDS     r6,r6,#0x38
        LDRB     r1,[r6,r1]
        CMP      r2,r1
        BHI      |L1.318|
|L1.106|
        BL       stopATask
        LDRB     r1,[r6,#0]  ; amp_treble_tbl
        STRB     r1,[r7,#2]
        B        |L1.210|
        LDR      r7,|L1.396|
        ADDS     r7,r7,#3
        MOV      r6,r7
        ADDS     r6,r6,#0x38
        LDRB     r1,[r6,r1]
        CMP      r2,r1
        BCC      |L1.280|
        B        |L1.106|
        LDR      r1,|L1.396|
        LDR      r0,[r5,#0x10]  ; amp_volume_back
        ADDS     r1,r1,#0x3b
        LDRB     r1,[r1,r0]
        STR      r0,[r5,#0x18]  ; amp_volume
        CMP      r2,r1
        BLS      |L1.152|
        MOVS     r0,#2
        STRB     r0,[r5,#2]
        B        |L1.318|
|L1.152|
        MOVS     r0,#8
        STRB     r0,[r5,#2]
        B        |L1.280|
        CMP      r2,r7
        BNE      |L1.280|
        CMP      r6,#3
        BEQ      |L1.176|
        LDR      r0,|L1.404|
        LDRB     r1,[r0,#0]  ; flash_mode
        CMP      r1,#1
        BEQ      |L1.186|
        B        |L1.202|
|L1.176|
        BL       ampMute
        BL       powerOff
        B        |L1.210|
|L1.186|
        STRB     r4,[r0,#0]
        LDR      r0,|L1.408|
        LDR      r1,[r0,#8]
        LSRS     r1,r1,#1
        LSLS     r1,r1,#1
        STR      r1,[r0,#8]
        LDR      r0,|L1.412|
        STR      r4,[r0,#0]  ; filter_bypass
|L1.202|
        MOVS     r0,#2
        STRB     r0,[r5,#2]
        BL       turnUpVolume
|L1.210|
        STRB     r4,[r5,#0]
        POP      {r3-r7,pc}
        CMP      r2,r7
        BNE      |L1.244|
        STRB     r4,[r5,#1]
        BL       ampMute
        STRB     r4,[r5,#0]
        LDR      r3,|L1.416|
        MOVS     r2,#0
        MOVS     r1,#2
        LDRB     r0,[r5,#4]  ; amp_id
        BL       startATask
        MOVS     r0,#1
        STR      r0,[r5,#0x14]  ; soft_mute
        B        |L1.340|
|L1.244|
        MOVS     r0,#1
        STRB     r0,[r5,#1]
        B        |L1.280|
|L1.250|
        B        |L1.384|
        CMP      r2,r7
        BNE      |L1.274|
        STR      r4,[r5,#0x14]  ; soft_mute
        STRB     r4,[r5,#1]
        BL       ampMute
        LDR      r0,[r5,#0x18]  ; amp_volume
        BL       ampSetVolume
        STRB     r4,[r5,#0]
        B        |L1.340|
|L1.274|
        MOVS     r0,#1
        STRB     r0,[r5,#1]
        STR      r0,[r5,#0x14]  ; soft_mute
|L1.280|
        BL       turnDownVolume
        POP      {r3-r7,pc}
        LDR      r6,|L1.396|
        ADDS     r6,r6,#0x3b
        CMP      r2,r7
        BNE      |L1.312|
        STRB     r4,[r5,#1]
        BL       unMute
        MOVS     r0,#1
        STRB     r0,[r5,#1]
        MOVS     r0,#2
        BL       sysDelayMs
        B        |L1.318|
|L1.312|
        LDRB     r0,[r6,r1]
        CMP      r2,r0
        BLS      |L1.324|
|L1.318|
        BL       turnUpVolume
        POP      {r3-r7,pc}
|L1.324|
        BL       stopFlashLed
        STRB     r4,[r5,#1]
        LDR      r0,|L1.396|
        LDRB     r1,[r6,#0]  ; amp_treble_tbl
        STRB     r1,[r0,#2]
        STRB     r4,[r5,#0]
        STR      r4,[r5,#0x14]  ; soft_mute
|L1.340|
        STRB     r4,[r5,#2]
        POP      {r3-r7,pc}
        LDR      r0,|L1.396|
        ADDS     r0,r0,#3
        CMP      r2,r7
        BEQ      |L1.358|
        LDR      r1,[r5,#0x14]  ; soft_mute
        CMP      r1,#1
        BNE      |L1.244|
|L1.358|
        STRB     r4,[r5,#1]
        STRB     r7,[r0,#2]
        BL       unMute
        STRB     r4,[r5,#0]
        MOVS     r0,#2
        STRB     r0,[r5,#2]
        LDR      r0,|L1.400|
        MOVS     r2,#0
        LDR      r3,|L1.420|
        MOVS     r1,#3
        LDRB     r0,[r0,#0]  ; pt2314_id_CIC
        B        |L1.390|
|L1.384|
        LDR      r3,|L1.420|
        MOVS     r2,#0
        MOVS     r1,#1
|L1.390|
        BL       startATask
        POP      {r3-r7,pc}
        ENDP

|L1.396|
        DCD      ||.data||+0x5
|L1.400|
        DCD      pt2314_id_CIC
|L1.404|
        DCD      flash_mode
|L1.408|
        DCD      0x40130000
|L1.412|
        DCD      filter_bypass
|L1.416|
        DCD      ampFlasfLed
|L1.420|
        DCD      ChangInputVolumeCheck

        AREA ||i.DECT_DC||, CODE, READONLY, ALIGN=2

DECT_DC PROC
        LDR      r0,|L2.16|
        LDR      r0,[r0,#0]
        CMP      r0,#0
        BEQ      |L2.12|
        MOVS     r0,#0
        BX       lr
|L2.12|
        MOVS     r0,#1
        BX       lr
        ENDP

|L2.16|
        DCD      0x500042a8

        AREA ||i.SYS_UnlockReg||, CODE, READONLY, ALIGN=2

SYS_UnlockReg PROC
        LDR      r0,|L3.16|
        MOVS     r1,#0x59
        STR      r1,[r0,#0]
        MOVS     r1,#0x16
        STR      r1,[r0,#0]
        MOVS     r1,#0x88
        STR      r1,[r0,#0]
        BX       lr
        ENDP

|L3.16|
        DCD      0x50000100

        AREA ||i.WDT_TIMER_RESET||, CODE, READONLY, ALIGN=2

WDT_TIMER_RESET PROC
        LDR      r0,|L4.12|
        LDR      r1,[r0,#0]
        MOVS     r2,#1
        ORRS     r1,r1,r2
        STR      r1,[r0,#0]
        BX       lr
        ENDP

|L4.12|
        DCD      0x40004000

        AREA ||i.ampAddVolume||, CODE, READONLY, ALIGN=2

ampAddVolume PROC
        PUSH     {r4,lr}
        LDR      r4,|L5.112|
        LDRB     r0,[r4,#0]  ; amp_volume_lock
        LDRB     r1,[r4,#1]  ; amp_lock
        ORRS     r0,r0,r1
        BNE      |L5.96|
        MOV      r0,r4
        ADDS     r0,r0,#8
        LDRB     r1,[r0,#0]  ; amp_status
        SUBS     r0,r0,#8
        LDRB     r0,[r0,#4]
        CMP      r1,#0xa2
        BEQ      |L5.98|
        LDR      r1,[r4,#0x18]  ; amp_volume
        CMP      r1,#0x1f
        BCS      |L5.70|
        ADDS     r1,r1,#1
        STR      r1,[r4,#0x18]  ; amp_volume
        BL       stopATask
        LDR      r0,[r4,#0x18]  ; amp_volume
        BL       ampSetVolume
        BL       DWP83CuCV
        MOVS     r0,#0
        BL       ledColorSet
        MOVS     r0,#0x64
        BL       sysDelayMs
        LDR      r0,|L5.116|
        LDRB     r0,[r0,#0]  ; state_color
        BL       ledColorSet
|L5.70|
        LDR      r0,|L5.120|
        LDRB     r0,[r0,#0]  ; dev_input
        CMP      r0,#2
        BNE      |L5.96|
        LDR      r0,|L5.124|
        LDRB     r0,[r0,#0]  ; dwhp83_type
        CMP      r0,#0xa0
        BEQ      |L5.96|
        LDR      r0,|L5.128|
        MOVS     r2,#2
        LDR      r1,[r0,#0]  ; Dwhp83_flag
        ORRS     r1,r1,r2
        STR      r1,[r0,#0]  ; Dwhp83_flag
|L5.96|
        POP      {r4,pc}
|L5.98|
        LDR      r3,|L5.132|
        MOVS     r2,#0
        MOVS     r1,#2
        BL       startATask
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L5.112|
        DCD      ||.data||
|L5.116|
        DCD      state_color
|L5.120|
        DCD      dev_input
|L5.124|
        DCD      dwhp83_type
|L5.128|
        DCD      Dwhp83_flag
|L5.132|
        DCD      ampDecVolume

        AREA ||i.ampDecVolume||, CODE, READONLY, ALIGN=2

ampDecVolume PROC
        PUSH     {r4,lr}
        LDR      r4,|L6.112|
        LDRB     r0,[r4,#0]  ; amp_volume_lock
        LDRB     r1,[r4,#1]  ; amp_lock
        ORRS     r0,r0,r1
        BNE      |L6.96|
        MOV      r0,r4
        ADDS     r0,r0,#8
        LDRB     r1,[r0,#0]  ; amp_status
        SUBS     r0,r0,#8
        LDRB     r0,[r0,#4]
        CMP      r1,#0xa2
        BEQ      |L6.98|
        LDR      r1,[r4,#0x18]  ; amp_volume
        CMP      r1,#0
        BEQ      |L6.70|
        SUBS     r1,r1,#1
        STR      r1,[r4,#0x18]  ; amp_volume
        BL       stopATask
        LDR      r0,[r4,#0x18]  ; amp_volume
        BL       ampSetVolume
        BL       DWP83CuCV
        MOVS     r0,#0
        BL       ledColorSet
        MOVS     r0,#0x64
        BL       sysDelayMs
        LDR      r0,|L6.116|
        LDRB     r0,[r0,#0]  ; state_color
        BL       ledColorSet
|L6.70|
        LDR      r0,|L6.120|
        LDRB     r0,[r0,#0]  ; dev_input
        CMP      r0,#2
        BNE      |L6.96|
        LDR      r0,|L6.124|
        LDRB     r0,[r0,#0]  ; dwhp83_type
        CMP      r0,#0xa0
        BEQ      |L6.96|
        LDR      r0,|L6.128|
        MOVS     r2,#2
        LDR      r1,[r0,#0]  ; Dwhp83_flag
        ORRS     r1,r1,r2
        STR      r1,[r0,#0]  ; Dwhp83_flag
|L6.96|
        POP      {r4,pc}
|L6.98|
        LDR      r3,|L6.132|
        MOVS     r2,#0
        MOVS     r1,#2
        BL       startATask
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L6.112|
        DCD      ||.data||
|L6.116|
        DCD      state_color
|L6.120|
        DCD      dev_input
|L6.124|
        DCD      dwhp83_type
|L6.128|
        DCD      Dwhp83_flag
|L6.132|
        DCD      ampDecVolume

        AREA ||i.ampEQbypass||, CODE, READONLY, ALIGN=1

ampEQbypass PROC
        PUSH     {r4,lr}
        MOVS     r0,#0xe
        BL       ampGetCmd_38
        MOVS     r4,#2
        ORRS     r0,r0,r4
        MOV      r1,r0
        MOVS     r0,#0xe
        BL       ampSendCmd_38
        MOVS     r0,#0xf
        BL       ampGetCmd_38
        ORRS     r0,r0,r4
        MOV      r1,r0
        MOVS     r0,#0xf
        BL       ampSendCmd_38
        MOVS     r0,#0x10
        BL       ampGetCmd_38
        ORRS     r0,r0,r4
        MOV      r1,r0
        MOVS     r0,#0x10
        BL       ampSendCmd_38
        POP      {r4,pc}
        ENDP


        AREA ||i.ampEQon||, CODE, READONLY, ALIGN=1

ampEQon PROC
        PUSH     {r4,lr}
        MOVS     r0,#0xe
        BL       ampGetCmd_38
        MOVS     r4,#0xfd
        ANDS     r0,r0,r4
        MOV      r1,r0
        MOVS     r0,#0xe
        BL       ampSendCmd_38
        MOVS     r0,#0xf
        BL       ampGetCmd_38
        ANDS     r0,r0,r4
        MOV      r1,r0
        MOVS     r0,#0xf
        BL       ampSendCmd_38
        MOVS     r0,#0x10
        BL       ampGetCmd_38
        ANDS     r0,r0,r4
        MOV      r1,r0
        MOVS     r0,#0x10
        BL       ampSendCmd_38
        POP      {r4,pc}
        ENDP


        AREA ||i.ampFlasfDD||, CODE, READONLY, ALIGN=2

ampFlasfDD PROC
        PUSH     {r4,lr}
        MOVS     r0,#1
        BL       playMusic
        LDR      r0,|L9.32|
        MOVS     r1,#0xff
        LDR      r3,|L9.28|
        MOVS     r2,#0
        ADDS     r1,r1,#0x2d
        LDRB     r0,[r0,#4]  ; amp_id
        BL       startATask
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L9.28|
        DCD      stopAmpDD
|L9.32|
        DCD      ||.data||

        AREA ||i.ampFlasfLed||, CODE, READONLY, ALIGN=2

ampFlasfLed PROC
        PUSH     {r4,lr}
        LDR      r1,|L10.28|
        MOVS     r0,#8
        STR      r0,[r1,#0]  ; led_flash
        LDR      r0,|L10.36|
        MOVS     r1,#0x7d
        LDR      r3,|L10.32|
        MOVS     r2,#0
        LSLS     r1,r1,#3
        LDRB     r0,[r0,#4]  ; amp_id
        BL       startATask
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L10.28|
        DCD      led_flash
|L10.32|
        DCD      ampFlasfLed
|L10.36|
        DCD      ||.data||

        AREA ||i.ampGetCmd_38||, CODE, READONLY, ALIGN=2

ampGetCmd_38 PROC
        PUSH     {r2-r6,lr}
        MOV      r5,r0
        MOVS     r0,#1
        LDR      r4,|L11.64|
        MOV      r2,r0
        STR      r0,[sp,#0]
        MOVS     r3,#2
        MOVS     r1,#0x38
        STR      r4,[sp,#4]
        LDR      r0,|L11.68|
        BL       initI2cDataBlock
        STRB     r5,[r4,#1]
        MOVS     r0,#0
        STRB     r0,[r4,#2]
        MOVS     r0,#0xa2
        STRB     r0,[r4,#0]
        MOVS     r1,#0
        LDR      r0,|L11.68|
        BL       addI2cChain
|L11.42|
        LDRB     r0,[r4,#0]  ; amp_status
        CMP      r0,#0xa2
        BEQ      |L11.42|
        LDRB     r0,[r4,#0]  ; amp_status
        CMP      r0,#0xa3
        BNE      |L11.60|
        MOVS     r0,#0x49
        BL       logEvent
|L11.60|
        LDRB     r0,[r4,#2]  ; amp_status
        POP      {r2-r6,pc}
        ENDP

|L11.64|
        DCD      ||.data||+0x8
|L11.68|
        DCD      ||.bss||

        AREA ||i.ampGetStatus||, CODE, READONLY, ALIGN=2

ampGetStatus PROC
        PUSH     {r1-r7,lr}
        MOVS     r4,#0
        LDR      r6,|L12.224|
        MOV      r5,r4
        MOV      r7,r4
|L12.10|
        STRB     r4,[r6,#1]
        STRB     r7,[r6,#2]
        MOVS     r0,#0xa2
        STRB     r0,[r6,#0]
        MOVS     r0,#1
        MOV      r2,r0
        STR      r0,[sp,#0]
        MOVS     r3,#2
        MOVS     r1,#0x38
        STR      r6,[sp,#4]
        LDR      r0,|L12.228|
        BL       initI2cDataBlock
        MOVS     r1,#0
        LDR      r0,|L12.228|
        BL       addI2cChain
|L12.44|
        LDRB     r0,[r6,#0]  ; amp_status
        CMP      r0,#0xa2
        BEQ      |L12.44|
        LDR      r1,|L12.228|
        LDRB     r0,[r6,#2]  ; amp_status
        ADDS     r1,r1,#0x10
        STRB     r0,[r1,r4]
        CMP      r4,#6
        BEQ      |L12.168|
        CMP      r4,#8
        BEQ      |L12.192|
        CMP      r4,#9
        BEQ      |L12.192|
        CMP      r4,#0xa
        BEQ      |L12.192|
        LDR      r1,|L12.224|
        LSLS     r2,r4,#1
        ADDS     r1,r1,#0x78
        ADDS     r1,r2,r1
        LDRB     r1,[r1,#1]
        CMP      r0,r1
        BEQ      |L12.90|
|L12.88|
        MOVS     r5,#1
|L12.90|
        BL       SYS_UnlockReg
        BL       WDT_TIMER_RESET
        LDR      r0,|L12.232|
        STR      r7,[r0,#0]
        ADDS     r4,r4,#1
        CMP      r4,#0x16
        BCC      |L12.10|
        MOVS     r0,#0x2d
        STRB     r0,[r6,#1]
        STRB     r7,[r6,#2]
        MOVS     r0,#0xa2
        STRB     r0,[r6,#0]
        MOVS     r0,#1
        MOV      r2,r0
        STR      r0,[sp,#0]
        MOVS     r3,#2
        MOVS     r1,#0x38
        STR      r6,[sp,#4]
        LDR      r0,|L12.228|
        BL       initI2cDataBlock
        MOVS     r1,#0
        LDR      r0,|L12.228|
        BL       addI2cChain
|L12.144|
        LDRB     r0,[r6,#0]  ; amp_status
        CMP      r0,#0xa2
        BEQ      |L12.144|
        LDR      r1,|L12.228|
        LDRB     r0,[r6,#2]  ; amp_status
        ADDS     r1,r1,#0x10
        STRB     r0,[r1,#0x16]
        CMP      r0,#0x7f
        BEQ      |L12.164|
        MOVS     r5,#1
|L12.164|
        MOV      r0,r5
        POP      {r1-r7,pc}
|L12.168|
        LDR      r0,|L12.224|
        SUBS     r0,r0,#8
        LDRB     r0,[r0,#3]  ; amp_reg_mute
        CMP      r0,#0
        LDRB     r0,[r1,#6]
        BEQ      |L12.186|
        CMP      r0,#0x1e
        BNE      |L12.88|
        B        |L12.90|
|L12.186|
        CMP      r0,#0x10
        BNE      |L12.88|
        B        |L12.90|
|L12.192|
        LDR      r1,|L12.224|
        LSLS     r2,r4,#1
        ADDS     r1,r1,#0x78
        ADDS     r1,r2,r1
        LDRB     r1,[r1,#1]
        CMP      r0,r1
        BCC      |L12.88|
        CMP      r0,#0xdf
        BLS      |L12.90|
        LDR      r0,|L12.224|
        SUBS     r0,r0,#8
        LDR      r0,[r0,#0x18]  ; amp_volume
        CMP      r0,#0
        BNE      |L12.88|
        B        |L12.90|
        ENDP

        DCW      0x0000
|L12.224|
        DCD      ||.data||+0x8
|L12.228|
        DCD      ||.bss||
|L12.232|
        DCD      0x50000100

        AREA ||i.ampInit||, CODE, READONLY, ALIGN=2

ampInit PROC
        PUSH     {r4,lr}
        BL       getATask
        LDR      r1,|L13.12|
        STRB     r0,[r1,#4]
        POP      {r4,pc}
        ENDP

|L13.12|
        DCD      ||.data||

        AREA ||i.ampInitAllConf||, CODE, READONLY, ALIGN=2

ampInitAllConf PROC
        PUSH     {r3-r7,lr}
        MOVS     r4,#0
        MOVS     r0,#0x46
        BL       logEvent
        LDR      r5,|L14.68|
        LDR      r7,|L14.72|
        MOVS     r6,#0
|L14.16|
        ADDS     r0,r5,r4
        LDRB     r1,[r0,#1]
        LDRB     r0,[r5,r4]
        BL       ampSendCmd_38
        ADDS     r4,r4,#2
        BL       SYS_UnlockReg
        BL       WDT_TIMER_RESET
        STR      r6,[r7,#0]
        CMP      r4,#0x58
        BCC      |L14.16|
        MOVS     r1,#0xdd
        MOVS     r0,#5
        BL       ampSendCmd_38
        LDR      r0,|L14.68|
        SUBS     r0,r0,#0x78
        LDRB     r0,[r0,#0]  ; amp_status
        CMP      r0,#0xa0
        BNE      |L14.66|
        MOVS     r0,#0x47
        BL       logEvent
|L14.66|
        POP      {r3-r7,pc}
        ENDP

|L14.68|
        DCD      ||.data||+0x80
|L14.72|
        DCD      0x50000100

        AREA ||i.ampMute||, CODE, READONLY, ALIGN=2

ampMute PROC
        PUSH     {r4,lr}
        LDR      r1,|L15.20|
        MOVS     r0,#1
        STRB     r0,[r1,#3]
        MOVS     r1,#0x1e
        MOVS     r0,#6
        BL       ampSendCmd_38
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L15.20|
        DCD      ||.data||

        AREA ||i.ampMuteBass||, CODE, READONLY, ALIGN=2

ampMuteBass PROC
        PUSH     {r4,lr}
        MOVS     r0,#5
        BL       sysDelayMs
        BL       DWHP83Mute
        MOVS     r0,#5
        BL       sysDelayMs
        MOVS     r1,#0x18
        MOVS     r0,#6
        BL       ampSendCmd_38
        MOVS     r1,#0x20
        MOVS     r0,#0xc
        BL       ampSendCmd_38
        LDR      r0,|L16.48|
        LDR      r1,|L16.48|
        LDRB     r0,[r0,#0]  ; amp_treble_tbl
        SUBS     r1,r1,#0x38
        STRB     r0,[r1,#2]
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L16.48|
        DCD      ||.data||+0x40

        AREA ||i.ampMuteSwitch||, CODE, READONLY, ALIGN=2

ampMuteSwitch PROC
        PUSH     {r4,lr}
        LDR      r0,|L17.36|
        LDR      r1,[r0,#0x18]  ; amp_volume
        CMP      r1,#0
        BNE      |L17.12|
        STR      r1,[r0,#0x14]  ; soft_mute
|L17.12|
        LDRB     r1,[r0,#1]  ; amp_lock
        CMP      r1,#0
        BNE      |L17.30|
        LDR      r0,[r0,#0x14]  ; soft_mute
        CMP      r0,#0
        BEQ      |L17.32|
        MOVS     r0,#5
|L17.26|
        BL       changeInputVolumeDown
|L17.30|
        POP      {r4,pc}
|L17.32|
        MOVS     r0,#4
        B        |L17.26|
        ENDP

|L17.36|
        DCD      ||.data||

        AREA ||i.ampPowerDown||, CODE, READONLY, ALIGN=1

ampPowerDown PROC
        PUSH     {r4,lr}
        MOVS     r1,#0x7d
        MOVS     r0,#5
        BL       ampSendCmd_38
        POP      {r4,pc}
        ENDP


        AREA ||i.ampResumeI2c||, CODE, READONLY, ALIGN=2

ampResumeI2c PROC
        LDR      r0,|L19.24|
        LDRB     r1,[r0,#4]  ; amp_i2c_block
        STRB     r1,[r0,#3]
        LDR      r1,|L19.28|
        MOVS     r0,#0xa0
        STRB     r0,[r1,#0]
        MOVS     r0,#0
        SUBS     r1,r1,#8
        STRB     r0,[r1,#1]
        STRB     r0,[r1,#0]
        BX       lr
        ENDP

        DCW      0x0000
|L19.24|
        DCD      ||.bss||
|L19.28|
        DCD      ||.data||+0x8

        AREA ||i.ampSendCallEqs_38||, CODE, READONLY, ALIGN=2

ampSendCallEqs_38 PROC
        PUSH     {r3-r7,lr}
        MOV      r5,r1
        CMP      r0,#0x3f
        BHI      |L20.124|
        CMP      r5,#0x3f
        BHI      |L20.124|
        CMP      r0,r5
        BHI      |L20.124|
        MOV      r4,r0
        LDR      r6,|L20.128|
        B        |L20.42|
|L20.22|
        LSLS     r0,r4,#2
        ADDS     r2,r0,r6
        ADDS     r1,r4,#4
        MOV      r0,r4
        BL       ampSetEqDefault
        ADDS     r4,r4,#5
        MOVS     r0,#2
        BL       sysDelayMs
|L20.42|
        CMP      r4,#0x32
        BCC      |L20.22|
        MOVS     r0,#0x14
        BL       sysDelayMs
        MOVS     r1,#0
        MOVS     r0,#0x31
        BL       ampSendCmd_38
        MOVS     r4,#0x32
        B        |L20.120|
|L20.64|
        UXTB     r1,r4
        MOVS     r0,#0x16
        BL       ampSendCmd_38
        LSLS     r0,r4,#2
        ADDS     r1,r0,r6
        LDR      r0,|L20.132|
        LDR      r1,[r1,#0]
        MOV      r7,r0
        STR      r1,[r0,#0x1c]  ; cfg_data
        ADDS     r7,r7,#0x1c
        LDRB     r1,[r7,#2]  ; cfg_data
        MOVS     r0,#0x17
        BL       ampSendCmd_38
        LDRB     r1,[r7,#1]  ; cfg_data
        MOVS     r0,#0x18
        BL       ampSendCmd_38
        LDRB     r1,[r7,#0]  ; cfg_data
        MOVS     r0,#0x19
        BL       ampSendCmd_38
        MOVS     r1,#1
        MOVS     r0,#0x26
        BL       ampSendCmd_38
        ADDS     r4,r4,#1
|L20.120|
        CMP      r4,r5
        BLS      |L20.64|
|L20.124|
        POP      {r3-r7,pc}
        ENDP

        DCW      0x0000
|L20.128|
        DCD      ||.data||+0x1d8
|L20.132|
        DCD      ||.data||

        AREA ||i.ampSendCmd_38||, CODE, READONLY, ALIGN=2

ampSendCmd_38 PROC
        PUSH     {r2-r6,lr}
        MOV      r5,r0
        MOVS     r0,#1
        MOV      r6,r1
        LDR      r4,|L21.64|
        STR      r0,[sp,#0]
        MOVS     r3,#2
        MOVS     r2,#0
        MOVS     r1,#0x38
        STR      r4,[sp,#4]
        LDR      r0,|L21.68|
        BL       initI2cDataBlock
        STRB     r5,[r4,#1]
        STRB     r6,[r4,#2]
        MOVS     r0,#0xa2
        STRB     r0,[r4,#0]
        MOVS     r1,#0
        LDR      r0,|L21.68|
        BL       addI2cChain
|L21.42|
        LDRB     r0,[r4,#0]  ; amp_status
        CMP      r0,#0xa2
        BEQ      |L21.42|
        LDRB     r0,[r4,#0]  ; amp_status
        CMP      r0,#0xa3
        BNE      |L21.60|
        MOVS     r0,#0x48
        BL       logEvent
|L21.60|
        POP      {r2-r6,pc}
        ENDP

        DCW      0x0000
|L21.64|
        DCD      ||.data||+0x8
|L21.68|
        DCD      ||.bss||

        AREA ||i.ampSendEqs_38||, CODE, READONLY, ALIGN=2

ampSendEqs_38 PROC
        PUSH     {r3-r7,lr}
        MOV      r5,r1
        CMP      r0,#0x3f
        BHI      |L22.126|
        CMP      r5,#0x3f
        BHI      |L22.126|
        CMP      r0,r5
        BHI      |L22.126|
        MOV      r4,r0
        LDR      r6,|L22.128|
        B        |L22.42|
|L22.22|
        LSLS     r0,r4,#2
        ADDS     r2,r0,r6
        ADDS     r1,r4,#4
        MOV      r0,r4
        BL       ampSetEqDefault
        ADDS     r4,r4,#5
        MOVS     r0,#2
        BL       sysDelayMs
|L22.42|
        CMP      r4,#0x32
        BCC      |L22.22|
        MOVS     r0,#0x14
        BL       sysDelayMs
        MOVS     r1,#0
        MOVS     r0,#0x31
        BL       ampSendCmd_38
        MOVS     r4,#0x32
        B        |L22.122|
|L22.64|
        UXTB     r1,r4
        MOVS     r0,#0x16
        BL       ampSendCmd_38
        LSLS     r0,r4,#2
        ADDS     r1,r0,r6
        LDR      r0,|L22.128|
        LDR      r1,[r1,#0]
        SUBS     r0,r0,#0xd8
        MOV      r7,r0
        STR      r1,[r0,#0x1c]  ; cfg_data
        ADDS     r7,r7,#0x1c
        LDRB     r1,[r7,#2]  ; cfg_data
        MOVS     r0,#0x17
        BL       ampSendCmd_38
        LDRB     r1,[r7,#1]  ; cfg_data
        MOVS     r0,#0x18
        BL       ampSendCmd_38
        LDRB     r1,[r7,#0]  ; cfg_data
        MOVS     r0,#0x19
        BL       ampSendCmd_38
        MOVS     r1,#1
        MOVS     r0,#0x26
        BL       ampSendCmd_38
        ADDS     r4,r4,#1
|L22.122|
        CMP      r4,r5
        BLS      |L22.64|
|L22.126|
        POP      {r3-r7,pc}
        ENDP

|L22.128|
        DCD      ||.data||+0xd8

        AREA ||i.ampSetEqDefault||, CODE, READONLY, ALIGN=2

ampSetEqDefault PROC
        PUSH     {r3-r7,lr}
        MOV      r5,r0
        MOVS     r4,#0
        MOV      r7,r2
        MOV      r1,r4
        MOVS     r0,#0x31
        BL       ampSendCmd_38
        UXTB     r1,r5
        MOVS     r0,#0x16
        BL       ampSendCmd_38
        LDR      r6,|L23.92|
|L23.26|
        LSLS     r0,r4,#2
        ADDS     r1,r0,r7
        LDR      r0,|L23.92|
        LDR      r1,[r1,#0]
        SUBS     r0,r0,#0x1c
        STR      r1,[r0,#0x1c]  ; cfg_data
        LSLS     r0,r4,#1
        ADDS     r5,r4,r0
        MOV      r0,r5
        ADDS     r0,r0,#0x17
        LDRB     r1,[r6,#2]  ; cfg_data
        UXTB     r0,r0
        BL       ampSendCmd_38
        MOV      r0,r5
        ADDS     r0,r0,#0x18
        LDRB     r1,[r6,#1]  ; cfg_data
        UXTB     r0,r0
        BL       ampSendCmd_38
        ADDS     r5,r5,#0x19
        LDRB     r1,[r6,#0]  ; cfg_data
        UXTB     r0,r5
        BL       ampSendCmd_38
        ADDS     r4,r4,#1
        CMP      r4,#5
        BCC      |L23.26|
        MOVS     r1,#2
        MOVS     r0,#0x26
        BL       ampSendCmd_38
        POP      {r3-r7,pc}
        ENDP

|L23.92|
        DCD      ||.data||+0x1c

        AREA ||i.ampSetL||, CODE, READONLY, ALIGN=2

ampSetL PROC
        PUSH     {r4,lr}
        MOVS     r1,#0
        MOVS     r0,#0x31
        BL       ampSendCmd_38
        MOVS     r1,#0x38
        MOVS     r0,#0x16
        BL       ampSendCmd_38
        MOVS     r1,#0x7f
        MOVS     r0,#0x17
        BL       ampSendCmd_38
        MOVS     r1,#0xff
        MOVS     r0,#0x18
        BL       ampSendCmd_38
        MOVS     r1,#0xff
        MOVS     r0,#0x19
        BL       ampSendCmd_38
        MOVS     r1,#1
        MOVS     r0,#0x26
        BL       ampSendCmd_38
        MOVS     r1,#0x39
        MOVS     r0,#0x16
        BL       ampSendCmd_38
        MOVS     r1,#0
        MOVS     r0,#0x17
        BL       ampSendCmd_38
        MOVS     r1,#0
        MOVS     r0,#0x18
        BL       ampSendCmd_38
        MOVS     r1,#0
        MOVS     r0,#0x19
        BL       ampSendCmd_38
        MOVS     r1,#1
        MOVS     r0,#0x26
        BL       ampSendCmd_38
        MOVS     r1,#0x3a
        MOVS     r0,#0x16
        BL       ampSendCmd_38
        MOVS     r1,#0x7f
        MOVS     r0,#0x17
        BL       ampSendCmd_38
        MOVS     r1,#0xff
        MOVS     r0,#0x18
        BL       ampSendCmd_38
        MOVS     r1,#0xff
        MOVS     r0,#0x19
        BL       ampSendCmd_38
        MOVS     r1,#1
        MOVS     r0,#0x26
        BL       ampSendCmd_38
        MOVS     r1,#0x3b
        MOVS     r0,#0x16
        BL       ampSendCmd_38
        MOVS     r1,#0
        MOVS     r0,#0x17
        BL       ampSendCmd_38
        MOVS     r1,#0
        MOVS     r0,#0x18
        BL       ampSendCmd_38
        MOVS     r1,#0
        MOVS     r0,#0x19
        BL       ampSendCmd_38
        MOVS     r1,#1
        MOVS     r0,#0x26
        BL       ampSendCmd_38
        LDR      r0,|L24.192|
        LDR      r1,|L24.192|
        LDRB     r0,[r0,#0]  ; amp_treble_tbl
        SUBS     r1,r1,#0x38
        STRB     r0,[r1,#2]
        MOVS     r1,#0
        MOVS     r0,#1
        BL       ampSendCmd_38
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L24.192|
        DCD      ||.data||+0x40

        AREA ||i.ampSetL1ATRT||, CODE, READONLY, ALIGN=1

ampSetL1ATRT PROC
        PUSH     {r4,lr}
        MOV      r1,r0
        MOVS     r0,#0x13
        BL       ampSendCmd_38
        POP      {r4,pc}
        ENDP


        AREA ||i.ampSetR||, CODE, READONLY, ALIGN=2

ampSetR PROC
        PUSH     {r4,lr}
        MOVS     r1,#0
        MOVS     r0,#0x31
        BL       ampSendCmd_38
        MOVS     r1,#0x39
        MOVS     r0,#0x16
        BL       ampSendCmd_38
        MOVS     r1,#0x7f
        MOVS     r0,#0x17
        BL       ampSendCmd_38
        MOVS     r1,#0xff
        MOVS     r0,#0x18
        BL       ampSendCmd_38
        MOVS     r1,#0xff
        MOVS     r0,#0x19
        BL       ampSendCmd_38
        MOVS     r1,#1
        MOVS     r0,#0x26
        BL       ampSendCmd_38
        MOVS     r1,#0x38
        MOVS     r0,#0x16
        BL       ampSendCmd_38
        MOVS     r1,#0
        MOVS     r0,#0x17
        BL       ampSendCmd_38
        MOVS     r1,#0
        MOVS     r0,#0x18
        BL       ampSendCmd_38
        MOVS     r1,#0
        MOVS     r0,#0x19
        BL       ampSendCmd_38
        MOVS     r1,#1
        MOVS     r0,#0x26
        BL       ampSendCmd_38
        MOVS     r1,#0x3b
        MOVS     r0,#0x16
        BL       ampSendCmd_38
        MOVS     r1,#0x7f
        MOVS     r0,#0x17
        BL       ampSendCmd_38
        MOVS     r1,#0xff
        MOVS     r0,#0x18
        BL       ampSendCmd_38
        MOVS     r1,#0xff
        MOVS     r0,#0x19
        BL       ampSendCmd_38
        MOVS     r1,#1
        MOVS     r0,#0x26
        BL       ampSendCmd_38
        MOVS     r1,#0x3a
        MOVS     r0,#0x16
        BL       ampSendCmd_38
        MOVS     r1,#0
        MOVS     r0,#0x17
        BL       ampSendCmd_38
        MOVS     r1,#0
        MOVS     r0,#0x18
        BL       ampSendCmd_38
        MOVS     r1,#0
        MOVS     r0,#0x19
        BL       ampSendCmd_38
        MOVS     r1,#1
        MOVS     r0,#0x26
        BL       ampSendCmd_38
        MOVS     r1,#0xc0
        MOVS     r0,#1
        BL       ampSendCmd_38
        LDR      r0,|L26.192|
        LDR      r1,|L26.192|
        LDRB     r0,[r0,#0]  ; amp_treble_tbl
        SUBS     r1,r1,#0x38
        STRB     r0,[r1,#2]
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L26.192|
        DCD      ||.data||+0x40

        AREA ||i.ampSetS||, CODE, READONLY, ALIGN=2

ampSetS PROC
        PUSH     {r4,lr}
        MOVS     r1,#0
        MOVS     r0,#0x31
        BL       ampSendCmd_38
        MOVS     r1,#0x38
        MOVS     r0,#0x16
        BL       ampSendCmd_38
        MOVS     r1,#0x7f
        MOVS     r0,#0x17
        BL       ampSendCmd_38
        MOVS     r1,#0xff
        MOVS     r0,#0x18
        BL       ampSendCmd_38
        MOVS     r1,#0xff
        MOVS     r0,#0x19
        BL       ampSendCmd_38
        MOVS     r1,#1
        MOVS     r0,#0x26
        BL       ampSendCmd_38
        MOVS     r1,#0x39
        MOVS     r0,#0x16
        BL       ampSendCmd_38
        MOVS     r1,#0
        MOVS     r0,#0x17
        BL       ampSendCmd_38
        MOVS     r1,#0
        MOVS     r0,#0x18
        BL       ampSendCmd_38
        MOVS     r1,#0
        MOVS     r0,#0x19
        BL       ampSendCmd_38
        MOVS     r1,#1
        MOVS     r0,#0x26
        BL       ampSendCmd_38
        MOVS     r1,#0x3b
        MOVS     r0,#0x16
        BL       ampSendCmd_38
        MOVS     r1,#0x7f
        MOVS     r0,#0x17
        BL       ampSendCmd_38
        MOVS     r1,#0xff
        MOVS     r0,#0x18
        BL       ampSendCmd_38
        MOVS     r1,#0xff
        MOVS     r0,#0x19
        BL       ampSendCmd_38
        MOVS     r1,#1
        MOVS     r0,#0x26
        BL       ampSendCmd_38
        MOVS     r1,#0x3a
        MOVS     r0,#0x16
        BL       ampSendCmd_38
        MOVS     r1,#0
        MOVS     r0,#0x17
        BL       ampSendCmd_38
        MOVS     r1,#0
        MOVS     r0,#0x18
        BL       ampSendCmd_38
        MOVS     r1,#0
        MOVS     r0,#0x19
        BL       ampSendCmd_38
        MOVS     r1,#1
        MOVS     r0,#0x26
        BL       ampSendCmd_38
        MOVS     r1,#0x80
        MOVS     r0,#1
        BL       ampSendCmd_38
        LDR      r0,|L27.192|
        LDR      r1,|L27.192|
        LDRB     r0,[r0,#0]  ; amp_treble_tbl
        SUBS     r1,r1,#0x38
        STRB     r0,[r1,#2]
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L27.192|
        DCD      ||.data||+0x40

        AREA ||i.ampSetVolume||, CODE, READONLY, ALIGN=2

ampSetVolume PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOVS     r1,#0
        MOVS     r0,#7
        BL       ampSendCmd_38
        LDR      r0,|L28.44|
        LDRB     r1,[r0,r4]
        MOVS     r0,#0xa
        BL       ampSendCmd_38
        LDR      r5,|L28.44|
        MOVS     r0,#9
        SUBS     r5,r5,#0x20
        LDRB     r1,[r5,r4]
        BL       ampSendCmd_38
        LDRB     r1,[r5,r4]
        MOVS     r0,#8
        BL       ampSendCmd_38
        POP      {r4-r6,pc}
        ENDP

|L28.44|
        DCD      ||.data||+0x60

        AREA ||i.ampUnMuteBass||, CODE, READONLY, ALIGN=2

ampUnMuteBass PROC
        PUSH     {r4,lr}
        MOVS     r0,#5
        BL       sysDelayMs
        BL       DWHP83UnMute
        MOVS     r0,#5
        BL       sysDelayMs
        MOVS     r1,#0x10
        MOVS     r0,#6
        BL       ampSendCmd_38
        MOVS     r1,#0xc0
        MOVS     r0,#0xc
        BL       ampSendCmd_38
        LDR      r0,|L29.48|
        LDR      r1,|L29.48|
        LDRB     r0,[r0,#0]  ; amp_treble_tbl
        SUBS     r1,r1,#0x38
        STRB     r0,[r1,#2]
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L29.48|
        DCD      ||.data||+0x40

        AREA ||i.amp_i2c_status_check||, CODE, READONLY, ALIGN=2

amp_i2c_status_check PROC
        LDR      r0,|L30.16|
        LDRB     r0,[r0,#0]  ; amp_status
        CMP      r0,#0xa3
        BEQ      |L30.12|
        MOVS     r0,#0
        BX       lr
|L30.12|
        MOVS     r0,#1
        BX       lr
        ENDP

|L30.16|
        DCD      ||.data||+0x8

        AREA ||i.changeInputVolumeDown||, CODE, READONLY, ALIGN=2

changeInputVolumeDown PROC
        PUSH     {r4,lr}
        LDR      r1,|L31.36|
        LDRB     r2,[r1,#0]  ; amp_volume_lock
        LDRB     r3,[r1,#1]  ; amp_lock
        ORRS     r2,r2,r3
        BNE      |L31.32|
        STRB     r0,[r1,#2]
        BL       getChangeVolume
        LDR      r0,|L31.44|
        LDR      r3,|L31.40|
        MOVS     r2,#0
        MOVS     r1,#2
        LDRB     r0,[r0,#0]  ; pt2314_id_CIC
        BL       startATask
|L31.32|
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L31.36|
        DCD      ||.data||
|L31.40|
        DCD      ChangInputVolumeCheck
|L31.44|
        DCD      pt2314_id_CIC

        AREA ||i.changeInputVolumeUp||, CODE, READONLY, ALIGN=2

changeInputVolumeUp PROC
        PUSH     {r4,lr}
        LDR      r0,|L32.40|
        LDRB     r1,[r0,#0]  ; amp_volume_lock
        LDRB     r2,[r0,#1]  ; amp_lock
        ORRS     r1,r1,r2
        BEQ      |L32.16|
        MOVS     r0,#0
        POP      {r4,pc}
|L32.16|
        MOVS     r1,#2
        STRB     r1,[r0,#2]
        LDR      r0,|L32.40|
        LDR      r1,|L32.40|
        ADDS     r0,r0,#0x40
        LDRB     r0,[r0,#0]  ; amp_treble_tbl
        ADDS     r1,r1,#8
        STRB     r0,[r1,#2]
        BL       ChangInputVolumeCheck
        MOVS     r0,#1
        POP      {r4,pc}
        ENDP

|L32.40|
        DCD      ||.data||

        AREA ||i.getChangeVolume||, CODE, READONLY, ALIGN=2

getChangeVolume PROC
        PUSH     {lr}
        LDR      r0,|L33.48|
        LDRB     r1,[r0,#2]  ; change_input_state
        MOVS     r3,r1
        BL       __ARM_common_switch8
        DCB      0x0b,0x10,0x07,0x10
        DCB      0x07,0x07,0x10,0x07
        DCB      0x10,0x10,0x07,0x07
        DCB      0x10,0x00
        LDR      r1,|L33.48|
        LDR      r2,[r0,#0x18]  ; amp_volume
        ADDS     r1,r1,#0x40
        LDRB     r1,[r1,r2]
        LDR      r2,|L33.48|
        ADDS     r2,r2,#8
        STRB     r1,[r2,#2]
        MOVS     r1,#1
        STRB     r1,[r0,#0]
        POP      {pc}
        ENDP

        DCW      0x0000
|L33.48|
        DCD      ||.data||

        AREA ||i.stopATask||, CODE, READONLY, ALIGN=2

stopATask PROC
        MOVS     r2,#0xc
        MULS     r0,r2,r0
        LDR      r2,|L34.16|
        MOVS     r1,#0
        ADDS     r0,r0,r2
        STRB     r1,[r0,#1]
        BX       lr
        ENDP

        DCW      0x0000
|L34.16|
        DCD      mytask

        AREA ||i.stopAmpDD||, CODE, READONLY, ALIGN=2

stopAmpDD PROC
        PUSH     {r4,lr}
        LDR      r0,|L35.12|
        LDRB     r0,[r0,#4]  ; amp_id
        BL       stopATask
        POP      {r4,pc}
        ENDP

|L35.12|
        DCD      ||.data||

        AREA ||i.stopFlashLed||, CODE, READONLY, ALIGN=2

stopFlashLed PROC
        PUSH     {r4,lr}
        LDR      r0,|L36.12|
        LDRB     r0,[r0,#4]  ; amp_id
        BL       stopATask
        POP      {r4,pc}
        ENDP

|L36.12|
        DCD      ||.data||

        AREA ||i.turnDownVolume||, CODE, READONLY, ALIGN=2

turnDownVolume PROC
        PUSH     {r3-r7,lr}
        LDR      r3,|L37.144|
        LDRB     r0,[r3,#0]  ; amp_status
        LDR      r7,|L37.148|
        CMP      r0,#0xa0
        BNE      |L37.128|
        MOV      r2,r3
        SUBS     r2,r2,#8
        LDR      r0,[r2,#0xc]  ; vlmtbl_index
        CMP      r0,#0
        BEQ      |L37.78|
        MOV      r5,r2
        LDRB     r0,[r3,#2]
        ADDS     r5,r5,#0x40
        MOVS     r6,#0x20
|L37.30|
        LDR      r4,[r2,#0xc]  ; vlmtbl_index
        ADDS     r1,r5,r4
        SUBS     r1,r1,#0x20
        LDRB     r1,[r1,#0x1f]
        CMP      r0,r1
        BCS      |L37.64|
        LDRB     r1,[r5,r4]
        CMP      r0,r1
        BCC      |L37.64|
        ADDS     r0,r5,r4
        SUBS     r0,r0,#0x20
        LDRB     r0,[r0,#0x1f]
        SUBS     r6,r4,#1
        STRB     r0,[r3,#2]
        CMP      r4,#1
        BLS      |L37.78|
        B        |L37.84|
|L37.64|
        CMP      r4,#1
        BNE      |L37.70|
        STR      r6,[r2,#0xc]  ; vlmtbl_index
|L37.70|
        LDR      r1,[r2,#0xc]  ; vlmtbl_index
        SUBS     r1,r1,#1
        STR      r1,[r2,#0xc]  ; vlmtbl_index
        BNE      |L37.30|
|L37.78|
        MOVS     r0,#0x1f
        STR      r0,[r2,#0xc]  ; vlmtbl_index
        B        |L37.128|
|L37.84|
        LDR      r0,|L37.144|
        ADDS     r0,r0,#0x18
        LDRB     r1,[r0,r6]
        MOVS     r0,#7
        BL       ampSendCmd_38
        BL       DECT_DC
        LDR      r1,|L37.144|
        MOVS     r0,#0xa
        ADDS     r1,r1,#0x58
        LDRB     r1,[r1,r6]
        BL       ampSendCmd_38
        LDRB     r1,[r5,r6]
        MOVS     r0,#9
        BL       ampSendCmd_38
        LDRB     r1,[r5,r6]
        MOVS     r0,#8
        BL       ampSendCmd_38
|L37.128|
        LDR      r3,|L37.152|
        MOVS     r2,#0
        MOVS     r1,#3
        LDRB     r0,[r7,#0]  ; pt2314_id_CIC
        BL       startATask
        POP      {r3-r7,pc}
        ENDP

        DCW      0x0000
|L37.144|
        DCD      ||.data||+0x8
|L37.148|
        DCD      pt2314_id_CIC
|L37.152|
        DCD      ChangInputVolumeCheck

        AREA ||i.turnUpVolume||, CODE, READONLY, ALIGN=2

turnUpVolume PROC
        PUSH     {r4-r6,lr}
        LDR      r0,|L38.120|
        MOVS     r4,#0
        LDRB     r1,[r0,#0]  ; amp_status
        CMP      r1,#0xa0
        BNE      |L38.104|
        MOV      r3,r0
        SUBS     r3,r3,#8
        LDR      r1,[r3,#0xc]  ; vlmtbl_index
        CMP      r1,#0x1f
        BCC      |L38.26|
        MOVS     r1,#0
        STR      r1,[r3,#0xc]  ; vlmtbl_index
|L38.26|
        LDR      r5,|L38.120|
        LDRB     r1,[r0,#2]
        ADDS     r5,r5,#0x38
|L38.32|
        LDR      r0,[r3,#0xc]  ; vlmtbl_index
        LDRB     r2,[r5,r0]
        CMP      r1,r2
        BHI      |L38.52|
        ADDS     r2,r5,r0
        LDRB     r2,[r2,#1]
        CMP      r1,r2
        BLS      |L38.52|
        ADDS     r4,r0,#1
        B        |L38.60|
|L38.52|
        ADDS     r0,r0,#1
        STR      r0,[r3,#0xc]  ; vlmtbl_index
        CMP      r0,#0x1f
        BCC      |L38.32|
|L38.60|
        LDR      r0,|L38.120|
        ADDS     r0,r0,#0x18
        LDRB     r1,[r0,r4]
        MOVS     r0,#7
        BL       ampSendCmd_38
        BL       DECT_DC
        LDR      r1,|L38.120|
        MOVS     r0,#0xa
        ADDS     r1,r1,#0x58
        LDRB     r1,[r1,r4]
        BL       ampSendCmd_38
        LDRB     r1,[r5,r4]
        MOVS     r0,#9
        BL       ampSendCmd_38
        LDRB     r1,[r5,r4]
        MOVS     r0,#8
        BL       ampSendCmd_38
|L38.104|
        LDR      r0,|L38.128|
        LDR      r3,|L38.124|
        MOVS     r2,#0
        MOVS     r1,#3
        LDRB     r0,[r0,#0]  ; pt2314_id_CIC
        BL       startATask
        POP      {r4-r6,pc}
        ENDP

|L38.120|
        DCD      ||.data||+0x8
|L38.124|
        DCD      ChangInputVolumeCheck
|L38.128|
        DCD      pt2314_id_CIC

        AREA ||i.unMute||, CODE, READONLY, ALIGN=2

unMute PROC
        PUSH     {r4,lr}
        LDR      r1,|L39.20|
        MOVS     r0,#0
        STRB     r0,[r1,#3]
        MOVS     r1,#0x10
        MOVS     r0,#6
        BL       ampSendCmd_38
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L39.20|
        DCD      ||.data||

        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.bss||, DATA, NOINIT, ALIGN=2

amp_i2c_block
        %        16
amp_info
        %        23

        AREA ||area_number.42||, DATA, NOINIT, ALIGN=2

        EXPORTAS ||area_number.42||, ||.bss||
amp_i2c_block_change_input
        %        16

        AREA ||.data||, DATA, ALIGN=2

amp_volume_lock
        DCB      0x00
amp_lock
        DCB      0x00
change_input_state
        DCB      0x02
amp_reg_mute
        DCB      0x00
amp_id
        DCB      0x00
amp_volume_change
        DCB      0xa0,0x07,0x70
amp_status
        DCB      0x00,0x00,0x00,0x00
vlmtbl_index
        DCD      0x00000000
amp_volume_back
        DCD      0x00000000
soft_mute
        DCD      0x00000000
amp_volume
        DCD      0x00000018
cfg_data
        DCD      0x00000000
amp_master_tbl
        DCB      0xff,0x00,0x00,0x00
        DCB      0x00,0x00,0x00,0x00
        DCB      0x00,0x00,0x00,0x00
        DCB      0x00,0x00,0x00,0x00
        DCB      0x00,0x00,0x00,0x00
        DCB      0x00,0x00,0x00,0x00
        DCB      0x00,0x00,0x00,0x00
        DCB      0x00,0x00,0x00,0x00
amp_treble_tbl
        DCB      0xff,0xdf,0xc0,0xc6
        DCB      0xc2,0xbe,0xba,0xb6
        DCB      0xb2,0xae,0xaa,0xa6
        DCB      0xa2,0x9e,0x9a,0x96
        DCB      0x92,0x8e,0x8a,0x86
        DCB      0x82,0x7e,0x7a,0x76
        DCB      0x72,0x6e,0x6a,0x66
        DCB      0x62,0x5e,0x5a,0x56
amp_bass_tbl
        DCB      0xff,0xce,0xba,0xae
        DCB      0xaa,0xa6,0xa2,0x9e
        DCB      0x9a,0x96,0x92,0x8e
        DCB      0x8a,0x86,0x82,0x7e
        DCB      0x7a,0x76,0x72,0x6e
        DCB      0x6a,0x66,0x62,0x5e
        DCB      0x5a,0x56,0x52,0x4e
        DCB      0x4a,0x46,0x42,0x3e
amp_conf_38
        DCB      0x00,0x63,0x01,0x80
        DCB      0x02,0x9f,0x03,0x58
        DCB      0x04,0xc2,0x05,0xdd
        DCB      0x06,0x10,0x07,0x00
        DCB      0x08,0x56,0x09,0x56
        DCB      0x0a,0x3e,0x0b,0x80
        DCB      0x0c,0xa0,0x0d,0x00
        DCB      0x0e,0x20,0x0f,0x60
        DCB      0x10,0x90,0x11,0x77
        DCB      0x12,0x0e,0x13,0xb9
        DCB      0x14,0x14,0x15,0x49
        DCB      0x27,0x1a,0x28,0xc0
        DCB      0x29,0xf3,0x2a,0x33
        DCB      0x2b,0x00,0x2c,0x0c
        DCB      0x2d,0x7f,0x31,0x00
        DCB      0x32,0xbc,0x33,0x98
        DCB      0x34,0xa4,0x35,0x98
        DCB      0x36,0x07,0x37,0x00
        DCB      0x38,0x00,0x39,0x01
        DCB      0x3a,0xee,0x3b,0xff
        DCB      0x3c,0x7e,0x3d,0xc0
        DCB      0x3e,0x26,0x3f,0x00
amp_48eq_tbl_38
        DCD      0x008046bb
        DCD      0x007f7b3f
        DCD      0x007fb934
        DCD      0x00808c52
        DCD      0x003ffc27
        DCD      0x008023cb
        DCD      0x007fdc35
        DCD      0x007fdc1e
        DCD      0x0080476a
        DCD      0x003fee1a
        DCD      0x008068e2
        DCD      0x007f971e
        DCD      0x007f9707
        DCD      0x0080d197
        DCD      0x003fcb8f
        DCD      0x008e5baa
        DCD      0x006c3f94
        DCD      0x0071a456
        DCD      0x009803f5
        DCD      0x003dde3b
        DCD      0x00800a6a
        DCD      0x007fe39a
        DCD      0x007ff596
        DCD      0x0080145f
        DCD      0x00400403
        DCD      0x00809f7a
        DCD      0x007e9b42
        DCD      0x007f6086
        DCD      0x0081335e
        DCD      0x004018b0
        DCD      0x009aa6b1
        DCD      0x006405d6
        DCD      0x0065594f
        DCD      0x00a04a76
        DCD      0x003dd7d9
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x00400000
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x00400000
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x00400000
        DCD      0x007fffff
        DCD      0x007fffff
        DCD      0x007fffff
        DCD      0x007fffff
        DCD      0x007fffff
        DCD      0x005a9df7
        DCD      0x007fffff
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x007fffff
        DCD      0x00400000
        DCD      0x00400000
        DCD      0x00000000
        DCD      0x00000000
amp_44eq_tbl_38
        DCD      0x008046bb
        DCD      0x007f7b3f
        DCD      0x007fb934
        DCD      0x00808c52
        DCD      0x003ffc27
        DCD      0x00806bac
        DCD      0x007f9454
        DCD      0x007f938b
        DCD      0x0080d5c4
        DCD      0x003fca2a
        DCD      0x0081392a
        DCD      0x007ec6d6
        DCD      0x007ec60e
        DCD      0x008270c3
        DCD      0x003f636b
        DCD      0x008e5baa
        DCD      0x006c3f94
        DCD      0x0071a456
        DCD      0x009803f5
        DCD      0x003dde3b
        DCD      0x00800a6a
        DCD      0x007fe39a
        DCD      0x007ff596
        DCD      0x0080145f
        DCD      0x00400403
        DCD      0x00809f7a
        DCD      0x007e9b42
        DCD      0x007f6086
        DCD      0x0081335e
        DCD      0x004018b0
        DCD      0x009aa6b1
        DCD      0x006405d6
        DCD      0x0065594f
        DCD      0x00a04a76
        DCD      0x003dd7d9
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x00400000
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x00400000
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x00400000
        DCD      0x007fffff
        DCD      0x007fffff
        DCD      0x007fffff
        DCD      0x007fffff
        DCD      0x007fffff
        DCD      0x005a9df7
        DCD      0x007fffff
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x007fffff
        DCD      0x00400000
        DCD      0x00400000
        DCD      0x00000000
        DCD      0x00000000

        AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

__ARM_common_switch8 PROC
        PUSH     {r4,r5}
        MOV      r4,lr
        SUBS     r4,r4,#1
        LDRB     r5,[r4,#0]
        ADDS     r4,r4,#1
        CMP      r3,r5
        BCS      |L236.16|
        MOV      r5,r3
|L236.16|
        LDRB     r3,[r4,r5]
        LSLS     r3,r3,#1
        ADDS     r3,r4,r3
        POP      {r4,r5}
        BX       r3
        ENDP


        EXPORT ampAddVolume [CODE]
        EXPORT ampDecVolume [CODE]
        EXPORT ampEQbypass [CODE]
        EXPORT ampEQon [CODE]
        EXPORT ampFlasfDD [CODE]
        EXPORT ampFlasfLed [CODE]
        EXPORT ampGetCmd_38 [CODE]
        EXPORT ampGetStatus [CODE]
        EXPORT ampInit [CODE]
        EXPORT ampInitAllConf [CODE]
        EXPORT ampMute [CODE]
        EXPORT ampMuteBass [CODE]
        EXPORT ampMuteSwitch [CODE]
        EXPORT ampPowerDown [CODE]
        EXPORT ampResumeI2c [CODE]
        EXPORT ampSendCallEqs_38 [CODE]
        EXPORT ampSendCmd_38 [CODE]
        EXPORT ampSendEqs_38 [CODE]
        EXPORT ampSetEqDefault [CODE]
        EXPORT ampSetL [CODE]
        EXPORT ampSetL1ATRT [CODE]
        EXPORT ampSetR [CODE]
        EXPORT ampSetS [CODE]
        EXPORT ampSetVolume [CODE]
        EXPORT ampUnMuteBass [CODE]
        EXPORT amp_i2c_status_check [CODE]
        EXPORT changeInputVolumeDown [CODE]
        EXPORT changeInputVolumeUp [CODE]
        EXPORT getChangeVolume [CODE]
        EXPORT stopAmpDD [CODE]
        EXPORT stopFlashLed [CODE]
        EXPORT unMute [CODE]
        EXPORT amp_info [DATA,SIZE=23]
        EXPORT amp_i2c_block_change_input [DATA,SIZE=16]
        EXPORT amp_volume_lock [DATA,SIZE=1]
        EXPORT change_input_state [DATA,SIZE=1]
        EXPORT amp_reg_mute [DATA,SIZE=1]
        EXPORT amp_id [DATA,SIZE=1]
        EXPORT amp_volume_change [DATA,SIZE=3]
        EXPORT amp_status [DATA,SIZE=3]
        EXPORT amp_volume_back [DATA,SIZE=4]
        EXPORT soft_mute [DATA,SIZE=4]
        EXPORT amp_volume [DATA,SIZE=4]
        EXPORT amp_master_tbl [DATA,SIZE=32]
        EXPORT amp_treble_tbl [DATA,SIZE=32]
        EXPORT amp_bass_tbl [DATA,SIZE=32]
        EXPORT amp_conf_38 [DATA,SIZE=88]
        EXPORT __ARM_common_switch8 [CODE]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT initI2cDataBlock [CODE]
        IMPORT addI2cChain [CODE]
        IMPORT logEvent [CODE]
        IMPORT getATask [CODE]
        IMPORT sysDelayMs [CODE]
        IMPORT startATask [CODE]
        IMPORT pt2314_id_CIC [DATA]
        IMPORT led_flash [DATA]
        IMPORT changeInputChannel [CODE]
        IMPORT powerOff [CODE]
        IMPORT flash_mode [DATA]
        IMPORT filter_bypass [DATA]
        IMPORT playMusic [CODE]
        IMPORT DWP83CuCV [CODE]
        IMPORT ledColorSet [CODE]
        IMPORT state_color [DATA]
        IMPORT dev_input [DATA]
        IMPORT dwhp83_type [DATA]
        IMPORT Dwhp83_flag [DATA]
        IMPORT DWHP83Mute [CODE]
        IMPORT DWHP83UnMute [CODE]
        IMPORT mytask [DATA]

        KEEP ChangInputVolumeCheck
        KEEP DECT_DC
        KEEP SYS_UnlockReg
        KEEP WDT_TIMER_RESET
        KEEP stopATask
        KEEP turnDownVolume
        KEEP turnUpVolume
        KEEP amp_i2c_block
        KEEP amp_lock
        KEEP vlmtbl_index
        KEEP cfg_data
        KEEP amp_48eq_tbl_38
        KEEP amp_44eq_tbl_38

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,3
        ATTR SETSTRING Tag_conformance,"2.06"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
