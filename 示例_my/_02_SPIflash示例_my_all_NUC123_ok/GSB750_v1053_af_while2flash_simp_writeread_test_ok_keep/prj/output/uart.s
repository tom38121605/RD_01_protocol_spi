; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--split_sections --debug -c --asm --info=totals -o.\output\uart.o --depend=.\output\uart.d --cpu=Cortex-M0 --apcs=interwork -I..\CMSIS\CM0\DeviceSupport\Nuvoton\NUC123Series -I..\CMSIS\CM0\CoreSupport -I..\INC\DrvInc -I..\INC\SysInc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -D__MICROLIB --omf_browse=.\output\uart.crf ..\AppSrc\uart.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||i.UART0_IRQHandler||, CODE, READONLY, ALIGN=2

UART0_IRQHandler PROC
        PUSH     {r4-r7,lr}
        LDR      r7,|L1.172|
        LDR      r0,[r7,#0x1c]
        ASRS     r1,r7,#22
        LDR      r6,|L1.176|
        LDR      r5,|L1.180|
        TST      r0,r1
        BNE      |L1.24|
        LDR      r0,[r7,#0x1c]
        LSLS     r1,r1,#4
        TST      r0,r1
        BEQ      |L1.102|
|L1.24|
        LDR      r1,[r5,#8]
        LDR      r2,[r5,#0x18]
        ADDS     r1,r1,#0xff
        ADDS     r1,#1
|L1.32|
        LDR      r0,[r7,#0x18]
        MOVS     r3,#1
        LSLS     r3,r3,#14
        TST      r0,r3
        BNE      |L1.90|
        LDR      r0,[r7,#0]
        UXTB     r4,r0
        LDR      r0,[r5,#4]  ; in_index
        CMP      r0,r1
        BHI      |L1.56|
        CMP      r2,#0xff
        BLS      |L1.92|
|L1.56|
        MOV      r0,r4
        BL       iputc
        LDR      r0,[r5,#0x20]  ; vc
        ADDS     r0,r0,#1
        STR      r0,[r5,#0x20]  ; vc
        CMP      r4,#0xd
        BNE      |L1.90|
        MOVS     r0,#0
        STR      r0,[r5,#0x20]  ; vc
        LDRB     r0,[r5,#4]  ; in_index
        SUBS     r0,r0,#1
        UXTB     r0,r0
        STRB     r4,[r6,r0]
        LDR      r0,[r5,#8]  ; out_index
        SUBS     r0,r0,#1
        STR      r0,[r5,#8]  ; out_index
|L1.90|
        POP      {r4-r7,pc}
|L1.92|
        UXTB     r3,r0
        STRB     r4,[r6,r3]
        ADDS     r0,r0,#1
        STR      r0,[r5,#4]  ; in_index
        B        |L1.32|
|L1.102|
        LDR      r0,[r7,#0x1c]
        MOVS     r1,#1
        LSLS     r1,r1,#9
        TST      r0,r1
        LDR      r1,|L1.180|
        LDR      r1,[r1,#0xc]
        BEQ      |L1.90|
        LDR      r3,|L1.184|
        MOVS     r4,#1
        LDR      r0,[r5,#0x10]  ; utx_out
        LSLS     r4,r4,#23
|L1.124|
        CMP      r0,r1
        BCS      |L1.134|
        LDR      r2,[r7,#0x18]
        TST      r2,r4
        BEQ      |L1.158|
|L1.134|
        CMP      r0,r1
        BNE      |L1.90|
        LDR      r2,[r7,#4]
        MOVS     r0,#2
        BICS     r2,r2,r0
        STR      r2,[r7,#4]
        MOVS     r0,#1
        STR      r0,[r5,#0x14]  ; txidle
        UXTB     r0,r1
        STR      r0,[r5,#0xc]  ; utx_in
        STR      r0,[r5,#0x10]  ; utx_out
        POP      {r4-r7,pc}
|L1.158|
        LSLS     r2,r0,#23
        LSRS     r2,r2,#23
        LDRB     r2,[r3,r2]
        STR      r2,[r7,#0]
        ADDS     r0,r0,#1
        STR      r0,[r5,#0x10]  ; utx_out
        B        |L1.124|
        ENDP

|L1.172|
        DCD      0x40050000
|L1.176|
        DCD      ||.bss||
|L1.180|
        DCD      ||area_number.30||
|L1.184|
        DCD      ||.bss||+0x100

        AREA ||i.WB_message_handele||, CODE, READONLY, ALIGN=2

WB_message_handele PROC
        PUSH     {r4-r7,lr}
        LSLS     r5,r0,#28
        LSRS     r4,r0,#4
        LSRS     r5,r5,#28
        MOVS     r6,#0
        MOV      r7,r0
        CMP      r0,#0xaa
        BEQ      |L2.70|
        LDR      r0,|L2.232|
        LDRB     r1,[r0,#0]  ; WB_flag
        CMP      r1,#0
        BEQ      |L2.44|
        LDRB     r0,[r0,#1]  ; message_index
        CMP      r0,#0x12
        BCS      |L2.44|
|L2.30|
        LDR      r1,|L2.232|
        LDR      r2,|L2.232|
        LDRB     r0,[r1,#1]  ; message_index
        ADDS     r2,r2,#0x24
        STRB     r7,[r2,r0]
        ADDS     r0,r0,#1
        STRB     r0,[r1,#1]
|L2.44|
        LDR      r1,|L2.232|
        MOVS     r0,#1
        ADDS     r1,r1,#0x24
|L2.50|
        ADDS     r0,r0,#1
        UXTB     r0,r0
        CMP      r0,#7
        BCC      |L2.50|
        LDRB     r0,[r1,#3]  ; WB_message
        CMP      r0,#1
        BEQ      |L2.86|
        CMP      r0,#2
        BEQ      |L2.118|
        B        |L2.142|
|L2.70|
        ADR      r0,|L2.236|
        BL       iputs
        LDR      r0,|L2.232|
        MOVS     r1,#1
        STRB     r1,[r0,#0]
        STRB     r6,[r0,#1]
        B        |L2.30|
|L2.86|
        LDRB     r2,[r1,#4]  ; WB_message
        LDR      r3,|L2.240|
        CMP      r2,#6
        BEQ      |L2.100|
        CMP      r2,#8
        BEQ      |L2.110|
        B        |L2.142|
|L2.100|
        LDRB     r2,[r3,#0]  ; WB_paired_flag
        CMP      r2,#0
        BNE      |L2.142|
        MOVS     r2,#1
        B        |L2.140|
|L2.110|
        LDRB     r2,[r3,#0]  ; WB_paired_flag
        CMP      r2,#1
        BEQ      |L2.136|
        B        |L2.142|
|L2.118|
        LDRB     r2,[r1,#5]  ; WB_message
        LDR      r3,|L2.244|
        CMP      r2,#0
        BEQ      |L2.136|
        CMP      r2,#2
        BEQ      |L2.140|
        CMP      r2,#4
        BEQ      |L2.140|
        B        |L2.142|
|L2.136|
        STRB     r6,[r3,#0]
        B        |L2.142|
|L2.140|
        STRB     r2,[r3,#0]
|L2.142|
        LDRB     r2,[r1,#2]  ; WB_message
        CMP      r2,#0xe
        BNE      |L2.180|
        CMP      r0,#0x1a
        BNE      |L2.180|
        LDRB     r0,[r1,#5]  ; WB_message
        CMP      r0,#0xf
        BNE      |L2.180|
        LDRB     r0,[r1,#0x10]  ; WB_message
        LDR      r1,|L2.248|
        CMP      r0,#2
        BEQ      |L2.172|
        CMP      r0,#1
        BEQ      |L2.176|
        B        |L2.180|
|L2.172|
        STRB     r6,[r1,#0]
        B        |L2.180|
|L2.176|
        MOVS     r0,#1
        STRB     r0,[r1,#0]
|L2.180|
        LDR      r0,|L2.232|
        LDRB     r1,[r0,#1]  ; message_index
        CMP      r1,#0x11
        BNE      |L2.192|
        STRB     r6,[r0,#0]
        STRB     r6,[r0,#1]
|L2.192|
        CMP      r4,#0xa
        BCS      |L2.200|
        ADDS     r4,r4,#0x30
        B        |L2.202|
|L2.200|
        ADDS     r4,r4,#0x37
|L2.202|
        UXTB     r0,r4
        BL       iputc
        CMP      r5,#0xa
        BCS      |L2.216|
        ADDS     r5,r5,#0x30
        B        |L2.218|
|L2.216|
        ADDS     r5,r5,#0x37
|L2.218|
        UXTB     r0,r5
        BL       iputc
        MOVS     r0,#0x20
        BL       iputc
        POP      {r4-r7,pc}
        ENDP

|L2.232|
        DCD      ||area_number.30||
|L2.236|
        DCB      "\r\n",0
        DCB      0
|L2.240|
        DCD      WB_paired_flag
|L2.244|
        DCD      WB_call_status
|L2.248|
        DCD      bt_play_music_flag

        AREA ||i.clr||, CODE, READONLY, ALIGN=1

||clr|| PROC
        PUSH     {r4,lr}
        MOVS     r4,#0
|L3.4|
        MOVS     r0,#0xa
        BL       iputc
        ADDS     r4,r4,#1
        CMP      r4,#0x50
        BCC      |L3.4|
        MOVS     r0,#0xd
        BL       iputc
        POP      {r4,pc}
        ENDP


        AREA ||i.dps||, CODE, READONLY, ALIGN=2

||dps|| PROC
        PUSH     {lr}
        LDR      r0,|L4.16|
        BL       iputs
        LDR      r1,|L4.20|
        MOVS     r0,#0
        STR      r0,[r1,#0x18]  ; column
        POP      {pc}
        ENDP

|L4.16|
        DCD      ||.constdata||+0x30
|L4.20|
        DCD      ||area_number.30||

        AREA ||i.dumpFlash||, CODE, READONLY, ALIGN=2

dumpFlash PROC
        PUSH     {r0,r1,r4-r7,lr}
        MOV      r4,r0
        LDR      r0,|L5.176|
        MOVS     r6,#0
        LDRB     r1,[r0,#0]  ; flash_mode
        LDR      r7,|L5.172|
        SUB      sp,sp,#0x14
        MOV      r5,r6
        CMP      r1,#1
        BNE      |L5.28|
        MOVS     r1,#0
        STRB     r1,[r0,#0]
        BL       playSFMusicEnd
|L5.28|
        LDR      r1,[sp,#0x18]
        LDR      r0,|L5.180|
        CMP      r1,#0
        BEQ      |L5.42|
        LDR      r4,[r0,#0x1c]  ; addr_bak
        ADDS     r4,r4,#0xff
        ADDS     r4,#1
|L5.42|
        STR      r4,[r0,#0x1c]  ; addr_bak
        MOV      r0,sp
        STR      r4,[sp,#0xc]
        LDRB     r0,[r0,#0xf]
        MOV      r1,sp
        BL       itoh
        BL       iputs
        MOV      r0,sp
        LDRB     r0,[r0,#0xe]
        MOV      r1,sp
        BL       itoh
        BL       iputs
        MOV      r0,sp
        LDRB     r0,[r0,#0xd]
        MOV      r1,sp
        BL       itoh
        BL       iputs
        MOV      r0,sp
        LDRB     r0,[r0,#0xc]
        MOV      r1,sp
        BL       itoh
        BL       iputs
        ADR      r0,|L5.184|
        BL       iputs
        LSRS     r0,r4,#8
        MOVS     r1,#0xff
        LSLS     r0,r0,#8
        LDR      r2,|L5.172|
        ADDS     r1,#1
        BL       spiFlashRead
|L5.122|
        MOVS     r4,#0
|L5.124|
        LDRB     r0,[r7,r5]
        ADDS     r5,r5,#1
        MOV      r1,sp
        BL       itoh
        BL       iputs
        MOVS     r0,#0x20
        BL       iputc
        ADDS     r4,r4,#1
        CMP      r4,#0x10
        BCC      |L5.124|
        MOVS     r0,#6
        BL       sysDelayMs
        ADR      r0,|L5.184|
        BL       iputs
        ADDS     r6,r6,#1
        CMP      r6,#0x10
        BCC      |L5.122|
        ADD      sp,sp,#0x1c
        POP      {r4-r7,pc}
        ENDP

|L5.172|
        DCD      temp_buf
|L5.176|
        DCD      flash_mode
|L5.180|
        DCD      ||area_number.30||
|L5.184|
        DCB      "\r\n",0
        DCB      0

        AREA ||i.igetc||, CODE, READONLY, ALIGN=2

igetc PROC
        LDR      r2,|L6.16|
        LDR      r3,|L6.20|
        LDR      r1,[r2,#8]  ; out_index
        UXTB     r0,r1
        LDRB     r0,[r3,r0]
        ADDS     r1,r1,#1
        STR      r1,[r2,#8]  ; out_index
        BX       lr
        ENDP

|L6.16|
        DCD      ||area_number.30||
|L6.20|
        DCD      ||.bss||

        AREA ||i.iputc||, CODE, READONLY, ALIGN=2

iputc PROC
        PUSH     {r4,r5,lr}
        LDR      r2,|L7.56|
        MOVS     r1,#2
        LDR      r3,[r2,#4]
        BICS     r3,r3,r1
        STR      r3,[r2,#4]
        LDR      r3,|L7.60|
        LDR      r5,|L7.64|
        LDR      r1,[r3,#0xc]  ; utx_in
        LSLS     r4,r1,#23
        LSRS     r4,r4,#23
        STRB     r0,[r5,r4]
        ADDS     r1,r1,#1
        STR      r1,[r3,#0xc]  ; utx_in
        LDR      r1,[r2,#4]
        MOVS     r0,#2
        ORRS     r1,r1,r0
        STR      r1,[r2,#4]
        LDR      r0,[r3,#0x14]  ; txidle
        CMP      r0,#1
        BNE      |L7.54|
        MOVS     r0,#0
        STR      r0,[r3,#0x14]  ; txidle
        LDR      r1,[r2,#4]
        MOVS     r0,#2
        ORRS     r1,r1,r0
        STR      r1,[r2,#4]
|L7.54|
        POP      {r4,r5,pc}
        ENDP

|L7.56|
        DCD      0x40050000
|L7.60|
        DCD      ||area_number.30||
|L7.64|
        DCD      ||.bss||+0x100

        AREA ||i.iputs||, CODE, READONLY, ALIGN=2

iputs PROC
        PUSH     {r4-r7,lr}
        LDR      r7,|L8.68|
        MOVS     r1,#0
        LDR      r3,[r7,#4]
        MOVS     r2,#2
        BICS     r3,r3,r2
        STR      r3,[r7,#4]
        LDR      r6,|L8.72|
        LDR      r4,|L8.76|
        B        |L8.34|
|L8.20|
        LDR      r2,[r6,#0xc]  ; utx_in
        LSLS     r5,r2,#23
        LSRS     r5,r5,#23
        ADDS     r2,r2,#1
        STRB     r3,[r4,r5]
        ADDS     r1,r1,#1
        STR      r2,[r6,#0xc]  ; utx_in
|L8.34|
        LDRB     r3,[r0,r1]
        CMP      r3,#0
        BNE      |L8.20|
        LDR      r1,[r7,#4]
        MOVS     r0,#2
        ORRS     r1,r1,r0
        STR      r1,[r7,#4]
        LDR      r0,[r6,#0x14]  ; txidle
        CMP      r0,#1
        BNE      |L8.66|
        MOVS     r0,#0
        STR      r0,[r6,#0x14]  ; txidle
        LDR      r1,[r7,#4]
        MOVS     r0,#2
        ORRS     r1,r1,r0
        STR      r1,[r7,#4]
|L8.66|
        POP      {r4-r7,pc}
        ENDP

|L8.68|
        DCD      0x40050000
|L8.72|
        DCD      ||area_number.30||
|L8.76|
        DCD      ||.bss||+0x100

        AREA ||i.itoa||, CODE, READONLY, ALIGN=1

itoa PROC
        PUSH     {r4-r6,lr}
        MOV      r5,r1
        MOVS     r4,#0
        B        |L9.20|
|L9.8|
        MOVS     r1,#0xa
        BL       __aeabi_uidivmod
        ADDS     r1,r1,#0x30
        STRB     r1,[r5,r4]
        ADDS     r4,r4,#1
|L9.20|
        CMP      r0,#0
        BNE      |L9.8|
        CMP      r4,#0
        BNE      |L9.34|
        MOVS     r4,#1
        MOVS     r1,#0x30
        STRB     r1,[r5,#0]
|L9.34|
        MOVS     r1,#0
        STRB     r1,[r5,r4]
        MOV      r2,r4
        B        |L9.54|
|L9.42|
        SUBS     r4,r4,#1
        LDRB     r1,[r5,r0]
        LDRB     r3,[r5,r4]
        STRB     r3,[r5,r0]
        ADDS     r0,r0,#1
        STRB     r1,[r5,r4]
|L9.54|
        CMP      r0,r4
        BCC      |L9.42|
        MOV      r0,r2
        POP      {r4-r6,pc}
        ENDP


        AREA ||i.itoh||, CODE, READONLY, ALIGN=2

itoh PROC
        MOV      r2,r0
        MOV      r0,r1
        LDR      r3,|L10.28|
        LSRS     r1,r2,#4
        LDRB     r1,[r3,r1]
        STRB     r1,[r0,#0]
        LSLS     r1,r2,#28
        LSRS     r1,r1,#28
        LDRB     r1,[r3,r1]
        STRB     r1,[r0,#1]
        MOVS     r1,#0
        STRB     r1,[r0,#2]
        BX       lr
        ENDP

        DCW      0x0000
|L10.28|
        DCD      ||.constdata||

        AREA ||i.iungetc||, CODE, READONLY, ALIGN=1

iungetc PROC
        BX       lr
        ENDP


        AREA ||i.sendBack||, CODE, READONLY, ALIGN=2

sendBack PROC
        PUSH     {r4,r5,lr}
        LDR      r4,|L12.32|
        LDR      r5,|L12.36|
        B        |L12.20|
|L12.8|
        UXTB     r0,r1
        LDRB     r0,[r5,r0]
        ADDS     r1,r1,#1
        STR      r1,[r4,#8]  ; out_index
        BL       WB_message_handele
|L12.20|
        LDR      r1,[r4,#8]  ; out_index
        LDR      r0,[r4,#4]  ; in_index
        CMP      r1,r0
        BCC      |L12.8|
        POP      {r4,r5,pc}
        ENDP

        DCW      0x0000
|L12.32|
        DCD      ||area_number.30||
|L12.36|
        DCD      ||.bss||

        AREA ||i.sendDevInfo||, CODE, READONLY, ALIGN=2

sendDevInfo PROC
        PUSH     {lr}
        ADR      r0,|L13.36|
        BL       iputs
        ADR      r0,|L13.52|
        BL       iputs
        ADR      r0,|L13.72|
        BL       iputs
        ADR      r0,|L13.84|
        BL       iputs
        ADR      r0,|L13.92|
        BL       iputs
        POP      {pc}
        ENDP

        DCW      0x0000
|L13.36|
        DCB      "mcu: GSB750\n\r",0
        DCB      0
        DCB      0
|L13.52|
        DCB      "PRJ: MultiRoom\n\r",0
        DCB      0
        DCB      0
        DCB      0
|L13.72|
        DCB      "VERSION: ",0
        DCB      0
        DCB      0
|L13.84|
        DCB      "v10.53",0
        DCB      0
|L13.92|
        DCB      "\n\r",0
        DCB      0

        AREA ||i.sendInfo||, CODE, READONLY, ALIGN=1

sendInfo PROC
        PUSH     {lr}
        BL       iputs
        BL       ||dps||
        POP      {pc}
        ENDP


        AREA ||i.sendStartInfo||, CODE, READONLY, ALIGN=2

sendStartInfo PROC
        PUSH     {lr}
        BL       ||clr||
        BL       sendDevInfo
        ADR      r0,|L15.24|
        BL       iputs
        BL       ||dps||
        POP      {pc}
        ENDP

        DCW      0x0000
|L15.24|
        DCB      "-----------------------\r\n\n",0
        DCB      0

        AREA ||i.strcmp||, CODE, READONLY, ALIGN=1

strcmp PROC
        PUSH     {r4,lr}
        MOVS     r2,#0
        B        |L16.18|
|L16.6|
        LDRB     r4,[r1,r2]
        CMP      r3,r4
        BEQ      |L16.16|
        MOVS     r0,#0
        POP      {r4,pc}
|L16.16|
        ADDS     r2,r2,#1
|L16.18|
        LDRB     r3,[r0,r2]
        CMP      r3,#0
        BNE      |L16.6|
        LDRB     r4,[r1,r2]
        CMP      r4,#0
        BNE      |L16.6|
        MOVS     r0,#1
        POP      {r4,pc}
        ENDP


        AREA ||i.strcmp_last_3_bytes||, CODE, READONLY, ALIGN=1

strcmp_last_3_bytes PROC
        PUSH     {r4,lr}
        MOVS     r3,#0
        MOV      r2,r3
        B        |L17.10|
|L17.8|
        ADDS     r3,r3,#1
|L17.10|
        LDRB     r4,[r0,r3]
        CMP      r4,#0
        BNE      |L17.8|
        B        |L17.20|
|L17.18|
        ADDS     r2,r2,#1
|L17.20|
        LDRB     r4,[r1,r2]
        CMP      r4,#0
        BNE      |L17.18|
        ADDS     r3,r0,r3
        ADDS     r0,r1,r2
        SUBS     r3,r3,#0x20
        SUBS     r0,r0,#0x20
        LDRB     r4,[r3,#0x1f]
        LDRB     r1,[r0,#0x1f]
        CMP      r4,r1
        BNE      |L17.62|
        LDRB     r1,[r3,#0x1e]
        LDRB     r2,[r0,#0x1e]
        CMP      r1,r2
        BNE      |L17.62|
        LDRB     r1,[r3,#0x1d]
        LDRB     r0,[r0,#0x1d]
        CMP      r1,r0
        BNE      |L17.62|
        MOVS     r0,#1
        POP      {r4,pc}
|L17.62|
        MOVS     r0,#0
        POP      {r4,pc}
        ENDP


        AREA ||i.strncmp||, CODE, READONLY, ALIGN=1

strncmp PROC
        PUSH     {r4,lr}
        B        |L18.16|
|L18.4|
        LDRB     r3,[r0,r2]
        LDRB     r4,[r1,r2]
        CMP      r3,r4
        BEQ      |L18.16|
        MOVS     r0,#0
        POP      {r4,pc}
|L18.16|
        SUBS     r2,r2,#1
        BCS      |L18.4|
        MOVS     r0,#1
        POP      {r4,pc}
        ENDP


        AREA ||i.strncpy||, CODE, READONLY, ALIGN=1

strncpy PROC
        PUSH     {r4,lr}
        MOV      r3,r0
        MOVS     r0,#0
        B        |L19.14|
|L19.8|
        LDRB     r4,[r3,r0]
        STRB     r4,[r1,r0]
        ADDS     r0,r0,#1
|L19.14|
        CMP      r0,r2
        BCC      |L19.8|
        MOV      r0,r1
        POP      {r4,pc}
        ENDP


        AREA ||i.uartInit||, CODE, READONLY, ALIGN=2

uartInit PROC
        PUSH     {r4-r6,lr}
        MOVS     r0,#5
        LSLS     r0,r0,#28
        LDR      r1,[r0,#0x38]
        SUB      sp,sp,#0x28
        MOVS     r2,#0x30
        ORRS     r1,r1,r2
        STR      r1,[r0,#0x38]
        LDR      r0,|L20.144|
        LDR      r1,[r0,#0x10]
        LSLS     r2,r2,#25
        ORRS     r1,r1,r2
        STR      r1,[r0,#0x10]
        LDR      r0,|L20.148|
        STR      r0,[sp,#8]
        MOVS     r0,#0xe1
        LSLS     r0,r0,#9
        STR      r0,[sp,#0xc]
        MOVS     r0,#3
        STR      r0,[sp,#0x10]
        MOVS     r0,#0x10
        MOVS     r4,#0
        STR      r0,[sp,#0x1c]
        MOVS     r5,#1
        ASRS     r0,r2,#1
        STR      r5,[sp,#4]
        STR      r4,[sp,#0]
        STR      r0,[sp,#0x20]
        STR      r4,[sp,#0x14]
        STR      r4,[sp,#0x18]
        MOVS     r0,#0x64
        ADD      r1,sp,#0x20
        STRB     r0,[r1,#4]
        LDR      r6,|L20.152|
        MOV      r1,sp
        MOV      r0,r6
        BL       DrvUART_Init
        LDR      r0,|L20.156|
        LDR      r1,[r0,#0]
        MOVS     r2,#0x80
        LSRS     r1,r1,#8
        LSLS     r1,r1,#8
        ORRS     r1,r1,r2
        STR      r1,[r0,#0]
        LDR      r1,|L20.160|
        MOV      r0,r6
        BL       DrvUART_EnableInt
        LDR      r1,|L20.164|
        MOVS     r0,#0
|L20.102|
        STRB     r4,[r1,r0]
        ADDS     r0,r0,#1
        CMP      r0,#0xff
        BLS      |L20.102|
        MOVS     r0,#0
        LDR      r1,|L20.168|
        MOVS     r2,#1
        LSLS     r2,r2,#9
|L20.118|
        STRB     r4,[r1,r0]
        ADDS     r0,r0,#1
        CMP      r0,r2
        BCC      |L20.118|
        LDR      r0,|L20.172|
        STR      r4,[r0,#8]  ; out_index
        STR      r4,[r0,#4]  ; in_index
        STR      r4,[r0,#0x10]  ; utx_out
        STR      r5,[r0,#0x14]  ; txidle
        STR      r4,[r0,#0xc]  ; utx_in
        ADD      sp,sp,#0x28
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L20.144|
        DCD      0x50000040
|L20.148|
        DCD      0x00b71b00
|L20.152|
        DCD      0x40050000
|L20.156|
        DCD      0xe000e40c
|L20.160|
        DCD      0x00000811
|L20.164|
        DCD      ||.bss||
|L20.168|
        DCD      ||.bss||+0x100
|L20.172|
        DCD      ||area_number.30||

        AREA ||i.uartSendCmd||, CODE, READONLY, ALIGN=2

uartSendCmd PROC
        PUSH     {r4-r7,lr}
        MOVS     r2,#0
        LDR      r7,|L21.52|
        LDR      r4,|L21.56|
        B        |L21.26|
|L21.10|
        LDR      r3,[r7,#0xc]  ; utx_in
        LDRB     r5,[r1,r2]
        LSLS     r6,r3,#23
        LSRS     r6,r6,#23
        ADDS     r3,r3,#1
        STRB     r5,[r4,r6]
        ADDS     r2,r2,#1
        STR      r3,[r7,#0xc]  ; utx_in
|L21.26|
        CMP      r2,r0
        BCC      |L21.10|
        LDR      r0,[r7,#0x14]  ; txidle
        CMP      r0,#1
        BNE      |L21.50|
        MOVS     r0,#0
        LDR      r1,|L21.60|
        STR      r0,[r7,#0x14]  ; txidle
        LDR      r2,[r1,#4]
        MOVS     r0,#2
        ORRS     r2,r2,r0
        STR      r2,[r1,#4]
|L21.50|
        POP      {r4-r7,pc}
        ENDP

|L21.52|
        DCD      ||area_number.30||
|L21.56|
        DCD      ||.bss||+0x100
|L21.60|
        DCD      0x40050000

        AREA ||i.uartdecode||, CODE, READONLY, ALIGN=1

uartdecode PROC
        PUSH     {r0-r4,lr}
        MOV      r4,r1
        MOV      r1,sp
        BL       itoa
        MOV      r2,sp
        MOVS     r1,#0x20
        B        |L22.20|
|L22.16|
        STRB     r1,[r2,r0]
        ADDS     r0,r0,#1
|L22.20|
        CMP      r0,#6
        BCC      |L22.16|
        MOVS     r1,#0
        STRB     r1,[r2,r0]
        MOV      r0,r4
        BL       iputs
        MOV      r0,sp
        BL       iputs
        POP      {r0-r4,pc}
        ENDP


        AREA ||i.uartdecodeH||, CODE, READONLY, ALIGN=2

uartdecodeH PROC
        PUSH     {r0-r4,lr}
        MOV      r4,r0
        MOV      r0,r1
        BL       iputs
        LSLS     r0,r4,#24
        LDR      r1,|L23.48|
        LSRS     r0,r0,#28
        LDRB     r0,[r1,r0]
        MOV      r2,sp
        STRB     r0,[r2,#0]
        LSLS     r0,r4,#28
        LSRS     r0,r0,#28
        LDRB     r0,[r1,r0]
        STRB     r0,[r2,#1]
        MOVS     r0,#0
        STRB     r0,[r2,#2]
        MOV      r0,sp
        BL       iputs
        ADR      r0,|L23.52|
        BL       iputs
        POP      {r0-r4,pc}
        ENDP

|L23.48|
        DCD      ||.constdata||+0x10
|L23.52|
        DCB      "\r\n",0
        DCB      0

        AREA ||i.uartdecodeH32||, CODE, READONLY, ALIGN=2

uartdecodeH32 PROC
        PUSH     {r0-r4,lr}
        MOV      r4,r0
        MOV      r0,r1
        BL       iputs
        LDR      r0,|L24.96|
        LSRS     r1,r4,#28
        LDRB     r1,[r0,r1]
        MOV      r2,sp
        STRB     r1,[r2,#0]
        LSLS     r1,r4,#4
        LSRS     r1,r1,#28
        LDRB     r1,[r0,r1]
        STRB     r1,[r2,#1]
        LSLS     r1,r4,#8
        LSRS     r1,r1,#28
        LDRB     r1,[r0,r1]
        STRB     r1,[r2,#2]
        LSLS     r1,r4,#12
        LSRS     r1,r1,#28
        LDRB     r1,[r0,r1]
        STRB     r1,[r2,#3]
        LSLS     r1,r4,#16
        LSRS     r1,r1,#28
        LDRB     r1,[r0,r1]
        STRB     r1,[r2,#4]
        LSLS     r1,r4,#20
        LSRS     r1,r1,#28
        LDRB     r1,[r0,r1]
        STRB     r1,[r2,#5]
        LSLS     r1,r4,#24
        LSRS     r1,r1,#28
        LDRB     r1,[r0,r1]
        STRB     r1,[r2,#6]
        LSLS     r1,r4,#28
        LSRS     r1,r1,#28
        LDRB     r0,[r0,r1]
        STRB     r0,[r2,#7]
        MOVS     r0,#0
        STRB     r0,[r2,#8]
        MOV      r0,r2
        BL       iputs
        ADR      r0,|L24.100|
        BL       iputs
        POP      {r0-r4,pc}
        ENDP

        DCW      0x0000
|L24.96|
        DCD      ||.constdata||+0x20
|L24.100|
        DCB      "\r\n",0
        DCB      0

        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.bss||, DATA, NOINIT, ALIGN=0

UI_buf
        %        256
utx_buf
        %        512

        AREA ||.constdata||, DATA, READONLY, ALIGN=2

HEXSTR
        DCB      0x30,0x31,0x32,0x33
        DCB      0x34,0x35,0x36,0x37
        DCB      0x38,0x39,0x41,0x42
        DCB      0x43,0x44,0x45,0x46
|symbol_number.73|
        DCB      0x30,0x31,0x32,0x33
        DCB      0x34,0x35,0x36,0x37
        DCB      0x38,0x39,0x41,0x42
        DCB      0x43,0x44,0x45,0x46
|symbol_number.74|
        DCB      0x30,0x31,0x32,0x33
        DCB      0x34,0x35,0x36,0x37
        DCB      0x38,0x39,0x41,0x42
        DCB      0x43,0x44,0x45,0x46
        DCB      0x47,0x4c,0x53,0x4e
        DCB      0x24,0x20,0x00

        AREA ||.data||, DATA, ALIGN=0

bt_state
        DCB      0x04

        AREA ||area_number.30||, DATA, ALIGN=2

        EXPORTAS ||area_number.30||, ||.data||
WB_flag
        DCB      0x00
message_index
        DCB      0x00,0x00,0x00
in_index
        DCD      0x00000000
out_index
        DCD      0x00000000
utx_in
        DCD      0x00000000
utx_out
        DCD      0x00000000
txidle
        DCD      0x00000001
column
        DCD      0x00000000
addr_bak
        DCD      0x00000000
||vc||
        DCD      0x00000000
WB_message
        DCB      0xff,0xff,0xff,0xff
        DCB      0xff,0xff,0xff,0xff
        DCB      0xff,0xff,0xff,0xff
        DCB      0xff,0xff,0xff,0xff
        DCB      0xff,0xff,0xff,0xff

        EXPORT UART0_IRQHandler [CODE]
        EXPORT WB_message_handele [CODE]
        EXPORT ||clr|| [CODE]
        EXPORT ||dps|| [CODE]
        EXPORT dumpFlash [CODE]
        EXPORT igetc [CODE]
        EXPORT iputc [CODE]
        EXPORT iputs [CODE]
        EXPORT itoa [CODE]
        EXPORT itoh [CODE]
        EXPORT iungetc [CODE]
        EXPORT sendBack [CODE]
        EXPORT sendDevInfo [CODE]
        EXPORT sendInfo [CODE]
        EXPORT sendStartInfo [CODE]
        EXPORT strcmp [CODE]
        EXPORT strcmp_last_3_bytes [CODE]
        EXPORT strncmp [CODE]
        EXPORT strncpy [CODE]
        EXPORT uartInit [CODE]
        EXPORT uartSendCmd [CODE]
        EXPORT uartdecode [CODE]
        EXPORT uartdecodeH [CODE]
        EXPORT uartdecodeH32 [CODE]
        EXPORT bt_state [DATA,SIZE=1]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT __aeabi_uidivmod [CODE]
        IMPORT playSFMusicEnd [CODE]
        IMPORT spiFlashRead [CODE]
        IMPORT sysDelayMs [CODE]
        IMPORT temp_buf [DATA]
        IMPORT flash_mode [DATA]
        IMPORT WB_paired_flag [DATA]
        IMPORT WB_call_status [DATA]
        IMPORT bt_play_music_flag [DATA]
        IMPORT DrvUART_Init [CODE]
        IMPORT DrvUART_EnableInt [CODE]

        KEEP UI_buf
        KEEP utx_buf
        KEEP HEXSTR
        KEEP |symbol_number.73|
        EXPORTAS |symbol_number.73|, HEXSTR
        KEEP |symbol_number.74|
        EXPORTAS |symbol_number.74|, HEXSTR
        KEEP WB_flag
        KEEP message_index
        KEEP in_index
        KEEP out_index
        KEEP utx_in
        KEEP utx_out
        KEEP txidle
        KEEP column
        KEEP addr_bak
        KEEP ||vc||
        KEEP WB_message

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,3
        ATTR SETSTRING Tag_conformance,"2.06"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
