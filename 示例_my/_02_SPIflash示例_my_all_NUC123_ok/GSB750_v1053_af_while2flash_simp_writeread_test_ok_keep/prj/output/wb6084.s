; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--split_sections --debug -c --asm --info=totals -o.\output\wb6084.o --depend=.\output\wb6084.d --cpu=Cortex-M0 --apcs=interwork -I..\CMSIS\CM0\DeviceSupport\Nuvoton\NUC123Series -I..\CMSIS\CM0\CoreSupport -I..\INC\DrvInc -I..\INC\SysInc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -D__MICROLIB --omf_browse=.\output\wb6084.crf ..\AppSrc\wb6084.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||i.WB_HF_connect||, CODE, READONLY, ALIGN=1

WB_HF_connect PROC
        PUSH     {r4,lr}
        MOVS     r0,#0x16
        BL       WB_MMI_commend
        POP      {r4,pc}
        ENDP


        AREA ||i.WB_MMI_commend||, CODE, READONLY, ALIGN=2

WB_MMI_commend PROC
        PUSH     {r4,lr}
        LDR      r1,|L2.40|
        MOVS     r2,#0xaa
        STRB     r2,[r1,#0]
        MOVS     r2,#0
        STRB     r2,[r1,#1]
        MOVS     r3,#3
        STRB     r3,[r1,#2]
        MOVS     r3,#2
        STRB     r3,[r1,#3]
        STRB     r2,[r1,#4]
        STRB     r0,[r1,#5]
        ADDS     r0,r0,#5
        RSBS     r0,r0,#0
        STRB     r0,[r1,#6]
        MOVS     r0,#7
        BL       uartSendCmd
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L2.40|
        DCD      ||.bss||

        AREA ||i.WB_close_call||, CODE, READONLY, ALIGN=1

WB_close_call PROC
        PUSH     {r4,lr}
        MOVS     r0,#2
        BL       WB_MMI_commend
        POP      {r4,pc}
        ENDP


        AREA ||i.WB_enter_pairing||, CODE, READONLY, ALIGN=1

WB_enter_pairing PROC
        PUSH     {r4,lr}
        MOVS     r0,#0x5d
        BL       WB_MMI_commend
        POP      {r4,pc}
        ENDP


        AREA ||i.WB_get_version||, CODE, READONLY, ALIGN=2

WB_get_version PROC
        PUSH     {r4,lr}
        LDR      r0,|L5.40|
        MOVS     r1,#0xaa
        STRB     r1,[r0,#0]
        MOVS     r1,#0
        STRB     r1,[r0,#1]
        MOVS     r1,#1
        STRB     r1,[r0,#2]
        MOVS     r1,#8
        STRB     r1,[r0,#3]
        LDRB     r1,[r0,#4]  ; WB_cmd
        ADDS     r1,r1,#9
        RSBS     r1,r1,#0
        STRB     r1,[r0,#4]
        MOV      r1,r0
        MOVS     r0,#5
        BL       uartSendCmd
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L5.40|
        DCD      ||.bss||

        AREA ||i.WB_last_song||, CODE, READONLY, ALIGN=1

WB_last_song PROC
        PUSH     {r4,lr}
        MOVS     r0,#0x35
        BL       WB_MMI_commend
        POP      {r4,pc}
        ENDP


        AREA ||i.WB_music_back||, CODE, READONLY, ALIGN=2

WB_music_back PROC
        PUSH     {r4,lr}
        LDR      r0,|L7.40|
        MOVS     r1,#0xaa
        STRB     r1,[r0,#0]
        MOVS     r2,#0
        STRB     r2,[r0,#1]
        MOVS     r1,#3
        STRB     r1,[r0,#2]
        MOVS     r3,#4
        STRB     r3,[r0,#3]
        STRB     r2,[r0,#4]
        STRB     r1,[r0,#5]
        MOVS     r1,#0xf6
        STRB     r1,[r0,#6]
        MOV      r1,r0
        MOVS     r0,#7
        BL       uartSendCmd
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L7.40|
        DCD      ||.bss||

        AREA ||i.WB_music_speed||, CODE, READONLY, ALIGN=2

WB_music_speed PROC
        PUSH     {r4,lr}
        LDR      r0,|L8.40|
        MOVS     r1,#0xaa
        STRB     r1,[r0,#0]
        MOVS     r1,#0
        STRB     r1,[r0,#1]
        MOVS     r2,#3
        STRB     r2,[r0,#2]
        MOVS     r2,#4
        STRB     r2,[r0,#3]
        STRB     r1,[r0,#4]
        MOVS     r1,#1
        STRB     r1,[r0,#5]
        MOVS     r1,#0xf8
        STRB     r1,[r0,#6]
        MOV      r1,r0
        MOVS     r0,#7
        BL       uartSendCmd
        POP      {r4,pc}
        ENDP

|L8.40|
        DCD      ||.bss||

        AREA ||i.WB_next_song||, CODE, READONLY, ALIGN=1

WB_next_song PROC
        PUSH     {r4,lr}
        MOVS     r0,#0x34
        BL       WB_MMI_commend
        POP      {r4,pc}
        ENDP


        AREA ||i.WB_nolink_pairing||, CODE, READONLY, ALIGN=1

WB_nolink_pairing PROC
        PUSH     {r4,lr}
        MOVS     r0,#0x50
        BL       WB_MMI_commend
        POP      {r4,pc}
        ENDP


        AREA ||i.WB_open_call||, CODE, READONLY, ALIGN=1

WB_open_call PROC
        PUSH     {r4,lr}
        MOVS     r0,#4
        BL       WB_MMI_commend
        POP      {r4,pc}
        ENDP


        AREA ||i.WB_play_pause||, CODE, READONLY, ALIGN=1

WB_play_pause PROC
        PUSH     {r4,lr}
        MOVS     r0,#0x32
        BL       WB_MMI_commend
        POP      {r4,pc}
        ENDP


        AREA ||i.WB_reject_call||, CODE, READONLY, ALIGN=1

WB_reject_call PROC
        PUSH     {r4,lr}
        MOVS     r0,#5
        BL       WB_MMI_commend
        POP      {r4,pc}
        ENDP


        AREA ||i.WB_stop_speed||, CODE, READONLY, ALIGN=2

WB_stop_speed PROC
        PUSH     {r4,lr}
        LDR      r0,|L14.40|
        MOVS     r1,#0xaa
        STRB     r1,[r0,#0]
        MOVS     r1,#0
        STRB     r1,[r0,#1]
        MOVS     r2,#3
        STRB     r2,[r0,#2]
        MOVS     r2,#4
        STRB     r2,[r0,#3]
        STRB     r1,[r0,#4]
        STRB     r1,[r0,#5]
        MOVS     r1,#0xf9
        STRB     r1,[r0,#6]
        MOV      r1,r0
        MOVS     r0,#7
        BL       uartSendCmd
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L14.40|
        DCD      ||.bss||

        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.bss||, DATA, NOINIT, ALIGN=0

WB_cmd
        %        14

        AREA ||.data||, DATA, ALIGN=0

WB_paired_flag
        DCB      0x00

        AREA ||area_number.19||, DATA, ALIGN=0

        EXPORTAS ||area_number.19||, ||.data||
WB_paired_back_flag
        DCB      0x00

        AREA ||area_number.20||, DATA, ALIGN=0

        EXPORTAS ||area_number.20||, ||.data||
WB_paried_msg
        DCB      0x48,0x58,0x31

        AREA ||area_number.21||, DATA, ALIGN=0

        EXPORTAS ||area_number.21||, ||.data||
WB_call_status
        DCB      0x00

        EXPORT WB_HF_connect [CODE]
        EXPORT WB_MMI_commend [CODE]
        EXPORT WB_close_call [CODE]
        EXPORT WB_enter_pairing [CODE]
        EXPORT WB_get_version [CODE]
        EXPORT WB_last_song [CODE]
        EXPORT WB_music_back [CODE]
        EXPORT WB_music_speed [CODE]
        EXPORT WB_next_song [CODE]
        EXPORT WB_nolink_pairing [CODE]
        EXPORT WB_open_call [CODE]
        EXPORT WB_play_pause [CODE]
        EXPORT WB_reject_call [CODE]
        EXPORT WB_stop_speed [CODE]
        EXPORT WB_cmd [DATA,SIZE=14]
        EXPORT WB_paired_flag [DATA,SIZE=1]
        EXPORT WB_paired_back_flag [DATA,SIZE=1]
        EXPORT WB_paried_msg [DATA,SIZE=3]
        EXPORT WB_call_status [DATA,SIZE=1]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT uartSendCmd [CODE]

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,3
        ATTR SETSTRING Tag_conformance,"2.06"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
