; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--debug -c --asm --info=totals -o.\output\irkey.o --depend=.\output\irkey.d --cpu=Cortex-M0 --apcs=interwork -O3 -I..\CMSIS\CM0\DeviceSupport\Nuvoton\NUC123Series -I..\CMSIS\CM0\CoreSupport -I..\INC\DrvInc -I..\INC\SysInc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -D__MICROLIB --omf_browse=.\output\irkey.crf ..\AppSrc\irKey.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||.text||, CODE, READONLY, ALIGN=2

ir_error PROC
        LDR      r1,|L1.824|
        MOVS     r0,#0
        STRB     r0,[r1,#1]
        BX       lr
        ENDP

putKey2Pool PROC
        LDR      r1,|L1.824|
        ADDS     r1,r1,#0x20
        MOV      r2,r1
        LDR      r3,[r1,#0]  ; ir_keyword_pool
        ADDS     r2,r2,#8
        STRB     r0,[r3,r2]
        MOVS     r0,#0
        STR      r0,[r1,#0]  ; ir_keyword_pool
        BX       lr
        ENDP

IrKeyRemap PROC
        PUSH     {r3-r5,lr}
        STR      r0,[sp,#0]
        MOV      r0,sp
        LDRB     r0,[r0,#2]
        ADR      r1,|L1.828|
        MOV      r4,r0
        BL       uartdecode
        MOV      r0,sp
        LDRH     r0,[r0,#0]
        MOVS     r1,#0xff
        LSLS     r1,r1,#8
        CMP      r0,r1
        BNE      |L1.94|
        MOV      r0,sp
        LDRB     r0,[r0,#3]
        MVNS     r0,r0
        UXTB     r0,r0
        CMP      r4,r0
        BNE      |L1.94|
        CMP      r4,#0x10
        BEQ      |L1.102|
        BGT      |L1.86|
        CMP      r4,#0xb
        BEQ      |L1.98|
        CMP      r4,#0xd
        BEQ      |L1.106|
        CMP      r4,#0xe
        BNE      |L1.94|
        B        |L1.110|
|L1.86|
        CMP      r4,#0x60
        BEQ      |L1.118|
        CMP      r4,#0x61
        BEQ      |L1.114|
|L1.94|
        MOVS     r0,#0x55
        POP      {r3-r5,pc}
|L1.98|
        MOVS     r0,#0x58
        POP      {r3-r5,pc}
|L1.102|
        MOVS     r0,#0x5e
        POP      {r3-r5,pc}
|L1.106|
        MOVS     r0,#0x5c
        POP      {r3-r5,pc}
|L1.110|
        MOVS     r0,#0x5d
        POP      {r3-r5,pc}
|L1.114|
        MOVS     r0,#0x59
        POP      {r3-r5,pc}
|L1.118|
        MOVS     r0,#0x5b
        POP      {r3-r5,pc}
        ENDP

IR_IRQHandler PROC
        PUSH     {r3-r7,lr}
        MOVS     r0,#0xff
        LDR      r1,|L1.840|
        ADDS     r0,#1
        STR      r0,[r1,#0x20]
        LDR      r0,|L1.844|
        LDR      r1,[r0,#0xc]
        LDR      r2,|L1.824|
        LDR      r0,[r2,#4]  ; tcap_old
        STR      r1,[r2,#4]  ; tcap_old
        SUBS     r0,r1,r0
        LSLS     r0,r0,#8
        LSRS     r0,r0,#8
        LDR      r7,[r2,#0x10]  ; ir_pulse_compensation
        MOV      r4,r0
        CMP      r7,#0x28
        BEQ      |L1.158|
        ADDS     r0,r7,r4
|L1.158|
        LDR      r1,|L1.848|
        ADDS     r1,r0,r1
        CMP      r1,#0x31
        BCC      |L1.182|
        LDR      r1,|L1.852|
        ADDS     r1,r0,r1
        CMP      r1,#0x31
        BCC      |L1.182|
        LDR      r1,|L1.856|
        ADDS     r1,r0,r1
        CMP      r1,#0x31
        BCS      |L1.184|
|L1.182|
        ADDS     r0,r0,#0x32
|L1.184|
        LDR      r1,|L1.852|
        SUBS     r1,r1,#0x95
        ADDS     r1,r0,r1
        CMP      r1,#0x3c
        BCC      |L1.214|
        MOVS     r1,#0x4b
        LSLS     r1,r1,#4
        SUBS     r1,r0,r1
        CMP      r1,#0x3c
        BCC      |L1.214|
        LDR      r1,|L1.856|
        SUBS     r1,r1,#0x95
        ADDS     r1,r0,r1
        CMP      r1,#0x3c
        BCS      |L1.216|
|L1.214|
        SUBS     r0,r0,#0x3c
|L1.216|
        LDR      r1,|L1.860|
        MOVS     r2,#0x7d
        ADDS     r1,r4,r1
        LSLS     r2,r2,#3
        CMP      r1,r2
        BCS      |L1.230|
        MOV      r0,r4
|L1.230|
        LDR      r1,|L1.864|
        ADDS     r1,r0,r1
        CMP      r1,#0x9f
        BCS      |L1.240|
        ADDS     r0,r0,#0xa0
|L1.240|
        MOVS     r1,#0x64
        BL       __aeabi_uidivmod
        LDR      r1,|L1.824|
        STR      r0,[sp,#0]
        MOVS     r5,#0x28
        LDRB     r6,[r1,#1]
        CMP      r0,#0x18
        BLS      |L1.382|
        CMP      r6,#2
        BEQ      |L1.372|
        MOVS     r1,#0xa
        BL       __aeabi_uidivmod
        MOV      r1,r0
        LDR      r0,|L1.824|
        MOVS     r2,#3
        LDRB     r0,[r0,#2]
        CMP      r1,#0x28
        BEQ      |L1.350|
        BGT      |L1.292|
        CMP      r1,#0xb
        BEQ      |L1.358|
        CMP      r1,#0xd
        BNE      |L1.300|
        B        |L1.322|
|L1.292|
        CMP      r1,#0x29
        BEQ      |L1.350|
        CMP      r1,#0x60
        BEQ      |L1.350|
|L1.300|
        LDR      r0,|L1.824|
        ADDS     r1,r7,r4
        STR      r1,[r0,#0x10]  ; ir_pulse_compensation
|L1.306|
        MOVS     r1,#0xf
        LDR      r0,[sp,#0]
        LSLS     r1,r1,#6
        CMP      r0,r1
        BLS      |L1.320|
        LDR      r0,|L1.824|
        STR      r5,[r0,#0x10]  ; ir_pulse_compensation
|L1.320|
        POP      {r3-r7,pc}
|L1.322|
        LDR      r0,|L1.824|
        MOVS     r1,#2
        STR      r5,[r0,#0x10]  ; ir_pulse_compensation
        STRB     r1,[r0,#1]
        SUBS     r1,r1,#3
        STR      r1,[r0,#8]  ; ir_key_bits
        MOVS     r1,#1
        STR      r1,[r0,#0xc]  ; ir_key_bit_mask
        POP      {r3-r7,pc}
|L1.340|
        CMP      r6,#1
        BNE      |L1.306|
        STRB     r2,[r1,#1]
        STR      r5,[r1,#0x10]  ; ir_pulse_compensation
        POP      {r3-r7,pc}
|L1.350|
        LDR      r1,|L1.824|
        CMP      r0,#0x55
        BNE      |L1.340|
        B        |L1.306|
|L1.358|
        LDR      r1,|L1.824|
        CMP      r6,#3
        BNE      |L1.306|
        MOVS     r2,#1
        STR      r5,[r1,#0x10]  ; ir_pulse_compensation
        STRB     r2,[r1,#1]
        B        |L1.432|
|L1.372|
        LDR      r0,|L1.824|
        MOVS     r1,#0
        STR      r5,[r0,#0x10]  ; ir_pulse_compensation
        STRB     r1,[r0,#1]
        POP      {r3-r7,pc}
|L1.382|
        LDR      r0,|L1.824|
        CMP      r6,#2
        BNE      |L1.406|
        MOV      r3,r0
        LDR      r2,[r3,#0xc]
        LDR      r6,[sp,#0]
        LSLS     r1,r2,#1
        LDR      r3,[r3,#8]
        CMP      r6,#0xb
        BEQ      |L1.412|
        CMP      r6,#0x16
        BEQ      |L1.438|
|L1.406|
        ADDS     r1,r7,r4
        STR      r1,[r0,#0x10]  ; ir_pulse_compensation
|L1.410|
        POP      {r3-r7,pc}
|L1.412|
        BICS     r3,r3,r2
        STR      r5,[r0,#0x10]  ; ir_pulse_compensation
        STR      r3,[r0,#8]  ; ir_key_bits
        MOV      r4,r0
        STR      r1,[r0,#0xc]  ; ir_key_bit_mask
        CMP      r1,#0
        BNE      |L1.410|
        MOVS     r0,#1
        STRB     r0,[r4,#1]
        B        |L1.452|
|L1.432|
        BL       putKey2Pool
|L1.436|
        POP      {r3-r7,pc}
|L1.438|
        STR      r5,[r0,#0x10]  ; ir_pulse_compensation
        STR      r1,[r0,#0xc]  ; ir_key_bit_mask
        CMP      r1,#0
        BNE      |L1.436|
        MOVS     r1,#1
        MOV      r4,r0
        STRB     r1,[r0,#1]
|L1.452|
        MOV      r0,r3
        BL       IrKeyRemap
        STRB     r0,[r4,#2]
        B        |L1.432|
        ENDP

irClkInit PROC
        MOVS     r1,#0x20
        MOVS     r0,#5
        LSLS     r0,r0,#28
        LDR      r2,[r0,#0xc]
        ORRS     r2,r2,r1
        STR      r2,[r0,#0xc]
        LDR      r2,[r0,#0xc]
        BICS     r2,r2,r1
        STR      r2,[r0,#0xc]
        LDR      r0,|L1.868|
        LDR      r1,[r0,#0x14]
        MOVS     r2,#7
        LSLS     r2,r2,#20
        BICS     r1,r1,r2
        STR      r1,[r0,#0x14]
        LDR      r2,[r0,#8]
        MOVS     r1,#0x20
        ORRS     r2,r2,r1
        STR      r2,[r0,#8]
        BX       lr
        ENDP

irKeyInit PROC
        PUSH     {r4,lr}
        LDR      r0,|L1.840|
        LDR      r1,[r0,#0]
        MOVS     r2,#3
        MOVS     r3,#0x10
        LSLS     r2,r2,#16
        BICS     r1,r1,r2
        STR      r1,[r0,#0]
        LDR      r2,[r0,#0x18]
        LSLS     r1,r3,#4
        BICS     r2,r2,r1
        STR      r2,[r0,#0x18]
        LDR      r2,[r0,#0x1c]
        LDR      r4,|L1.872|
        BICS     r2,r2,r4
        ORRS     r2,r2,r1
        STR      r2,[r0,#0x1c]
        LDR      r2,[r0,#0x14]
        ORRS     r2,r2,r1
        STR      r2,[r0,#0x14]
        LDR      r1,|L1.876|
        MOVS     r0,#0x2a
        STR      r0,[r1,#0]
        LDR      r0,|L1.880|
        LDR      r1,[r0,#0]
        MOVS     r2,#0x80
        LSRS     r1,r1,#8
        LSLS     r1,r1,#8
        ORRS     r1,r1,r2
        STR      r1,[r0,#0]
        LDR      r0,|L1.884|
        STR      r3,[r0,#0]
        LDR      r4,|L1.844|
        MOVS     r3,#3
        LSLS     r3,r3,#27
        LDR      r2,|L1.888|
        MOVS     r1,#0xb
        MOV      r0,r4
        BL       DrvTIMER_Init
        LDR      r0,[r4,#0]
        LSLS     r1,r4,#25
        ORRS     r0,r0,r1
        STR      r0,[r4,#0]
        POP      {r4,pc}
        ENDP

initIRKeyPool PROC
        LDR      r2,|L1.824|
        MOVS     r0,#1
        MOVS     r1,#0x55
        ADDS     r2,r2,#0x20
        B        |L1.606|
|L1.602|
        ADDS     r3,r2,r0
        STRB     r1,[r3,#8]
|L1.606|
        SUBS     r0,r0,#1
        BCS      |L1.602|
        BX       lr
        ENDP

getIrKey PROC
        PUSH     {r4-r7,lr}
        LDR      r3,|L1.824|
        LDR      r1,|L1.824|
        ADDS     r3,r3,#0x20
        MOV      r5,r3
        LDR      r6,[r3,#4]  ; ir_keyword_pool
        ADDS     r5,r5,#8
        LDRB     r0,[r6,r5]
        MOVS     r4,#0x55
        MOVS     r7,#3
        LDRB     r2,[r1,#3]
        CMP      r0,#0x55
        BEQ      |L1.648|
        STRB     r4,[r6,r5]
        MOVS     r4,#0
        STR      r4,[r3,#4]  ; ir_keyword_pool
        STR      r7,[r1,#0x1c]  ; ir_key_relax_counter
        B        |L1.674|
|L1.648|
        LDR      r0,[r1,#0x1c]  ; ir_key_relax_counter
        SUBS     r0,r0,#1
        STR      r0,[r1,#0x1c]  ; ir_key_relax_counter
        BEQ      |L1.666|
        CMP      r2,#0x5c
        BEQ      |L1.672|
        CMP      r2,#0x5d
        BNE      |L1.708|
        B        |L1.672|
|L1.666|
        MOV      r0,r4
        STR      r7,[r1,#0x1c]  ; ir_key_relax_counter
        B        |L1.730|
|L1.672|
        MOV      r0,r2
|L1.674|
        CMP      r0,r2
        BNE      |L1.718|
        CMP      r0,#0x5c
        BEQ      |L1.686|
        CMP      r0,#0x5d
        BNE      |L1.708|
|L1.686|
        LDR      r2,[r1,#0x18]  ; key_c_c
        ADDS     r2,r2,#1
        STR      r2,[r1,#0x18]  ; key_c_c
        CMP      r2,#3
        BCC      |L1.708|
        MOVS     r2,#0
        STR      r2,[r1,#0x18]  ; key_c_c
        LDR      r2,[r1,#0x14]  ; key_c_r
        SUBS     r2,r2,#1
        STR      r2,[r1,#0x14]  ; key_c_r
        BEQ      |L1.712|
|L1.708|
        MOVS     r0,#0x55
        POP      {r4-r7,pc}
|L1.712|
        MOVS     r2,#1
        STR      r2,[r1,#0x14]  ; key_c_r
        POP      {r4-r7,pc}
|L1.718|
        CMP      r0,#0x5c
        BEQ      |L1.726|
        CMP      r0,#0x5d
        BNE      |L1.730|
|L1.726|
        MOVS     r2,#2
        STR      r2,[r1,#0x14]  ; key_c_r
|L1.730|
        STRB     r0,[r1,#3]
        POP      {r4-r7,pc}
        ENDP

devTestDealIrKey PROC
        BX       lr
        ENDP

devStartDealIrKey PROC
        PUSH     {r4,lr}
        BL       delStartkey
        POP      {r4,pc}
        ENDP

devStartbyDealIrKey PROC
        PUSH     {r4,lr}
        BL       delStandbytkey
        POP      {r4,pc}
        ENDP

irKeyScan PROC
        PUSH     {r4,lr}
        BL       getIrKey
        BL       delStartkey
        LDR      r0,|L1.824|
        LDR      r3,|L1.892|
        MOVS     r2,#0
        MOVS     r1,#0x50
        LDRB     r0,[r0,#0]  ; ir_key_task
        BL       startATask
        POP      {r4,pc}
        ENDP

irKeyTaskInit PROC
        PUSH     {r4,lr}
        BL       irKeyInit
        BL       getATask
        LDR      r1,|L1.824|
        CMP      r0,#0xff
        STRB     r0,[r1,#0]
        BEQ      |L1.806|
        LDR      r3,|L1.892|
        MOVS     r2,#0
        MOVS     r1,#0x50
        BL       startATask
|L1.806|
        POP      {r4,pc}
        ENDP

GPAB_IRQHandler PROC
        LDR      r0,|L1.840|
        LDR      r0,[r0,#0x20]
        SUBS     r1,r0,#7
        SUBS     r1,r1,#0xf9
        BNE      |L1.820|
        B        IR_IRQHandler
|L1.820|
        BX       lr
        ENDP

        DCW      0x0000
|L1.824|
        DCD      ||.data||
|L1.828|
        DCB      "  byte2: ",0
        DCB      0
        DCB      0
|L1.840|
        DCD      0x50004040
|L1.844|
        DCD      0x40110020
|L1.848|
        DCD      0xfffffbe5
|L1.852|
        DCD      0xfffff799
|L1.856|
        DCD      0xfffff34d
|L1.860|
        DCD      0xffffcd38
|L1.864|
        DCD      0xffff645f
|L1.868|
        DCD      0x50000200
|L1.872|
        DCD      0x01000100
|L1.876|
        DCD      0x50004180
|L1.880|
        DCD      0xe000e404
|L1.884|
        DCD      0xe000e100
|L1.888|
        DCD      0x000f4240
|L1.892|
        DCD      irKeyScan

        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.data||, DATA, ALIGN=2

ir_key_task
        DCB      0xff
ir_state
        DCB      0x01
last_key
        DCB      0x55
ir_key_bak
        DCB      0x55
tcap_old
        DCD      0x00000000
ir_key_bits
        DCD      0x00000000
ir_key_bit_mask
        DCD      0x00000000
ir_pulse_compensation
        DCD      0x00000028
key_c_r
        DCD      0x00000000
key_c_c
        DCD      0x00000000
ir_key_relax_counter
        DCD      0x00000003
ir_keyword_pool
        DCD      0x00000000
        DCD      0x00000000
        DCB      0x55,0x00,0x00,0x00

        AREA ||area_number.5||, DATA, ALIGN=0

        EXPORTAS ||area_number.5||, ||.data||
ir_keyword
        DCB      0x00

        EXPORT ir_error [CODE]
        EXPORT putKey2Pool [CODE]
        EXPORT IrKeyRemap [CODE]
        EXPORT IR_IRQHandler [CODE]
        EXPORT irClkInit [CODE]
        EXPORT irKeyInit [CODE]
        EXPORT initIRKeyPool [CODE]
        EXPORT getIrKey [CODE]
        EXPORT devTestDealIrKey [CODE]
        EXPORT devStartDealIrKey [CODE]
        EXPORT devStartbyDealIrKey [CODE]
        EXPORT irKeyScan [CODE]
        EXPORT irKeyTaskInit [CODE]
        EXPORT GPAB_IRQHandler [CODE]
        EXPORT ir_key_task [DATA,SIZE=1]
        EXPORT last_key [DATA,SIZE=1]
        EXPORT ir_key_bits [DATA,SIZE=4]
        EXPORT ir_keyword_pool [DATA,SIZE=12]
        EXPORT ir_keyword [DATA,SIZE=1]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT uartdecode [CODE]
        IMPORT __aeabi_uidivmod [CODE]
        IMPORT DrvTIMER_Init [CODE]
        IMPORT delStartkey [CODE]
        IMPORT delStandbytkey [CODE]
        IMPORT startATask [CODE]
        IMPORT getATask [CODE]

        KEEP ir_state
        KEEP ir_key_bak
        KEEP tcap_old
        KEEP ir_key_bit_mask
        KEEP ir_pulse_compensation
        KEEP key_c_r
        KEEP key_c_c
        KEEP ir_key_relax_counter

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,3
        ATTR SETSTRING Tag_conformance,"2.06"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
