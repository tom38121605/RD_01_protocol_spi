; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--debug -c --asm --info=totals -o.\output\sta339.o --depend=.\output\sta339.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\CMSIS\CM0\DeviceSupport\Nuvoton\NUC123Series -I..\CMSIS\CM0\CoreSupport -I..\INC\DrvInc -I..\INC\SysInc -IC:\Keil_v472\ARM\RV31\INC -IC:\Keil_v472\ARM\CMSIS\Include -D__MICROLIB --omf_browse=.\output\sta339.crf ..\AppSrc\sta339.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||.text||, CODE, READONLY, ALIGN=2

ampSendCmd_38 PROC
        PUSH     {r2-r6,lr}
        MOV      r4,r0
        MOV      r5,r1
        LDR      r0,|L1.1008|
        MOVS     r1,#1
        MOVS     r3,#2
        MOVS     r2,#0
        STR      r1,[sp,#0]
        STR      r0,[sp,#4]
        MOVS     r1,#0x38
        LDR      r0,|L1.1012|
        BL       initI2cDataBlock
        LDR      r0,|L1.1008|
        STRB     r4,[r0,#1]
        STRB     r5,[r0,#2]
        MOVS     r0,#0xa2
        LDR      r1,|L1.1008|
        STRB     r0,[r1,#0]
        MOVS     r1,#0
        LDR      r0,|L1.1012|
        BL       addI2cChain
        NOP      
|L1.48|
        LDR      r0,|L1.1008|
        LDRB     r0,[r0,#0]  ; amp_status
        CMP      r0,#0xa2
        BEQ      |L1.48|
        LDR      r0,|L1.1008|
        LDRB     r0,[r0,#0]  ; amp_status
        POP      {r2-r6,pc}
        ENDP

ampGetCmd_38 PROC
        PUSH     {r2-r4,lr}
        MOV      r4,r0
        LDR      r0,|L1.1008|
        MOVS     r1,#1
        MOVS     r3,#2
        MOV      r2,r1
        STR      r1,[sp,#0]
        STR      r0,[sp,#4]
        MOVS     r1,#0x38
        LDR      r0,|L1.1012|
        BL       initI2cDataBlock
        LDR      r0,|L1.1008|
        STRB     r4,[r0,#1]
        MOVS     r1,#0
        STRB     r1,[r0,#2]
        MOVS     r0,#0xa2
        LDR      r1,|L1.1008|
        STRB     r0,[r1,#0]
        MOVS     r1,#0
        LDR      r0,|L1.1012|
        BL       addI2cChain
        NOP      
|L1.110|
        LDR      r0,|L1.1008|
        LDRB     r0,[r0,#0]  ; amp_status
        CMP      r0,#0xa2
        BEQ      |L1.110|
        LDR      r0,|L1.1008|
        LDRB     r0,[r0,#0]  ; amp_status
        LDR      r0,|L1.1008|
        LDRB     r0,[r0,#2]
        POP      {r2-r4,pc}
        ENDP

ampInitAllConf PROC
        PUSH     {r4,lr}
        MOVS     r4,#0
        B        |L1.176|
|L1.134|
        CMP      r4,#0x58
        BCC      |L1.140|
        B        |L1.178|
|L1.140|
        LDR      r3,|L1.1016|
        ADDS     r2,r4,#1
        LDRB     r1,[r3,r2]
        MOV      r2,r3
        LDRB     r0,[r2,r4]
        BL       ampSendCmd_38
        ADDS     r4,r4,#2
        BL       SYS_UnlockReg
        BL       WDT_TIMER_RESET
        NOP      
        MOVS     r0,#0
        LDR      r1,|L1.1020|
        STR      r0,[r1,#0]
        NOP      
        NOP      
|L1.176|
        B        |L1.134|
|L1.178|
        NOP      
        MOVS     r1,#0xdf
        MOVS     r0,#5
        BL       ampSendCmd_38
        LDR      r0,|L1.1008|
        LDRB     r0,[r0,#0]  ; amp_status
        POP      {r4,pc}
        ENDP

ampInit PROC
        PUSH     {r4,lr}
        BL       getATask
        LDR      r1,|L1.1024|
        STRB     r0,[r1,#0]
        POP      {r4,pc}
        ENDP

ampGetStatus PROC
        PUSH     {r2-r4,lr}
        MOVS     r4,#0
        NOP      
        B        |L1.296|
|L1.214|
        LDR      r1,|L1.1008|
        STRB     r4,[r1,#1]
        MOVS     r1,#0
        LDR      r0,|L1.1008|
        STRB     r1,[r0,#2]
        MOVS     r0,#0xa2
        LDR      r1,|L1.1008|
        STRB     r0,[r1,#0]
        MOV      r0,r1
        MOVS     r1,#1
        MOVS     r3,#2
        MOV      r2,r1
        STR      r1,[sp,#0]
        STR      r0,[sp,#4]
        MOVS     r1,#0x38
        LDR      r0,|L1.1012|
        BL       initI2cDataBlock
        MOVS     r1,#0
        LDR      r0,|L1.1012|
        BL       addI2cChain
        NOP      
|L1.260|
        LDR      r0,|L1.1008|
        LDRB     r0,[r0,#0]  ; amp_status
        CMP      r0,#0xa2
        BEQ      |L1.260|
        LDR      r0,|L1.1008|
        LDRB     r0,[r0,#2]
        LDR      r1,|L1.1028|
        STRB     r0,[r1,r4]
        BL       SYS_UnlockReg
        BL       WDT_TIMER_RESET
        NOP      
        MOVS     r0,#0
        LDR      r1,|L1.1020|
        STR      r0,[r1,#0]
        NOP      
        ADDS     r4,r4,#1
|L1.296|
        CMP      r4,#0x16
        BCC      |L1.214|
        MOVS     r0,#0x2d
        LDR      r1,|L1.1008|
        STRB     r0,[r1,#1]
        MOVS     r1,#0
        LDR      r0,|L1.1008|
        STRB     r1,[r0,#2]
        MOVS     r0,#0xa2
        LDR      r1,|L1.1008|
        STRB     r0,[r1,#0]
        MOVS     r0,#0x38
        LDR      r1,|L1.1012|
        STRB     r0,[r1,#0]
        MOVS     r1,#0
        LDR      r0,|L1.1012|
        BL       addI2cChain
        NOP      
|L1.334|
        LDR      r0,|L1.1008|
        LDRB     r0,[r0,#0]  ; amp_status
        CMP      r0,#0xa2
        BEQ      |L1.334|
        LDR      r0,|L1.1008|
        LDRB     r0,[r0,#2]
        LDR      r1,|L1.1028|
        STRB     r0,[r1,#0x16]
        POP      {r2-r4,pc}
        ENDP

ampSendEqs_38 PROC
        PUSH     {r4-r6,lr}
        MOV      r5,r0
        MOV      r6,r1
        CMP      r5,#0x3f
        BHI      |L1.370|
        CMP      r6,#0x3f
        BHI      |L1.370|
        CMP      r5,r6
        BLS      |L1.372|
|L1.370|
        POP      {r4-r6,pc}
|L1.372|
        MOV      r4,r5
        B        |L1.442|
|L1.376|
        MOVS     r1,#0
        MOVS     r0,#0x31
        BL       ampSendCmd_38
        UXTB     r1,r4
        MOVS     r0,#0x16
        BL       ampSendCmd_38
        LSLS     r0,r4,#2
        LDR      r1,|L1.1032|
        ADDS     r1,r0,r1
        LDR      r0,|L1.1036|
        LDR      r1,[r1,#0]
        STR      r1,[r0,#0]  ; cfg_data
        LDRB     r1,[r0,#2]  ; cfg_data
        MOVS     r0,#0x17
        BL       ampSendCmd_38
        LDR      r0,|L1.1036|
        LDRB     r1,[r0,#1]  ; cfg_data
        MOVS     r0,#0x18
        BL       ampSendCmd_38
        LDR      r0,|L1.1036|
        LDRB     r1,[r0,#0]  ; cfg_data
        MOVS     r0,#0x19
        BL       ampSendCmd_38
        MOVS     r1,#1
        MOVS     r0,#0x26
        BL       ampSendCmd_38
        ADDS     r4,r4,#1
|L1.442|
        CMP      r4,r6
        BLS      |L1.376|
        NOP      
        B        |L1.370|
        ENDP

ampSetEqDefault PROC
        PUSH     {r3-r7,lr}
        MOV      r5,r0
        MOV      r7,r1
        MOV      r6,r2
        MOVS     r4,#0
        MOVS     r1,#0
        MOVS     r0,#0x31
        BL       ampSendCmd_38
        UXTB     r1,r5
        MOVS     r0,#0x16
        BL       ampSendCmd_38
        B        |L1.538|
|L1.478|
        LSLS     r0,r4,#2
        ADDS     r1,r0,r6
        LDR      r0,|L1.1036|
        LDR      r1,[r1,#0]
        STR      r1,[r0,#0]  ; cfg_data
        MOV      r2,r0
        LDRB     r1,[r2,#2]  ; cfg_data
        LSLS     r2,r4,#1
        ADDS     r2,r4,r2
        ADDS     r2,r2,#0x17
        UXTB     r0,r2
        BL       ampSendCmd_38
        LDR      r2,|L1.1036|
        LDRB     r1,[r2,#1]  ; cfg_data
        LSLS     r2,r4,#1
        ADDS     r2,r4,r2
        ADDS     r2,r2,#0x18
        UXTB     r0,r2
        BL       ampSendCmd_38
        LDR      r2,|L1.1036|
        LDRB     r1,[r2,#0]  ; cfg_data
        LSLS     r2,r4,#1
        ADDS     r2,r4,r2
        ADDS     r2,r2,#0x19
        UXTB     r0,r2
        BL       ampSendCmd_38
        ADDS     r4,r4,#1
|L1.538|
        CMP      r4,#5
        BCC      |L1.478|
        MOVS     r1,#2
        MOVS     r0,#0x26
        BL       ampSendCmd_38
        POP      {r3-r7,pc}
        ENDP

turnDownVolume PROC
        PUSH     {r4,lr}
        MOVS     r4,#0
        LDR      r0,|L1.1008|
        LDRB     r0,[r0,#0]  ; amp_status
        CMP      r0,#0xa0
        BNE      |L1.736|
        LDR      r0,|L1.1008|
        LDRB     r0,[r0,#2]
        LDR      r1,|L1.1040|
        LDRB     r1,[r1,#0]  ; amp_treble_tbl
        CMP      r0,r1
        BNE      |L1.578|
        B        |L1.706|
|L1.578|
        B        |L1.662|
|L1.580|
        LDR      r0,|L1.1008|
        LDRB     r1,[r0,#2]
        LDR      r0,|L1.1044|
        LDR      r0,[r0,#0]  ; vlmtbl_index
        SUBS     r0,r0,#1
        LDR      r2,|L1.1040|
        LDRB     r0,[r2,r0]
        CMP      r1,r0
        BGE      |L1.636|
        LDR      r0,|L1.1008|
        LDRB     r0,[r0,#2]
        MOV      r1,r2
        LDR      r2,|L1.1044|
        LDR      r2,[r2,#0]  ; vlmtbl_index
        LDRB     r1,[r1,r2]
        CMP      r0,r1
        BLT      |L1.636|
        LDR      r0,|L1.1044|
        LDR      r0,[r0,#0]  ; vlmtbl_index
        SUBS     r0,r0,#1
        LDR      r1,|L1.1040|
        LDRB     r1,[r1,r0]
        LDR      r0,|L1.1008|
        STRB     r1,[r0,#2]
        LDR      r0,|L1.1044|
        LDR      r0,[r0,#0]  ; vlmtbl_index
        SUBS     r4,r0,#1
        B        |L1.670|
|L1.636|
        LDR      r0,|L1.1044|
        LDR      r0,[r0,#0]  ; vlmtbl_index
        CMP      r0,#1
        BNE      |L1.652|
        MOVS     r0,#0x20
        LDR      r1,|L1.1044|
        MOV      r4,r0
        STR      r0,[r1,#0]  ; vlmtbl_index
|L1.652|
        LDR      r0,|L1.1044|
        LDR      r0,[r0,#0]  ; vlmtbl_index
        SUBS     r0,r0,#1
        LDR      r1,|L1.1044|
        STR      r0,[r1,#0]  ; vlmtbl_index
|L1.662|
        LDR      r0,|L1.1044|
        LDR      r0,[r0,#0]  ; vlmtbl_index
        CMP      r0,#0
        BNE      |L1.580|
|L1.670|
        NOP      
        LDR      r0,|L1.1044|
        LDR      r0,[r0,#0]  ; vlmtbl_index
        CMP      r0,#1
        BHI      |L1.704|
        MOVS     r0,#0x1f
        LDR      r1,|L1.1044|
        MOV      r4,r0
        STR      r0,[r1,#0]  ; vlmtbl_index
        LDR      r3,|L1.1048|
        MOVS     r2,#0
        MOVS     r1,#3
        LDR      r0,|L1.1052|
        LDRB     r0,[r0,#0]  ; pt2314_id_CIC
        BL       startATask
|L1.702|
        POP      {r4,pc}
|L1.704|
        NOP      
|L1.706|
        LDR      r0,|L1.1056|
        LDRB     r1,[r0,r4]
        MOVS     r0,#0xa
        BL       ampSendCmd_38
        LDR      r0,|L1.1056|
        LDRB     r1,[r0,r4]
        MOVS     r0,#9
        BL       ampSendCmd_38
        LDR      r0,|L1.1040|
        LDRB     r1,[r0,r4]
        MOVS     r0,#8
        BL       ampSendCmd_38
|L1.736|
        LDR      r3,|L1.1048|
        MOVS     r2,#0
        MOVS     r1,#3
        LDR      r0,|L1.1052|
        LDRB     r0,[r0,#0]  ; pt2314_id_CIC
        BL       startATask
        NOP      
        B        |L1.702|
        ENDP

turnUpVolume PROC
        PUSH     {r4,lr}
        MOVS     r4,#0
        LDR      r0,|L1.1008|
        LDRB     r0,[r0,#0]  ; amp_status
        CMP      r0,#0xa0
        BNE      |L1.876|
        LDR      r0,|L1.1044|
        LDR      r0,[r0,#0]  ; vlmtbl_index
        CMP      r0,#0x1f
        BCC      |L1.782|
        MOVS     r0,#0
        LDR      r1,|L1.1044|
        MOV      r4,r0
        STR      r0,[r1,#0]  ; vlmtbl_index
|L1.782|
        B        |L1.836|
|L1.784|
        LDR      r0,|L1.1008|
        LDRB     r0,[r0,#2]
        LDR      r1,|L1.1040|
        LDR      r2,|L1.1044|
        LDR      r2,[r2,#0]  ; vlmtbl_index
        LDRB     r1,[r1,r2]
        CMP      r0,r1
        BGT      |L1.826|
        LDR      r0,|L1.1008|
        LDRB     r1,[r0,#2]
        LDR      r2,|L1.1040|
        LDR      r0,|L1.1044|
        LDR      r0,[r0,#0]  ; vlmtbl_index
        ADDS     r0,r0,#1
        LDRB     r0,[r2,r0]
        CMP      r1,r0
        BLE      |L1.826|
        LDR      r0,|L1.1044|
        LDR      r0,[r0,#0]  ; vlmtbl_index
        ADDS     r4,r0,#1
        B        |L1.844|
|L1.826|
        LDR      r0,|L1.1044|
        LDR      r0,[r0,#0]  ; vlmtbl_index
        ADDS     r0,r0,#1
        LDR      r1,|L1.1044|
        STR      r0,[r1,#0]  ; vlmtbl_index
|L1.836|
        LDR      r0,|L1.1044|
        LDR      r0,[r0,#0]  ; vlmtbl_index
        CMP      r0,#0x1f
        BCC      |L1.784|
|L1.844|
        NOP      
        LDR      r0,|L1.1056|
        LDRB     r1,[r0,r4]
        MOVS     r0,#0xa
        BL       ampSendCmd_38
        LDR      r0,|L1.1056|
        LDRB     r1,[r0,r4]
        MOVS     r0,#9
        BL       ampSendCmd_38
        LDR      r0,|L1.1040|
        LDRB     r1,[r0,r4]
        MOVS     r0,#8
        BL       ampSendCmd_38
|L1.876|
        LDR      r3,|L1.1048|
        MOVS     r2,#0
        MOVS     r1,#3
        LDR      r0,|L1.1052|
        LDRB     r0,[r0,#0]  ; pt2314_id_CIC
        BL       startATask
        POP      {r4,pc}
        ENDP

ampMute PROC
        PUSH     {r4,lr}
        MOVS     r1,#0x1e
        MOVS     r0,#6
        BL       ampSendCmd_38
        POP      {r4,pc}
        ENDP

ChangInputVolumeCheck PROC
        PUSH     {r4,lr}
        LDR      r0,|L1.1060|
        LDRB     r0,[r0,#0]  ; amp_volume_change
        CMP      r0,#0xa0
        BNE      |L1.1156|
        LDR      r0,|L1.1064|
        LDRB     r0,[r0,#0]  ; change_input_state
        MOVS     r3,r0
        BL       __ARM_common_switch8
        DCB      0x0b,0xa7,0x07,0x08
        DCB      0x75,0xa3,0xa5,0xa6
        DCB      0x58,0x1f,0x76,0xa4
        DCB      0xa7,0x00
        B        |L1.1260|
        LDR      r0,|L1.1008|
        LDRB     r0,[r0,#2]
        LDR      r1,|L1.1040|
        LDR      r2,|L1.1068|
        LDR      r2,[r2,#0]  ; amp_volume
        LDRB     r1,[r1,r2]
        CMP      r0,r1
        BLE      |L1.962|
        BL       turnUpVolume
        B        |L1.984|
|L1.962|
        LDR      r0,|L1.1052|
        LDRB     r0,[r0,#0]  ; pt2314_id_CIC
        BL       stopATask
        LDR      r0,|L1.1040|
        LDRB     r1,[r0,#0]  ; amp_treble_tbl
        LDR      r0,|L1.1008|
        STRB     r1,[r0,#2]
        MOVS     r0,#0
        LDR      r1,|L1.1072|
        STRB     r0,[r1,#0]
|L1.984|
        B        |L1.1260|
        LDR      r0,|L1.1008|
        LDRB     r1,[r0,#2]
        LDR      r0,|L1.1040|
        LDR      r2,|L1.1068|
        LDR      r2,[r2,#0]  ; amp_volume
        LDRB     r0,[r0,r2]
        CMP      r1,r0
        BGE      |L1.1076|
        BL       turnDownVolume
        B        |L1.1098|
|L1.1008|
        DCD      amp_status
|L1.1012|
        DCD      amp_i2c_block
|L1.1016|
        DCD      amp_conf_38
|L1.1020|
        DCD      0x50000100
|L1.1024|
        DCD      amp_id
|L1.1028|
        DCD      amp_info
|L1.1032|
        DCD      amp_eq_tbl_38
|L1.1036|
        DCD      cfg_data
|L1.1040|
        DCD      amp_treble_tbl
|L1.1044|
        DCD      vlmtbl_index
|L1.1048|
        DCD      ChangInputVolumeCheck
|L1.1052|
        DCD      pt2314_id_CIC
|L1.1056|
        DCD      amp_bass_tbl
|L1.1060|
        DCD      amp_volume_change
|L1.1064|
        DCD      change_input_state
|L1.1068|
        DCD      amp_volume
|L1.1072|
        DCD      amp_volume_lock
|L1.1076|
        LDR      r0,|L1.2040|
        LDRB     r0,[r0,#0]  ; pt2314_id_CIC
        BL       stopATask
        LDR      r0,|L1.2044|
        LDRB     r1,[r0,#0]  ; amp_treble_tbl
        LDR      r0,|L1.2048|
        STRB     r1,[r0,#2]
        MOVS     r0,#0
        LDR      r1,|L1.2052|
        STRB     r0,[r1,#0]
|L1.1098|
        B        |L1.1260|
        LDR      r0,|L1.2048|
        LDRB     r0,[r0,#2]
        LDR      r1,|L1.2044|
        LDR      r2,|L1.2056|
        LDR      r2,[r2,#0]  ; amp_volume_back
        LDRB     r1,[r1,r2]
        CMP      r0,r1
        BLE      |L1.1136|
        LDR      r0,|L1.2056|
        LDR      r0,[r0,#0]  ; amp_volume_back
        LDR      r1,|L1.2060|
        STR      r0,[r1,#0]  ; amp_volume
        MOVS     r0,#2
        LDR      r1,|L1.2064|
        STRB     r0,[r1,#0]
        BL       turnUpVolume
        B        |L1.1154|
|L1.1136|
        LDR      r0,|L1.2056|
        LDR      r0,[r0,#0]  ; amp_volume_back
        LDR      r1,|L1.2060|
        STR      r0,[r1,#0]  ; amp_volume
        MOVS     r0,#8
        LDR      r1,|L1.2064|
        STRB     r0,[r1,#0]
        BL       turnDownVolume
|L1.1154|
        B        |L1.1260|
|L1.1156|
        B        |L1.1262|
        NOP      
        LDR      r0,|L1.2048|
        LDRB     r0,[r0,#2]
        LDR      r1,|L1.2044|
        LDRB     r1,[r1,#0]  ; amp_treble_tbl
        CMP      r0,r1
        BNE      |L1.1244|
        LDR      r0,|L1.2064|
        LDRB     r0,[r0,#0]  ; change_input_state
        CMP      r0,#3
        BNE      |L1.1190|
        BL       ampMute
        BL       powerOff
        B        |L1.1236|
|L1.1190|
        LDR      r0,|L1.2068|
        LDRB     r0,[r0,#0]  ; flash_mode
        CMP      r0,#1
        BNE      |L1.1226|
        MOVS     r0,#0
        LDR      r1,|L1.2068|
        STRB     r0,[r1,#0]
        NOP      
        LDR      r0,|L1.2072|
        LDR      r0,[r0,#8]
        LSRS     r0,r0,#1
        LSLS     r0,r0,#1
        LDR      r1,|L1.2072|
        STR      r0,[r1,#8]
        NOP      
        MOVS     r0,#0
        LDR      r1,|L1.2076|
        STR      r0,[r1,#0]  ; filter_bypass
|L1.1226|
        MOVS     r0,#2
        LDR      r1,|L1.2064|
        STRB     r0,[r1,#0]
        BL       turnUpVolume
|L1.1236|
        MOVS     r0,#0
        LDR      r1,|L1.2052|
        STRB     r0,[r1,#0]
        B        |L1.1248|
|L1.1244|
        BL       turnDownVolume
|L1.1248|
        B        |L1.1260|
        B        |L1.1260|
        B        |L1.1260|
        B        |L1.1260|
        B        |L1.1260|
        NOP      
|L1.1260|
        B        |L1.1302|
|L1.1262|
        LDR      r0,|L1.2080|
        LDRB     r0,[r0,#0]  ; amp_volume_change
        CMP      r0,#0xa2
        BNE      |L1.1286|
        LDR      r3,|L1.2084|
        MOVS     r2,#0
        MOVS     r1,#1
        LDR      r0,|L1.2040|
        LDRB     r0,[r0,#0]  ; pt2314_id_CIC
        BL       startATask
        B        |L1.1302|
|L1.1286|
        MOVS     r0,#0xa0
        LDR      r1,|L1.2080|
        STRB     r0,[r1,#0]
        MOVS     r0,#0
        LDR      r1,|L1.2052|
        STRB     r0,[r1,#0]
        LDR      r1,|L1.2088|
        STRB     r0,[r1,#0]
|L1.1302|
        POP      {r4,pc}
        ENDP

getChangeVolume PROC
        PUSH     {lr}
        LDR      r0,|L1.2064|
        LDRB     r0,[r0,#0]  ; change_input_state
        MOVS     r3,r0
        BL       __ARM_common_switch8
        DCB      0x0b,0x16,0x07,0x16
        DCB      0x08,0x0a,0x16,0x09
        DCB      0x16,0x16,0x0b,0x0c
        DCB      0x16,0x00
        NOP      
        NOP      
        NOP      
        NOP      
        NOP      
        LDR      r0,|L1.2044|
        LDR      r1,|L1.2060|
        LDR      r1,[r1,#0]  ; amp_volume
        LDRB     r1,[r0,r1]
        LDR      r0,|L1.2048|
        STRB     r1,[r0,#2]
        MOVS     r0,#1
        LDR      r1,|L1.2052|
        STRB     r0,[r1,#0]
        B        |L1.1362|
        NOP      
|L1.1362|
        NOP      
        POP      {pc}
        ENDP

changeInputVolumeDown PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        LDR      r0,|L1.2052|
        LDRB     r0,[r0,#0]  ; amp_volume_lock
        CMP      r0,#0
        BNE      |L1.1386|
        LDR      r0,|L1.2088|
        LDRB     r0,[r0,#0]  ; amp_lock
        CMP      r0,#0
        BEQ      |L1.1388|
|L1.1386|
        POP      {r4,pc}
|L1.1388|
        LDR      r0,|L1.2064|
        STRB     r4,[r0,#0]
        BL       getChangeVolume
        LDR      r3,|L1.2084|
        MOVS     r2,#0
        MOVS     r1,#2
        LDR      r0,|L1.2040|
        LDRB     r0,[r0,#0]  ; pt2314_id_CIC
        BL       startATask
        NOP      
        B        |L1.1386|
        ENDP

ampMuteSwitch PROC
        PUSH     {r4,lr}
        LDR      r0,|L1.2060|
        LDR      r0,[r0,#0]  ; amp_volume
        CMP      r0,#0
        BNE      |L1.1428|
        LDR      r1,|L1.2092|
        STR      r0,[r1,#0]  ; soft_mute
|L1.1428|
        LDR      r0,|L1.2088|
        LDRB     r0,[r0,#0]  ; amp_lock
        CMP      r0,#0
        BNE      |L1.1458|
        LDR      r0,|L1.2092|
        LDR      r0,[r0,#0]  ; soft_mute
        CMP      r0,#0
        BNE      |L1.1452|
        MOVS     r0,#4
        BL       changeInputVolumeDown
        B        |L1.1458|
|L1.1452|
        MOVS     r0,#5
        BL       changeInputVolumeDown
|L1.1458|
        POP      {r4,pc}
        ENDP

stopAmpDD PROC
        PUSH     {r4,lr}
        LDR      r0,|L1.2096|
        LDRB     r0,[r0,#0]  ; amp_id
        BL       stopATask
        POP      {r4,pc}
        ENDP

ampSetVolume PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        ADR      r1,|L1.2100|
        MOV      r0,r4
        BL       uartdecode
        CMP      r4,#0
        BEQ      |L1.1492|
        CMP      r4,#0x21
        BNE      |L1.1502|
|L1.1492|
        MOVS     r1,#0xff
        MOVS     r0,#0xa
        BL       ampSendCmd_38
        B        |L1.1516|
|L1.1502|
        LDR      r0,|L1.2116|
        LDRB     r0,[r0,r4]
        SUBS     r0,r0,#4
        UXTB     r1,r0
        MOVS     r0,#0xa
        BL       ampSendCmd_38
|L1.1516|
        POP      {r4,pc}
        ENDP

ampDecVolume PROC
        PUSH     {r4,lr}
        LDR      r0,|L1.2052|
        LDRB     r0,[r0,#0]  ; amp_volume_lock
        CMP      r0,#0
        BNE      |L1.1536|
        LDR      r0,|L1.2088|
        LDRB     r0,[r0,#0]  ; amp_lock
        CMP      r0,#0
        BEQ      |L1.1538|
|L1.1536|
        POP      {r4,pc}
|L1.1538|
        LDR      r0,|L1.2048|
        LDRB     r0,[r0,#0]  ; amp_status
        CMP      r0,#0xa2
        BNE      |L1.1562|
        LDR      r3,|L1.2120|
        MOVS     r2,#0
        MOVS     r1,#2
        LDR      r0,|L1.2096|
        LDRB     r0,[r0,#0]  ; amp_id
        BL       startATask
        B        |L1.1536|
|L1.1562|
        LDR      r0,|L1.2060|
        LDR      r0,[r0,#0]  ; amp_volume
        CMP      r0,#0
        BEQ      |L1.1596|
        LDR      r0,|L1.2060|
        LDR      r0,[r0,#0]  ; amp_volume
        SUBS     r0,r0,#1
        LDR      r1,|L1.2060|
        STR      r0,[r1,#0]  ; amp_volume
        LDR      r0,|L1.2096|
        LDRB     r0,[r0,#0]  ; amp_id
        BL       stopATask
        LDR      r0,|L1.2060|
        LDR      r0,[r0,#0]  ; amp_volume
        BL       ampSetVolume
|L1.1596|
        NOP      
        B        |L1.1536|
        ENDP

ampAddVolume PROC
        PUSH     {r4,lr}
        LDR      r0,|L1.2052|
        LDRB     r0,[r0,#0]  ; amp_volume_lock
        CMP      r0,#0
        BNE      |L1.1618|
        LDR      r0,|L1.2088|
        LDRB     r0,[r0,#0]  ; amp_lock
        CMP      r0,#0
        BEQ      |L1.1620|
|L1.1618|
        POP      {r4,pc}
|L1.1620|
        LDR      r0,|L1.2048|
        LDRB     r0,[r0,#0]  ; amp_status
        CMP      r0,#0xa2
        BNE      |L1.1644|
        LDR      r3,|L1.2124|
        MOVS     r2,#0
        MOVS     r1,#2
        LDR      r0,|L1.2096|
        LDRB     r0,[r0,#0]  ; amp_id
        BL       startATask
        B        |L1.1618|
|L1.1644|
        LDR      r0,|L1.2060|
        LDR      r0,[r0,#0]  ; amp_volume
        CMP      r0,#0x1f
        BCS      |L1.1678|
        LDR      r0,|L1.2060|
        LDR      r0,[r0,#0]  ; amp_volume
        ADDS     r0,r0,#1
        LDR      r1,|L1.2060|
        STR      r0,[r1,#0]  ; amp_volume
        LDR      r0,|L1.2096|
        LDRB     r0,[r0,#0]  ; amp_id
        BL       stopATask
        LDR      r0,|L1.2060|
        LDR      r0,[r0,#0]  ; amp_volume
        BL       ampSetVolume
|L1.1678|
        NOP      
        B        |L1.1618|
        ENDP

unMute PROC
        PUSH     {r4,lr}
        MOVS     r1,#0x10
        MOVS     r0,#6
        BL       ampSendCmd_38
        POP      {r4,pc}
        ENDP

ampPowerDown PROC
        PUSH     {r4,lr}
        MOVS     r1,#0x5c
        MOVS     r0,#5
        BL       ampSendCmd_38
        POP      {r4,pc}
        ENDP

ampPowerUp PROC
        PUSH     {r4,lr}
        MOVS     r1,#0xdc
        MOVS     r0,#5
        BL       ampSendCmd_38
        POP      {r4,pc}
        ENDP

ampMuteBass PROC
        PUSH     {r4,lr}
        MOVS     r1,#0x18
        MOVS     r0,#6
        BL       ampSendCmd_38
        MOVS     r1,#0x20
        MOVS     r0,#0xc
        BL       ampSendCmd_38
        LDR      r0,|L1.2044|
        LDRB     r1,[r0,#0]  ; amp_treble_tbl
        LDR      r0,|L1.2048|
        STRB     r1,[r0,#2]
        POP      {r4,pc}
        ENDP

ampUnMuteBass PROC
        PUSH     {r4,lr}
        MOVS     r1,#0x10
        MOVS     r0,#6
        BL       ampSendCmd_38
        MOVS     r1,#0xc0
        MOVS     r0,#0xc
        BL       ampSendCmd_38
        LDR      r0,|L1.2044|
        LDRB     r1,[r0,#0]  ; amp_treble_tbl
        LDR      r0,|L1.2048|
        STRB     r1,[r0,#2]
        POP      {r4,pc}
        ENDP

ampResumeI2c PROC
        LDR      r0,|L1.2128|
        LDRB     r0,[r0,#4]  ; amp_i2c_block
        LDR      r1,|L1.2128|
        STRB     r0,[r1,#3]
        MOVS     r0,#0xa0
        LDR      r1,|L1.2048|
        STRB     r0,[r1,#0]
        BX       lr
        ENDP

ampSetL1ATRT PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        MOV      r1,r4
        MOVS     r0,#0x13
        BL       ampSendCmd_38
        POP      {r4,pc}
        ENDP

ampEQbypass PROC
        PUSH     {r4,lr}
        MOVS     r0,#0xe
        BL       ampGetCmd_38
        MOV      r4,r0
        MOVS     r0,#2
        ORRS     r0,r0,r4
        MOV      r1,r0
        MOVS     r0,#0xe
        BL       ampSendCmd_38
        MOVS     r0,#0xf
        BL       ampGetCmd_38
        MOV      r4,r0
        MOVS     r0,#2
        ORRS     r0,r0,r4
        MOV      r1,r0
        MOVS     r0,#0xf
        BL       ampSendCmd_38
        MOVS     r0,#0x10
        BL       ampGetCmd_38
        MOV      r4,r0
        MOVS     r0,#2
        ORRS     r0,r0,r4
        MOV      r1,r0
        MOVS     r0,#0x10
        BL       ampSendCmd_38
        POP      {r4,pc}
        ENDP

ampEQon PROC
        PUSH     {r4,lr}
        MOVS     r0,#0xe
        BL       ampGetCmd_38
        MOV      r4,r0
        MOVS     r2,#2
        MOV      r0,r4
        BICS     r0,r0,r2
        MOV      r1,r0
        MOVS     r0,#0xe
        BL       ampSendCmd_38
        MOVS     r0,#0xf
        BL       ampGetCmd_38
        MOV      r4,r0
        MOVS     r2,#2
        MOV      r0,r4
        BICS     r0,r0,r2
        MOV      r1,r0
        MOVS     r0,#0xf
        BL       ampSendCmd_38
        MOVS     r0,#0x10
        BL       ampGetCmd_38
        MOV      r4,r0
        MOVS     r2,#2
        MOV      r0,r4
        BICS     r0,r0,r2
        MOV      r1,r0
        MOVS     r0,#0x10
        BL       ampSendCmd_38
        POP      {r4,pc}
        ENDP

stopFlashLed PROC
        PUSH     {r4,lr}
        LDR      r0,|L1.2096|
        LDRB     r0,[r0,#0]  ; amp_id
        BL       stopATask
        POP      {r4,pc}
        ENDP

changeInputVolumeUp PROC
        PUSH     {r4,lr}
        LDR      r0,|L1.2052|
        LDRB     r0,[r0,#0]  ; amp_volume_lock
        CMP      r0,#0
        BNE      |L1.1968|
        LDR      r0,|L1.2088|
        LDRB     r0,[r0,#0]  ; amp_lock
        CMP      r0,#0
        BEQ      |L1.1972|
|L1.1968|
        MOVS     r0,#0
|L1.1970|
        POP      {r4,pc}
|L1.1972|
        MOVS     r0,#2
        LDR      r1,|L1.2064|
        STRB     r0,[r1,#0]
        LDR      r0,|L1.2044|
        LDRB     r1,[r0,#0]  ; amp_treble_tbl
        LDR      r0,|L1.2048|
        STRB     r1,[r0,#2]
        BL       ChangInputVolumeCheck
        MOVS     r0,#1
        B        |L1.1970|
        ENDP

SYS_UnlockReg PROC
        MOVS     r0,#0x59
        LDR      r1,|L1.2132|
        STR      r0,[r1,#0]
        MOVS     r0,#0x16
        STR      r0,[r1,#0]
        MOVS     r0,#0x88
        STR      r0,[r1,#0]
        BX       lr
        ENDP

WDT_TIMER_RESET PROC
        LDR      r0,|L1.2136|
        LDR      r0,[r0,#0]
        MOVS     r1,#1
        ORRS     r0,r0,r1
        LDR      r1,|L1.2136|
        STR      r0,[r1,#0]
        BX       lr
        ENDP

stopATask PROC
        MOVS     r2,#0
        MOVS     r1,#0xc
        MULS     r1,r0,r1
        LDR      r3,|L1.2140|
        ADDS     r1,r1,r3
        STRB     r2,[r1,#1]
        BX       lr
        ENDP

        DCW      0x0000
|L1.2040|
        DCD      pt2314_id_CIC
|L1.2044|
        DCD      amp_treble_tbl
|L1.2048|
        DCD      amp_status
|L1.2052|
        DCD      amp_volume_lock
|L1.2056|
        DCD      amp_volume_back
|L1.2060|
        DCD      amp_volume
|L1.2064|
        DCD      change_input_state
|L1.2068|
        DCD      flash_mode
|L1.2072|
        DCD      0x40130000
|L1.2076|
        DCD      filter_bypass
|L1.2080|
        DCD      amp_volume_change
|L1.2084|
        DCD      ChangInputVolumeCheck
|L1.2088|
        DCD      amp_lock
|L1.2092|
        DCD      soft_mute
|L1.2096|
        DCD      amp_id
|L1.2100|
        DCB      "  Volumesiize: ",0
|L1.2116|
        DCD      amp_wireless_tbl
|L1.2120|
        DCD      ampDecVolume
|L1.2124|
        DCD      ampAddVolume
|L1.2128|
        DCD      amp_i2c_block
|L1.2132|
        DCD      0x50000100
|L1.2136|
        DCD      0x40004000
|L1.2140|
        DCD      mytask

        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.bss||, DATA, NOINIT, ALIGN=2

amp_i2c_block
        %        16
amp_info
        %        24
amp_i2c_block_change_input
        %        16

        AREA ||.data||, DATA, ALIGN=2

vlmtbl_index
        DCD      0x00000000
amp_volume_back
        DCD      0x00000000
amp_volume_lock
        DCB      0x00
amp_lock
        DCB      0x00,0x00,0x00
soft_mute
        DCD      0x00000000
amp_volume
        DCD      0x00000014
amp_volume_change
        DCB      0xa0,0x07,0x70
change_input_state
        DCB      0x02
amp_master_tbl
        DCB      0xff,0x00,0x00,0x00
        DCB      0x00,0x00,0x00,0x00
        DCB      0x00,0x00,0x00,0x00
        DCB      0x00,0x00,0x00,0x00
        DCB      0x00,0x00,0x00,0x00
        DCB      0x00,0x00,0x00,0x00
        DCB      0x00,0x00,0x00,0x00
        DCB      0x00,0x00,0x00,0x00
amp_treble_tbl
        DCB      0xff,0xd8,0xc0,0xbc
        DCB      0xb8,0xb4,0xb0,0xac
        DCB      0xa8,0xa4,0xa0,0x9c
        DCB      0x98,0x94,0x90,0x8c
        DCB      0x88,0x84,0x80,0x7c
        DCB      0x78,0x74,0x70,0x6c
        DCB      0x68,0x64,0x60,0x5c
        DCB      0x58,0x54,0x50,0x4c
amp_bass_tbl
        DCB      0xff,0xd8,0xba,0xb6
        DCB      0xb2,0xae,0xaa,0xa6
        DCB      0xa2,0x9e,0x9a,0x96
        DCB      0x92,0x8e,0x8a,0x86
        DCB      0x82,0x7e,0x7b,0x77
        DCB      0x74,0x70,0x6d,0x69
        DCB      0x66,0x62,0x5f,0x5b
        DCB      0x58,0x54,0x50,0x4c
amp_wireless_tbl
        DCB      0xff,0xa6,0xa2,0x8e
        DCB      0x92,0x8e,0x8a,0x87
        DCB      0x83,0x80,0x7c,0x78
        DCB      0x75,0x72,0x6f,0x6b
        DCB      0x68,0x65,0x62,0x5f
        DCB      0x5c,0x59,0x56,0x53
        DCB      0x50,0x4d,0x4a,0x47
        DCB      0x44,0x40,0x3c,0x38
amp_conf_38
        DCB      0x00,0x63,0x01,0x80
        DCB      0x02,0x97,0x03,0x58
        DCB      0x04,0xc2,0x05,0xdf
        DCB      0x06,0x16,0x07,0x00
        DCB      0x08,0x60,0x09,0x60
        DCB      0x0a,0x34,0x0b,0x80
        DCB      0x0c,0x00,0x0d,0x00
        DCB      0x0e,0x00,0x0f,0x40
        DCB      0x10,0x90,0x11,0x77
        DCB      0x12,0x2c,0x13,0x69
        DCB      0x14,0x6a,0x15,0x69
        DCB      0x27,0x1a,0x28,0xc0
        DCB      0x29,0xf3,0x2a,0x33
        DCB      0x2b,0x00,0x2c,0x0c
        DCB      0x2d,0x7f,0x31,0x80
        DCB      0x32,0xc0,0x33,0xa8
        DCB      0x34,0x30,0x35,0x30
        DCB      0x36,0x07,0x37,0x00
        DCB      0x38,0x00,0x39,0x01
        DCB      0x3a,0xee,0x3b,0xff
        DCB      0x3c,0x7e,0x3d,0xc0
        DCB      0x3e,0x26,0x3f,0x00
amp_eq_tbl_38
        DCD      0x000000c8
        DCD      0x000000c8
        DCD      0x007ed740
        DCD      0x00824e5d
        DCD      0x00000064
        DCD      0x00000165
        DCD      0x00000165
        DCD      0x007f5910
        DCD      0x0081484a
        DCD      0x000000b2
        DCD      0x00804f4c
        DCD      0x007fb0b4
        DCD      0x007fb0a5
        DCD      0x00809e7b
        DCD      0x003fd85a
        DCD      0x00802009
        DCD      0x007fdff7
        DCD      0x007fdfe8
        DCD      0x00803ff6
        DCD      0x003feffb
        DCD      0x00806dca
        DCD      0x007f52f9
        DCD      0x007f9236
        DCD      0x0080d8df
        DCD      0x003fea13
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x00400000
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x00400000
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x00400000
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x00400000
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x00400000
        DCD      0x007fffff
        DCD      0x007fffff
        DCD      0x007fffff
        DCD      0x007fffff
        DCD      0x007fffff
        DCD      0x005a9df7
        DCD      0x007fffff
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x007fffff
        DCD      0x00400000
        DCD      0x00400000
        DCD      0x00000000
        DCD      0x00000000
amp_status
        DCB      0x00,0x00,0x00
amp_id
        DCB      0x00
cfg_data
        DCD      0x00000000

        AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

__ARM_common_switch8 PROC
        PUSH     {r4,r5}
        MOV      r4,lr
        SUBS     r4,r4,#1
        LDRB     r5,[r4,#0]
        ADDS     r4,r4,#1
        CMP      r3,r5
        BCC      |L17.24|
|L17.14|
        LDRB     r3,[r4,r5]
        LSLS     r3,r3,#1
        ADDS     r3,r4,r3
        POP      {r4,r5}
        BX       r3
|L17.24|
        MOV      r5,r3
        B        |L17.14|
        ENDP


        EXPORT ampSendCmd_38 [CODE]
        EXPORT ampGetCmd_38 [CODE]
        EXPORT ampInitAllConf [CODE]
        EXPORT ampInit [CODE]
        EXPORT ampGetStatus [CODE]
        EXPORT ampSendEqs_38 [CODE]
        EXPORT ampSetEqDefault [CODE]
        EXPORT ampMute [CODE]
        EXPORT getChangeVolume [CODE]
        EXPORT changeInputVolumeDown [CODE]
        EXPORT ampMuteSwitch [CODE]
        EXPORT stopAmpDD [CODE]
        EXPORT ampSetVolume [CODE]
        EXPORT ampDecVolume [CODE]
        EXPORT ampAddVolume [CODE]
        EXPORT unMute [CODE]
        EXPORT ampPowerDown [CODE]
        EXPORT ampPowerUp [CODE]
        EXPORT ampMuteBass [CODE]
        EXPORT ampUnMuteBass [CODE]
        EXPORT ampResumeI2c [CODE]
        EXPORT ampSetL1ATRT [CODE]
        EXPORT ampEQbypass [CODE]
        EXPORT ampEQon [CODE]
        EXPORT stopFlashLed [CODE]
        EXPORT changeInputVolumeUp [CODE]
        EXPORT amp_info [DATA,SIZE=23]
        EXPORT amp_i2c_block_change_input [DATA,SIZE=16]
        EXPORT amp_volume_back [DATA,SIZE=4]
        EXPORT amp_volume_lock [DATA,SIZE=1]
        EXPORT soft_mute [DATA,SIZE=4]
        EXPORT amp_volume [DATA,SIZE=4]
        EXPORT amp_volume_change [DATA,SIZE=3]
        EXPORT change_input_state [DATA,SIZE=1]
        EXPORT amp_master_tbl [DATA,SIZE=32]
        EXPORT amp_treble_tbl [DATA,SIZE=32]
        EXPORT amp_bass_tbl [DATA,SIZE=32]
        EXPORT amp_wireless_tbl [DATA,SIZE=32]
        EXPORT amp_conf_38 [DATA,SIZE=88]
        EXPORT amp_status [DATA,SIZE=3]
        EXPORT amp_id [DATA,SIZE=1]
        EXPORT __ARM_common_switch8 [CODE]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT initI2cDataBlock [CODE]
        IMPORT addI2cChain [CODE]
        IMPORT getATask [CODE]
        IMPORT startATask [CODE]
        IMPORT pt2314_id_CIC [DATA]
        IMPORT powerOff [CODE]
        IMPORT flash_mode [DATA]
        IMPORT filter_bypass [DATA]
        IMPORT uartdecode [CODE]
        IMPORT mytask [DATA]

        KEEP turnDownVolume
        KEEP turnUpVolume
        KEEP ChangInputVolumeCheck
        KEEP SYS_UnlockReg
        KEEP WDT_TIMER_RESET
        KEEP stopATask
        KEEP amp_i2c_block
        KEEP vlmtbl_index
        KEEP amp_lock
        KEEP amp_eq_tbl_38
        KEEP cfg_data

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,6
        ATTR SETSTRING Tag_conformance,"2.06"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
