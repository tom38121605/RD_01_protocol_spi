


   //------初始化取得默认的config------

   spi_config = NRF_DRV_SPI_DEFAULT_CONFIG(SPI_INSTANCE);

        .sck_pin      = SPI0_CONFIG_SCK_PIN  ,            //16
        .mosi_pin     = SPI0_CONFIG_MOSI_PIN  ,        //20
        .miso_pin     = SPI0_CONFIG_MISO_PIN  ,        //18
        .ss_pin       = NRF_DRV_SPI_PIN_NOT_USED,    //0xFF           
        .irq_priority = SPI0_CONFIG_IRQ_PRIORITY  ,   //APP_IRQ_PRIORITY_LOW    //6
        .orc          = 0xFF,                                   
        .frequency    = NRF_DRV_SPI_FREQ_4M,          //4M         //0x40000000    
        .mode         = NRF_DRV_SPI_MODE_0,            //mode0            
        .bit_order    = NRF_DRV_SPI_BIT_ORDER_MSB_FIRST,      //MSB first   

   spi_config.ss_pin = SPI_CS_PIN;   //17


   //-----初始化取得默认的 spi ------

   nrf_drv_spi_t   spi = NRF_DRV_SPI_INSTANCE(SPI_INSTANCE);
       spi.p_registers  =     NRF_SPI0,        
       spi.irq          =         SPI0_IRQ ,             
       spi.drv_inst_idx =      SPI0_INSTANCE_INDEX,  
       spi.use_easy_dma =  SPI0_USE_EASY_DMA   



===========================spi 操作 flow==========================


spi初始配置flow：

       spi_config = _DEFAULT_CONFIG(0)  --> spi = _SPI_INSTANCE(0)  

       nrf_drv_spi_init  --> nrf_spi_pins_set --> nrf_spi_frequency_set --> nrf_spi_configure --> nrf_spi_int_enable
       --> nrf_spi_enable --> nrf_drv_common_irq_enable  


spi 读写数据flow：

       nrf_drv_spi_transfer --> spi_xfer --> nrf_spi_int_disable --> nrf_spi_event_clear --> NRF_SPI0->TXD = p_tx_buffer[0] --> nrf_spi_int_enable
       -->  IRQ_HANDLER(0)


中断函数flow：

     #define IRQ_HANDLER(0)     SPI0_IRQ_HANDLER( )

     SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler --> SPI0_TWI0_IRQHandler --> SPI0_IRQ_HANDLER -->IRQ_HANDLER(0)
     IRQ_HANDLER(0) --> transfer_byte -->  finish_transfer --> spi_event_handler




====================================================


#define SPI_INSTANCE   0

#define SPI0_CONFIG_SCK_PIN  3
#define SPI0_CONFIG_MOSI_PIN  4
#define SPI0_CONFIG_MISO_PIN  28
#define SPI0_CONFIG_IRQ_PRIORITY    APP_IRQ_PRIORITY_LOW
#define SPI0_INSTANCE_INDEX  0

enum APP_IRQ_PRIORITY_LOW     = _PRIO_APP_LOW,
#define _PRIO_APP_LOW       6

#define NRF_DRV_SPI_PIN_NOT_USED  0xFF
#define SPI_CS_PIN    29

---

#define SPI0_USE_EASY_DMA 0
#define SPI0_INSTANCE_INDEX 0

#define SPI0_IRQ            SPI0_TWI0_IRQn
#define SPI0_IRQ_HANDLER    SPI0_TWI0_IRQHandler


========================================

typedef struct {                                    
  __I  uint32_t  RESERVED0[66];
  __IO uint32_t  EVENTS_READY;      //108             
  __I  uint32_t  RESERVED1[126];      //10c
  __IO uint32_t  INTENSET;             // 304            
  __IO uint32_t  INTENCLR;             //308          
  __I  uint32_t  RESERVED2[125];     //30c
  __IO uint32_t  ENABLE;                //500       
  __I  uint32_t  RESERVED3;            //504
  SPI_PSEL_Type  PSEL;                  //508                     
  __I  uint32_t  RESERVED4;            //514
  __I  uint32_t  RXD;                      //518                    
  __IO uint32_t  TXD;                     //51c                   
  __I  uint32_t  RESERVED5;           //520     
  __IO uint32_t  FREQUENCY;        //524                      
  __I  uint32_t  RESERVED6[11];     //528    
  __IO uint32_t  CONFIG;              //554                       
} NRF_SPI_Type;

typedef struct {
  __IO uint32_t  SCK;                             
  __IO uint32_t  MOSI;                               
  __IO uint32_t  MISO;                             
} SPI_PSEL_Type;

typedef struct
{
    void *    p_registers;   
    IRQn_Type irq;          
    uint8_t   drv_inst_idx;  
    bool      use_easy_dma;  

} nrf_drv_spi_t;


typedef struct
{
    uint8_t sck_pin;      
    uint8_t mosi_pin;   
    uint8_t miso_pin;    
    uint8_t ss_pin;       
    uint8_t irq_priority;  
    uint8_t orc;          
    nrf_drv_spi_frequency_t  frequency;  
    nrf_drv_spi_mode_t       mode;      
    nrf_drv_spi_bit_order_t  bit_order;  

} nrf_drv_spi_config_t;


=================

    #define NRF_DRV_SPI_PERIPHERAL(id)    NRF_SPI0
						
    #define SPI2_IRQ                   SPIM2_SPIS2_SPI2_IRQn
    #define SPI2_IRQ_HANDLER    SPIM2_SPIS2_SPI2_IRQHandler

 
-----------------

typedef void (*nrf_drv_spi_handler_t) (nrf_drv_spi_evt_t  * p_event);     //函数指针

typedef struct
{
    nrf_drv_spi_handler_t    handler;   //spi 中断响应函数
    nrf_drv_spi_evt_t           evt;   
    nrf_drv_state_t              state;
    volatile bool                 transfer_in_progress;

    uint8_t         ss_pin;
    uint8_t         orc;
    uint8_t         bytes_transferred;

    bool   tx_done : 1;
    bool   rx_done : 1;
} spi_control_block_t;
spi_control_block_t m_cb[1];   //SPI_COUNT=1


typedef struct
{
    nrf_drv_spi_evt_type_t       type;      

    union
    {
        nrf_drv_spi_xfer_desc_t   done;  
    } data;

} nrf_drv_spi_evt_t;


typedef struct
{
    uint8_t        *p_tx_buffer;  
    uint8_t         tx_length;    
    uint8_t        *p_rx_buffer; 
    uint8_t         rx_length;   
}nrf_drv_spi_xfer_desc_t;


---


typedef enum
{
  NRF_GPIOTE_POLARITY_LOTOHI = GPIOTE_CONFIG_POLARITY_LoToHi,       ///<  Low to high.   1
  NRF_GPIOTE_POLARITY_HITOLO = GPIOTE_CONFIG_POLARITY_HiToLo,       ///<  High to low.   2
  NRF_GPIOTE_POLARITY_TOGGLE = GPIOTE_CONFIG_POLARITY_Toggle        ///<  Toggle.         3
} nrf_gpiote_polarity_t;

---

typedef enum 
{   
   NRF_DRV_STATE_UNINITIALIZED,    //0
   NRF_DRV_STATE_INITIALIZED,         //1
   NRF_DRV_STATE_POWERED_ON      //2
} nrf_drv_state_t;

---

 nrf_drv_spi_config_t   m_default_config[SPI_COUNT] = NRF_DRV_SPI_DEFAULT_CONFIG(0);


---

 typedef enum
{
    APP_IRQ_PRIORITY_HIGHEST = _PRIO_APP_HIGH,	
    APP_IRQ_PRIORITY_HIGH    = _PRIO_APP_HIGH, 
    APP_IRQ_PRIORITY_MID     = _PRIO_SD_LOW, 
    APP_IRQ_PRIORITY_LOW     = _PRIO_APP_LOW,
    APP_IRQ_PRIORITY_LOWEST  = _PRIO_APP_LOWEST,
    APP_IRQ_PRIORITY_THREAD  = _PRIO_THREAD    
} app_irq_priority_t;


#define NRF_DRV_SPI_INSTANCE(0)                        
    spi.p_registers  =     NRF_SPI0,                            //  (NRF_SPI_Type *)  NRF_SPI0_BASE
    spi.irq          =         SPI0_IRQ ,                            //3         
    spi.drv_inst_idx =      SPI0_INSTANCE_INDEX,        //0
    spi.use_easy_dma =  SPI0_USE_EASY_DMA            //0
 


----------------spi引脚，模式，频率参数设置-------spi_config缺省设置--------


#define NRF_DRV_SPI_DEFAULT_CONFIG(id)        

    .sck_pin      = SPI0_CONFIG_SCK_PIN  ,            //16
    .mosi_pin     = SPI0_CONFIG_MOSI_PIN  ,        //20
    .miso_pin     = SPI0_CONFIG_MISO_PIN  ,        //18
    .ss_pin       = NRF_DRV_SPI_PIN_NOT_USED,    //0xFF           
    .irq_priority = SPI0_CONFIG_IRQ_PRIORITY  ,   //APP_IRQ_PRIORITY_LOW    //6
    .orc          = 0xFF,                                   
    .frequency    = NRF_DRV_SPI_FREQ_4M,          //4M         //0x40000000    
    .mode         = NRF_DRV_SPI_MODE_0,            //mode0            
    .bit_order    = NRF_DRV_SPI_BIT_ORDER_MSB_FIRST,      //MSB first   

 

----------------------------spi初始化配置------spi结构体初值----------------------------

//spi结构体的初值
nrf_drv_spi_t   spi = NRF_DRV_SPI_INSTANCE(SPI_INSTANCE);

#define NRF_DRV_SPI_INSTANCE(id)                   
   
    .p_registers  = NRF_DRV_SPI_PERIPHERAL(id),        //NRF_SPI0
    .irq          =  SPI0_IRQ,                               //SPI0_TWI0_IRQn
    .drv_inst_idx = SPI0_INSTANCE_INDEX,        //0
    .use_easy_dma = SPI0_USE_EASY_DMA        // 0



-------------------------------  spi回调函数--------------------------------

void spi_event_handler(nrf_drv_spi_evt_t const * p_event)   
 
    spi_xfer_done = true;
    NRF_LOG_PRINTF(" Transfer completed.\r\n");

    if (m_rx_buf[0] != 0) 
        NRF_LOG_PRINTF(" Received: %s\r\n",m_rx_buf);
 



=========================================  nouse  ========================================


typedef void (*nrf_drv_gpiote_evt_handler_t)(u32 pin, nrf_gpiote_polarity_t action);      //nrf_drv_gpiote_evt_handler_t为指针函数

typedef struct
{
    nrf_drv_gpiote_evt_handler_t      handlers[ NUMBER_OF_GPIO_TE + GPIOTE_CONFIG_NUM_OF_LOW_POWER_EVENTS ];   //8+4
    int8_t                       pin_assignments[ NUMBER_OF_PINS ];      //32
    int8_t                       port_handlers_pins[ GPIOTE_CONFIG_NUM_OF_LOW_POWER_EVENTS ];     //4
    nrf_drv_state_t          state;
} gpiote_control_block_t;

static  gpiote_control_block_t     m_cb;



u32 nrf_drv_spi_init(  p_instance,   p_config,   handler)   //handler 是spi事件的函数指针
{
    spi_control_block_t * p_cb;

    p_cb  = &m_cb[0];    // p_instance->drv_inst_idx=0   //结构指针指向结构体   //注意： 这里的m_cb的类型跟p_cb一样

    //--if (p_cb->state != NRF_DRV_STATE_UNINITIALIZED)
    //--    return NRF_ERROR_INVALID_STATE;

    //--if (p_config == NULL)
    //--    p_config = &m_default_config[0];    // p_instance->drv_inst_idx=0   //结构指针指向结构体

    p_cb->handler = handler;




    CODE_FOR_SPIM

        NRF_SPIM_Type * p_spim = p_instance->p_registers;   //NRF_SPI0

        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);    //设置spi的io口
        nrf_spim_frequency_set(p_spim,p_config->frequency);   //设置spi的频率
        nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order); //设置spi的模式

        nrf_spim_orc_set(p_spim, p_config->orc);   //设置spi的orc

        if (p_cb->handler)
            nrf_spim_int_enable(p_spim, END_INT_MASK | NRF_SPIM_INT_STOPPED_MASK);     //设置POFWARN中断，p_spi->INTENSET = ？|1<<1  （待理解）

        nrf_spim_enable(p_spim);   // 开启spi，  p_spi->ENABLE = 1<<0;










