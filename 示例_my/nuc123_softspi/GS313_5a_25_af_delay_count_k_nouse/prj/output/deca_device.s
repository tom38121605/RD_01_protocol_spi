; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--debug -c --asm --info=totals -o.\output\deca_device.o --depend=.\output\deca_device.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\CMSIS\CM0\DeviceSupport\Nuvoton\NUC123Series -I..\CMSIS\CM0\CoreSupport -I..\INC\DrvInc -I..\INC\SysInc -I..\dw -IC:\Keil_v472\ARM\RV31\INC -IC:\Keil_v472\ARM\CMSIS\Include -IC:\Keil_v472\ARM\Inc\Nuvoton\NUC123Series -D__MICROLIB --omf_browse=.\output\deca_device.crf ..\dw\deca_device.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||.text||, CODE, READONLY, ALIGN=2

dwt_readfromdevice PROC
        PUSH     {r0-r7,lr}
        SUB      sp,sp,#4
        MOV      r6,r0
        MOV      r4,r1
        MOV      r7,r2
        MOVS     r5,#0
        CMP      r4,#0
        BNE      |L1.26|
        MOV      r1,r5
        ADDS     r5,r5,#1
        MOV      r0,sp
        STRB     r6,[r0,r1]
        B        |L1.80|
|L1.26|
        MOVS     r0,#0x40
        ORRS     r0,r0,r6
        UXTB     r2,r0
        MOV      r1,r5
        ADDS     r5,r5,#1
        MOV      r0,sp
        STRB     r2,[r0,r1]
        CMP      r4,#0x7f
        BGT      |L1.54|
        MOV      r0,r5
        ADDS     r5,r5,#1
        MOV      r1,sp
        STRB     r4,[r1,r0]
        B        |L1.80|
|L1.54|
        UXTB     r0,r4
        MOVS     r1,#0x80
        ORRS     r0,r0,r1
        MOV      r1,r5
        ADDS     r5,r5,#1
        MOV      r2,sp
        STRB     r0,[r2,r1]
        LSLS     r0,r4,#17
        LSRS     r2,r0,#24
        MOV      r0,r5
        ADDS     r5,r5,#1
        MOV      r1,sp
        STRB     r2,[r1,r0]
|L1.80|
        UXTH     r0,r5
        MOV      r2,r7
        MOV      r1,sp
        LDR      r3,[sp,#0x10]
        BL       readfromspi
        ADD      sp,sp,#0x14
        POP      {r4-r7,pc}
        ENDP

dwt_read32bitoffsetreg PROC
        PUSH     {r3-r7,lr}
        MOV      r5,r0
        MOV      r6,r1
        MOVS     r7,#0
        UXTH     r1,r6
        UXTH     r0,r5
        MOV      r3,sp
        MOVS     r2,#4
        BL       dwt_readfromdevice
        MOVS     r4,#3
        B        |L1.130|
|L1.120|
        LSLS     r0,r7,#8
        MOV      r1,sp
        LDRB     r1,[r1,r4]
        ADDS     r7,r0,r1
        SUBS     r4,r4,#1
|L1.130|
        CMP      r4,#0
        BGE      |L1.120|
        MOV      r0,r7
        POP      {r3-r7,pc}
        ENDP

dwt_writetodevice PROC
        PUSH     {r0-r7,lr}
        SUB      sp,sp,#4
        MOV      r6,r0
        MOV      r4,r1
        MOV      r7,r2
        MOVS     r5,#0
        CMP      r4,#0
        BNE      |L1.170|
        MOVS     r0,#0x80
        ORRS     r0,r0,r6
        UXTB     r2,r0
        MOV      r0,r5
        ADDS     r5,r5,#1
        MOV      r1,sp
        STRB     r2,[r1,r0]
        B        |L1.222|
|L1.170|
        MOVS     r0,#0xc0
        ORRS     r0,r0,r6
        UXTB     r2,r0
        MOV      r0,r5
        ADDS     r5,r5,#1
        MOV      r1,sp
        STRB     r2,[r1,r0]
        CMP      r4,#0x7f
        BGT      |L1.196|
        MOV      r0,r5
        ADDS     r5,r5,#1
        STRB     r4,[r1,r0]
        B        |L1.222|
|L1.196|
        UXTB     r0,r4
        MOVS     r1,#0x80
        ORRS     r0,r0,r1
        MOV      r1,r5
        ADDS     r5,r5,#1
        MOV      r2,sp
        STRB     r0,[r2,r1]
        LSLS     r0,r4,#17
        LSRS     r2,r0,#24
        MOV      r0,r5
        ADDS     r5,r5,#1
        MOV      r1,sp
        STRB     r2,[r1,r0]
|L1.222|
        UXTH     r0,r5
        MOV      r2,r7
        MOV      r1,sp
        LDR      r3,[sp,#0x10]
        BL       writetospi
        ADD      sp,sp,#0x14
        POP      {r4-r7,pc}
        ENDP

dwt_write8bitoffsetreg PROC
        PUSH     {r0-r2,r4,r5,lr}
        MOV      r4,r0
        MOV      r5,r1
        UXTH     r1,r5
        UXTH     r0,r4
        ADD      r3,sp,#8
        MOVS     r2,#1
        BL       dwt_writetodevice
        POP      {r1-r5,pc}
        ENDP

_dwt_enableclocks PROC
        PUSH     {r3-r5,lr}
        MOV      r4,r0
        MOV      r3,sp
        MOVS     r2,#2
        MOVS     r1,#0
        MOVS     r0,#0x36
        BL       dwt_readfromdevice
        MOVS     r3,r4
        BL       __ARM_common_switch8
        DCB      0x0f,0x12,0x09,0x1b
        DCB      0x5b,0x5b,0x5b,0x5b
        DCB      0x24,0x32,0x5b,0x5b
        DCB      0x3e,0x45,0x4c,0x55
        DCB      0x5b,0x00
        MOVS     r1,#0
        MOV      r0,sp
        STRB     r1,[r0,#0]
        LDRB     r0,[r0,#1]
        MOVS     r1,#0xfe
        ANDS     r0,r0,r1
        MOV      r1,sp
        STRB     r0,[r1,#1]
        B        |L1.464|
        MOV      r1,sp
        LDRB     r0,[r1,#0]
        MOVS     r1,#0xfc
        ANDS     r0,r0,r1
        MOVS     r1,#1
        ORRS     r0,r0,r1
        MOV      r1,sp
        STRB     r0,[r1,#0]
        B        |L1.464|
        MOV      r1,sp
        LDRB     r0,[r1,#0]
        MOVS     r1,#0xfc
        ANDS     r0,r0,r1
        MOVS     r1,#2
        ORRS     r0,r0,r1
        MOV      r1,sp
        STRB     r0,[r1,#0]
        B        |L1.464|
        MOV      r0,sp
        LDRB     r0,[r0,#0]
        MOVS     r1,#0xb3
        ANDS     r0,r0,r1
        MOVS     r1,#0x48
        ORRS     r1,r1,r0
        MOV      r0,sp
        STRB     r1,[r0,#0]
        LDRB     r0,[r0,#1]
        MOVS     r1,#0x80
        ORRS     r0,r0,r1
        MOV      r1,sp
        STRB     r0,[r1,#1]
        B        |L1.464|
        MOV      r0,sp
        LDRB     r1,[r0,#0]
        MOVS     r0,#0xb3
        ANDS     r1,r1,r0
        MOV      r0,sp
        STRB     r1,[r0,#0]
        LDRB     r0,[r0,#1]
        LSLS     r1,r0,#25
        LSRS     r1,r1,#25
        MOV      r0,sp
        STRB     r1,[r0,#1]
        B        |L1.464|
        MOV      r1,sp
        LDRB     r0,[r1,#1]
        MOVS     r1,#2
        ORRS     r0,r0,r1
        MOV      r1,sp
        STRB     r0,[r1,#1]
        B        |L1.464|
        MOV      r1,sp
        LDRB     r0,[r1,#1]
        MOVS     r1,#0xfd
        ANDS     r0,r0,r1
        MOV      r1,sp
        STRB     r0,[r1,#1]
        B        |L1.464|
        MOV      r1,sp
        LDRB     r0,[r1,#0]
        MOVS     r1,#0xcf
        ANDS     r0,r0,r1
        MOVS     r1,#0x20
        ORRS     r0,r0,r1
        MOV      r1,sp
        STRB     r0,[r1,#0]
        B        |L1.464|
        MOVS     r1,#1
        MOV      r0,sp
        STRB     r1,[r0,#0]
        MOVS     r1,#3
        STRB     r1,[r0,#1]
        B        |L1.464|
        NOP      
|L1.464|
        NOP      
        MOV      r3,sp
        MOVS     r2,#1
        MOVS     r1,#0
        MOVS     r0,#0x36
        BL       dwt_writetodevice
        ADD      r3,sp,#0
        ADDS     r3,#1
        MOVS     r2,#1
        MOV      r1,r2
        MOVS     r0,#0x36
        BL       dwt_writetodevice
        POP      {r3-r5,pc}
        ENDP

dwt_write16bitoffsetreg PROC
        PUSH     {r3-r7,lr}
        MOV      r5,r0
        MOV      r6,r1
        MOV      r4,r2
        MOV      r0,sp
        STRB     r4,[r0,#0]
        ASRS     r1,r4,#8
        STRB     r1,[r0,#1]
        UXTH     r1,r6
        UXTH     r0,r5
        MOV      r3,sp
        MOVS     r2,#2
        BL       dwt_writetodevice
        POP      {r3-r7,pc}
        ENDP

dwt_read16bitoffsetreg PROC
        PUSH     {r3-r7,lr}
        MOV      r4,r0
        MOV      r5,r1
        MOVS     r6,#0
        UXTH     r1,r5
        UXTH     r0,r4
        MOV      r3,sp
        MOVS     r2,#2
        BL       dwt_readfromdevice
        MOV      r0,sp
        LDRB     r0,[r0,#1]
        LSLS     r1,r0,#8
        MOV      r0,sp
        LDRB     r0,[r0,#0]
        ADDS     r0,r1,r0
        UXTH     r6,r0
        MOV      r0,r6
        POP      {r3-r7,pc}
        ENDP

_dwt_loaducodefromrom PROC
        PUSH     {r4,lr}
        MOVS     r0,#0xe
        BL       _dwt_enableclocks
        MOVS     r2,#1
        LSLS     r2,r2,#15
        MOVS     r1,#6
        MOVS     r0,#0x2d
        BL       dwt_write16bitoffsetreg
        MOVS     r0,#1
        BL       deca_sleep
        MOVS     r0,#1
        BL       _dwt_enableclocks
        POP      {r4,pc}
        ENDP

dwt_setxtaltrim PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        LSLS     r0,r4,#27
        LSRS     r0,r0,#27
        MOVS     r1,#0x60
        ORRS     r0,r0,r1
        MOV      r5,r0
        MOV      r2,r5
        MOVS     r1,#0xe
        MOVS     r0,#0x2b
        BL       dwt_write8bitoffsetreg
        POP      {r4-r6,pc}
        ENDP

_dwt_otpread PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        UXTH     r2,r4
        MOVS     r1,#4
        MOVS     r0,#0x2d
        BL       dwt_write16bitoffsetreg
        MOVS     r2,#3
        MOVS     r1,#6
        MOVS     r0,#0x2d
        BL       dwt_write8bitoffsetreg
        MOVS     r2,#0
        MOVS     r1,#6
        MOVS     r0,#0x2d
        BL       dwt_write8bitoffsetreg
        MOVS     r1,#0xa
        MOVS     r0,#0x2d
        BL       dwt_read32bitoffsetreg
        MOV      r5,r0
        MOV      r0,r5
        POP      {r4-r6,pc}
        ENDP

_dwt_aonarrayupload PROC
        PUSH     {r4,lr}
        MOVS     r2,#0
        MOVS     r1,#2
        MOVS     r0,#0x2c
        BL       dwt_write8bitoffsetreg
        MOVS     r2,#2
        MOV      r1,r2
        MOVS     r0,#0x2c
        BL       dwt_write8bitoffsetreg
        POP      {r4,pc}
        ENDP

_dwt_disablesequencing PROC
        PUSH     {r4,lr}
        MOVS     r0,#0
        BL       _dwt_enableclocks
        MOVS     r2,#0
        MOVS     r1,#4
        MOVS     r0,#0x36
        BL       dwt_write16bitoffsetreg
        POP      {r4,pc}
        ENDP

dwt_softreset PROC
        PUSH     {r4,lr}
        BL       _dwt_disablesequencing
        MOVS     r2,#0
        MOV      r1,r2
        MOVS     r0,#0x2c
        BL       dwt_write16bitoffsetreg
        MOVS     r2,#0
        MOVS     r1,#6
        MOVS     r0,#0x2c
        BL       dwt_write8bitoffsetreg
        BL       _dwt_aonarrayupload
        MOVS     r2,#0
        MOVS     r1,#3
        MOVS     r0,#0x36
        BL       dwt_write8bitoffsetreg
        MOVS     r0,#1
        BL       deca_sleep
        MOVS     r2,#0xf0
        MOVS     r1,#3
        MOVS     r0,#0x36
        BL       dwt_write8bitoffsetreg
        MOVS     r0,#0
        LDR      r1,|L1.1792|
        STRB     r0,[r1,#0x1a]
        POP      {r4,pc}
        ENDP

dwt_readdevid PROC
        PUSH     {r4,lr}
        MOVS     r1,#0
        MOV      r0,r1
        BL       dwt_read32bitoffsetreg
        POP      {r4,pc}
        ENDP

dwt_initialise PROC
        PUSH     {r3-r7,lr}
        MOV      r4,r0
        MOVS     r5,#0
        MOVS     r7,#0
        MOVS     r0,#0
        LDR      r1,|L1.1792|
        STRB     r0,[r1,#0x11]
        STRB     r0,[r1,#0x1a]
        STRH     r0,[r1,#0x18]
        STR      r0,[r1,#0x28]  ; dw1000local
        STR      r0,[r1,#0x2c]  ; dw1000local
        STR      r0,[r1,#0x30]  ; dw1000local
        STR      r0,[r1,#0x34]  ; dw1000local
        BL       dwt_readdevid
        LDR      r1,|L1.1796|
        CMP      r0,r1
        BEQ      |L1.830|
        ASRS     r0,r1,#30
|L1.828|
        POP      {r3-r7,pc}
|L1.830|
        BL       dwt_softreset
        MOVS     r0,#0
        BL       _dwt_enableclocks
        MOVS     r2,#4
        MOVS     r1,#0
        MOVS     r0,#0x24
        BL       dwt_write8bitoffsetreg
        MOVS     r0,#0x1e
        BL       _dwt_otpread
        UXTH     r5,r0
        ASRS     r0,r5,#8
        LDR      r1,|L1.1792|
        STRB     r0,[r1,#9]
        MOVS     r0,#4
        BL       _dwt_otpread
        MOV      r7,r0
        LSLS     r0,r7,#24
        LSRS     r0,r0,#24
        BEQ      |L1.902|
        MOVS     r2,#2
        MOVS     r1,#0x12
        MOVS     r0,#0x2d
        BL       dwt_write8bitoffsetreg
        LDR      r0,|L1.1792|
        LDRH     r0,[r0,#0x18]  ; dw1000local
        MOVS     r1,#1
        LSLS     r1,r1,#12
        ORRS     r0,r0,r1
        LDR      r1,|L1.1792|
        STRH     r0,[r1,#0x18]
|L1.902|
        MOVS     r0,#6
        BL       _dwt_otpread
        LDR      r1,|L1.1792|
        STR      r0,[r1,#0]  ; dw1000local
        MOVS     r0,#7
        BL       _dwt_otpread
        LDR      r1,|L1.1792|
        STR      r0,[r1,#4]  ; dw1000local
        LSLS     r0,r5,#27
        LSRS     r0,r0,#27
        STRB     r0,[r1,#0x10]
        MOV      r0,r1
        LDRB     r0,[r0,#0x10]  ; dw1000local
        CMP      r0,#0
        BNE      |L1.940|
        MOVS     r0,#0x10
        STRB     r0,[r1,#0x10]
|L1.940|
        LDR      r1,|L1.1792|
        LDRB     r0,[r1,#0x10]  ; dw1000local
        BL       dwt_setxtaltrim
        LSLS     r0,r4,#31
        LSRS     r0,r0,#31
        BEQ      |L1.974|
        BL       _dwt_loaducodefromrom
        LDR      r0,|L1.1792|
        LDRH     r0,[r0,#0x18]  ; dw1000local
        MOVS     r1,#1
        LSLS     r1,r1,#11
        ORRS     r0,r0,r1
        LDR      r1,|L1.1792|
        STRH     r0,[r1,#0x18]
        B        |L1.1000|
|L1.974|
        MOVS     r1,#5
        MOVS     r0,#0x36
        BL       dwt_read16bitoffsetreg
        MOV      r6,r0
        LDR      r0,|L1.1800|
        ANDS     r6,r6,r0
        MOV      r2,r6
        MOVS     r1,#5
        MOVS     r0,#0x36
        BL       dwt_write16bitoffsetreg
        NOP      
|L1.1000|
        MOVS     r0,#1
        BL       _dwt_enableclocks
        MOVS     r2,#0
        MOVS     r1,#0xa
        MOVS     r0,#0x2c
        BL       dwt_write8bitoffsetreg
        MOVS     r1,#0
        MOVS     r0,#4
        BL       dwt_read32bitoffsetreg
        LDR      r1,|L1.1792|
        STR      r0,[r1,#0x14]  ; dw1000local
        MOVS     r0,#0
        B        |L1.828|
        ENDP

dwt_otprevision PROC
        LDR      r0,|L1.1792|
        LDRB     r0,[r0,#9]  ; dw1000local
        BX       lr
        ENDP

dwt_setfinegraintxseq PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        CMP      r4,#0
        BEQ      |L1.1058|
        LDR      r2,|L1.1804|
        MOVS     r1,#0x26
        MOVS     r0,#0x36
        BL       dwt_write16bitoffsetreg
        B        |L1.1068|
|L1.1058|
        MOVS     r2,#0
        MOVS     r1,#0x26
        MOVS     r0,#0x36
        BL       dwt_write16bitoffsetreg
|L1.1068|
        POP      {r4,pc}
        ENDP

dwt_write32bitoffsetreg PROC
        PUSH     {r3-r7,lr}
        MOV      r6,r0
        MOV      r7,r1
        MOV      r4,r2
        MOVS     r5,#0
        B        |L1.1090|
|L1.1082|
        MOV      r1,sp
        STRB     r4,[r1,r5]
        LSRS     r4,r4,#8
        ADDS     r5,r5,#1
|L1.1090|
        CMP      r5,#4
        BLT      |L1.1082|
        UXTH     r1,r7
        UXTH     r0,r6
        MOV      r3,sp
        MOVS     r2,#4
        BL       dwt_writetodevice
        POP      {r3-r7,pc}
        ENDP

dwt_setlnapamode PROC
        PUSH     {r4-r6,lr}
        MOV      r5,r0
        MOV      r6,r1
        MOVS     r1,#0
        MOVS     r0,#0x26
        BL       dwt_read32bitoffsetreg
        MOV      r4,r0
        MOVS     r1,#0x3f
        LSLS     r1,r1,#14
        MOV      r0,r4
        BICS     r0,r0,r1
        MOV      r4,r0
        CMP      r5,#0
        BEQ      |L1.1144|
        MOVS     r0,#1
        LSLS     r0,r0,#18
        ORRS     r4,r4,r0
|L1.1144|
        CMP      r6,#0
        BEQ      |L1.1154|
        MOVS     r0,#5
        LSLS     r0,r0,#14
        ORRS     r4,r4,r0
|L1.1154|
        MOV      r2,r4
        MOVS     r1,#0
        MOVS     r0,#0x26
        BL       dwt_write32bitoffsetreg
        POP      {r4-r6,pc}
        ENDP

dwt_setgpiodirection PROC
        PUSH     {r3-r7,lr}
        MOV      r5,r0
        MOV      r6,r1
        MOV      r0,r6
        ORRS     r0,r0,r5
        MOV      r4,r0
        MOV      r0,sp
        STRB     r4,[r0,#0]
        LSLS     r0,r4,#16
        LSRS     r1,r0,#24
        MOV      r0,sp
        STRB     r1,[r0,#1]
        LSLS     r0,r4,#8
        LSRS     r1,r0,#24
        MOV      r0,sp
        STRB     r1,[r0,#2]
        MOV      r3,sp
        MOVS     r2,#3
        MOVS     r1,#8
        MOVS     r0,#0x26
        BL       dwt_writetodevice
        POP      {r3-r7,pc}
        ENDP

dwt_setgpiovalue PROC
        PUSH     {r3-r7,lr}
        MOV      r5,r0
        MOV      r6,r1
        MOV      r0,r6
        ORRS     r0,r0,r5
        MOV      r4,r0
        MOV      r0,sp
        STRB     r4,[r0,#0]
        LSLS     r0,r4,#16
        LSRS     r1,r0,#24
        MOV      r0,sp
        STRB     r1,[r0,#1]
        LSLS     r0,r4,#8
        LSRS     r1,r0,#24
        MOV      r0,sp
        STRB     r1,[r0,#2]
        MOV      r3,sp
        MOVS     r2,#3
        MOVS     r1,#0xc
        MOVS     r0,#0x26
        BL       dwt_writetodevice
        POP      {r3-r7,pc}
        ENDP

dwt_getpartid PROC
        LDR      r0,|L1.1792|
        LDR      r0,[r0,#0]  ; dw1000local
        BX       lr
        ENDP

dwt_getlotid PROC
        LDR      r0,|L1.1792|
        LDR      r0,[r0,#4]  ; dw1000local
        BX       lr
        ENDP

dwt_configuretxrf PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        LDRB     r2,[r4,#0]
        MOVS     r1,#0xb
        MOVS     r0,#0x2a
        BL       dwt_write8bitoffsetreg
        MOVS     r1,#0
        MOVS     r0,#0x1e
        LDR      r2,[r4,#4]
        BL       dwt_write32bitoffsetreg
        POP      {r4,pc}
        ENDP

_dwt_configlde PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        MOVS     r2,#0x6d
        LDR      r1,|L1.1808|
        MOVS     r0,#0x2e
        BL       dwt_write8bitoffsetreg
        CMP      r4,#0
        BEQ      |L1.1326|
        LDR      r2,|L1.1812|
        LDR      r1,|L1.1816|
        MOVS     r0,#0x2e
        BL       dwt_write16bitoffsetreg
        B        |L1.1336|
|L1.1326|
        LDR      r2,|L1.1820|
        LDR      r1,|L1.1816|
        MOVS     r0,#0x2e
        BL       dwt_write16bitoffsetreg
|L1.1336|
        POP      {r4,pc}
        ENDP

dwt_configure PROC
        PUSH     {r4-r7,lr}
        SUB      sp,sp,#0x14
        MOV      r4,r0
        MOVS     r0,#0
        STR      r0,[sp,#0xc]
        STR      r0,[sp,#8]
        LDRB     r5,[r4,#0]
        LDRB     r0,[r4,#5]
        LSLS     r0,r0,#1
        LDR      r1,|L1.1824|
        LDRH     r0,[r1,r0]
        STR      r0,[sp,#4]
        LDRB     r0,[r4,#1]
        SUBS     r0,r0,#1
        UXTB     r6,r0
        CMP      r5,#4
        BEQ      |L1.1376|
        CMP      r5,#7
        BNE      |L1.1380|
|L1.1376|
        MOVS     r0,#1
        B        |L1.1382|
|L1.1380|
        MOVS     r0,#0
|L1.1382|
        STR      r0,[sp,#0]
        LDRB     r0,[r4,#7]
        CMP      r0,#0
        BNE      |L1.1412|
        LDR      r0,|L1.1792|
        LDR      r0,[r0,#0x14]  ; dw1000local
        MOVS     r1,#1
        LSLS     r1,r1,#22
        ORRS     r0,r0,r1
        LDR      r1,|L1.1792|
        STR      r0,[r1,#0x14]  ; dw1000local
        LDR      r0,[sp,#4]
        ASRS     r0,r0,#3
        STR      r0,[sp,#4]
        B        |L1.1426|
|L1.1412|
        LDR      r0,|L1.1792|
        LDR      r0,[r0,#0x14]  ; dw1000local
        MOVS     r1,#1
        LSLS     r1,r1,#22
        BICS     r0,r0,r1
        LDR      r1,|L1.1792|
        STR      r0,[r1,#0x14]  ; dw1000local
|L1.1426|
        LDRB     r0,[r4,#8]
        LDR      r1,|L1.1792|
        STRB     r0,[r1,#8]
        MOV      r0,r1
        LDR      r0,[r0,#0x14]  ; dw1000local
        MOVS     r1,#3
        LSLS     r1,r1,#16
        BICS     r0,r0,r1
        LDR      r1,|L1.1792|
        STR      r0,[r1,#0x14]  ; dw1000local
        MOV      r0,r1
        LDR      r0,[r0,#0x14]  ; dw1000local
        LDRB     r1,[r4,#8]
        LSLS     r1,r1,#16
        MOVS     r2,#3
        LSLS     r2,r2,#16
        ANDS     r1,r1,r2
        ORRS     r0,r0,r1
        LDR      r1,|L1.1792|
        STR      r0,[r1,#0x14]  ; dw1000local
        MOV      r0,r1
        MOVS     r1,#0
        LDR      r2,[r0,#0x14]  ; dw1000local
        MOVS     r0,#4
        BL       dwt_write32bitoffsetreg
        LDR      r1,|L1.1828|
        MOVS     r0,#0x2e
        LDR      r2,[sp,#4]
        BL       dwt_write16bitoffsetreg
        MOV      r0,r6
        BL       _dwt_configlde
        LDR      r0,|L1.1832|
        LDRB     r0,[r0,r5]
        LSLS     r0,r0,#2
        LDR      r1,|L1.1836|
        LDR      r2,[r1,r0]
        MOVS     r1,#7
        MOVS     r0,#0x2b
        BL       dwt_write32bitoffsetreg
        LDR      r0,|L1.1832|
        LDRB     r0,[r0,r5]
        LDR      r1,|L1.1840|
        LDRB     r2,[r1,r0]
        MOVS     r1,#0xb
        MOVS     r0,#0x2b
        BL       dwt_write8bitoffsetreg
        LDR      r1,|L1.1844|
        LDR      r0,[sp,#0]
        LDRB     r2,[r1,r0]
        MOVS     r1,#0xb
        MOVS     r0,#0x28
        BL       dwt_write8bitoffsetreg
        LDR      r0,|L1.1832|
        LDRB     r0,[r0,r5]
        LSLS     r0,r0,#2
        LDR      r1,|L1.1848|
        LDR      r2,[r1,r0]
        MOVS     r1,#0xc
        MOVS     r0,#0x28
        BL       dwt_write32bitoffsetreg
        LDRB     r0,[r4,#7]
        LSLS     r0,r0,#2
        LDR      r1,|L1.1852|
        ADDS     r0,r0,r1
        LDRB     r1,[r4,#6]
        LSLS     r1,r1,#1
        LDRH     r2,[r0,r1]
        MOVS     r1,#2
        MOVS     r0,#0x27
        BL       dwt_write16bitoffsetreg
        LSLS     r0,r6,#1
        LDR      r1,|L1.1856|
        LDRH     r2,[r1,r0]
        MOVS     r1,#4
        MOVS     r0,#0x27
        BL       dwt_write16bitoffsetreg
        LDRB     r0,[r4,#7]
        CMP      r0,#0
        BNE      |L1.1614|
        MOVS     r2,#0x64
        MOVS     r1,#6
        MOVS     r0,#0x27
        BL       dwt_write16bitoffsetreg
        B        |L1.1662|
|L1.1614|
        LDRB     r0,[r4,#2]
        CMP      r0,#4
        BNE      |L1.1642|
        MOVS     r2,#0x10
        MOVS     r1,#6
        MOVS     r0,#0x27
        BL       dwt_write16bitoffsetreg
        MOVS     r2,#0x10
        MOVS     r1,#0x26
        MOVS     r0,#0x27
        BL       dwt_write8bitoffsetreg
        B        |L1.1662|
|L1.1642|
        MOVS     r2,#0x20
        MOVS     r1,#6
        MOVS     r0,#0x27
        BL       dwt_write16bitoffsetreg
        MOVS     r2,#0x28
        MOVS     r1,#0x26
        MOVS     r0,#0x27
        BL       dwt_write8bitoffsetreg
|L1.1662|
        LSLS     r0,r6,#4
        LDR      r1,|L1.1860|
        ADDS     r0,r0,r1
        LDRB     r1,[r4,#3]
        LSLS     r1,r1,#2
        LDR      r2,[r0,r1]
        MOVS     r1,#8
        MOVS     r0,#0x27
        BL       dwt_write32bitoffsetreg
        LDRH     r0,[r4,#0xa]
        CMP      r0,#0
        BNE      |L1.1692|
        LDR      r0,|L1.1864|
        STRH     r0,[r4,#0xa]
|L1.1692|
        LDRH     r2,[r4,#0xa]
        MOVS     r1,#0x20
        MOVS     r0,#0x27
        BL       dwt_write16bitoffsetreg
        LDR      r0,|L1.1868|
        MOVS     r1,#0xc
        LDR      r2,[r0,#0]  ; agc_config
        MOVS     r0,#0x23
        BL       dwt_write32bitoffsetreg
        LSLS     r1,r6,#1
        LDR      r0,|L1.1868|
        ADDS     r0,r0,#4
        LDRH     r2,[r0,r1]
        MOVS     r1,#4
        MOVS     r0,#0x23
        BL       dwt_write16bitoffsetreg
        LDRB     r0,[r4,#6]
        CMP      r0,#0
        BEQ      |L1.1758|
        LDRB     r0,[r4,#7]
        LDR      r1,|L1.1872|
        LDRB     r2,[r1,r0]
        MOVS     r1,#0
        MOVS     r0,#0x21
        BL       dwt_write8bitoffsetreg
        MOVS     r0,#3
        STR      r0,[sp,#0xc]
        MOVS     r0,#1
        STR      r0,[sp,#8]
|L1.1758|
        LSLS     r0,r5,#28
        LSRS     r0,r0,#28
        LSLS     r1,r5,#4
        MOVS     r2,#0xf0
        ANDS     r1,r1,r2
        ORRS     r0,r0,r1
        LDRB     r1,[r4,#1]
        LSLS     r1,r1,#18
        MOVS     r2,#3
        LSLS     r2,r2,#18
        ANDS     r1,r1,r2
        ORRS     r0,r0,r1
        LDR      r1,[sp,#0xc]
        LSLS     r1,r1,#20
        LSLS     r2,r2,#2
        ANDS     r1,r1,r2
        B        |L1.1876|
|L1.1792|
        DCD      dw1000local
|L1.1796|
        DCD      0xdeca0130
|L1.1800|
        DCD      0x0000fdff
|L1.1804|
        DCD      0x00000b74
|L1.1808|
        DCD      0x00000806
|L1.1812|
        DCD      0x00000607
|L1.1816|
        DCD      0x00001806
|L1.1820|
        DCD      0x00001607
|L1.1824|
        DCD      lde_replicaCoeff
|L1.1828|
        DCD      0x00002804
|L1.1832|
        DCD      chan_idx
|L1.1836|
        DCD      fs_pll_cfg
|L1.1840|
        DCD      fs_pll_tune
|L1.1844|
        DCD      rx_config
|L1.1848|
        DCD      tx_config
|L1.1852|
        DCD      sftsh
|L1.1856|
        DCD      dtune1
|L1.1860|
        DCD      digital_bb_config
|L1.1864|
        DCD      0x00001041
|L1.1868|
        DCD      agc_config
|L1.1872|
        DCD      dwnsSFDlen
|L1.1876|
        ORRS     r0,r0,r1
        LDR      r1,[sp,#8]
        LSLS     r1,r1,#17
        MOVS     r2,#1
        LSLS     r2,r2,#17
        ANDS     r1,r1,r2
        ORRS     r0,r0,r1
        LDRB     r1,[r4,#4]
        LSLS     r1,r1,#22
        MOVS     r2,#0x1f
        LSLS     r2,r2,#22
        ANDS     r1,r1,r2
        ORRS     r0,r0,r1
        LDRB     r1,[r4,#5]
        LSLS     r1,r1,#27
        LSRS     r1,r1,#27
        LSLS     r1,r1,#27
        ORRS     r0,r0,r1
        MOV      r7,r0
        MOV      r2,r7
        MOVS     r1,#0
        MOVS     r0,#0x1f
        BL       dwt_write32bitoffsetreg
        LDRB     r0,[r4,#2]
        LDRB     r1,[r4,#1]
        ORRS     r0,r0,r1
        LSLS     r0,r0,#16
        LDRB     r1,[r4,#7]
        LSLS     r1,r1,#13
        ORRS     r0,r0,r1
        LDR      r1,|L1.2956|
        STR      r0,[r1,#0xc]  ; dw1000local
        MOV      r0,r1
        MOVS     r1,#0
        LDR      r2,[r0,#0xc]  ; dw1000local
        MOVS     r0,#8
        BL       dwt_write32bitoffsetreg
        MOVS     r2,#0x42
        MOVS     r1,#0
        MOVS     r0,#0xd
        BL       dwt_write8bitoffsetreg
        ADD      sp,sp,#0x14
        POP      {r4-r7,pc}
        ENDP

dwt_setrxantennadelay PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        MOV      r2,r4
        LDR      r1,|L1.2960|
        MOVS     r0,#0x2e
        BL       dwt_write16bitoffsetreg
        POP      {r4,pc}
        ENDP

dwt_settxantennadelay PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        MOV      r2,r4
        MOVS     r1,#0
        MOVS     r0,#0x18
        BL       dwt_write16bitoffsetreg
        POP      {r4,pc}
        ENDP

dwt_writetxdata PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOV      r6,r1
        MOV      r5,r2
        ADDS     r0,r5,r4
        MOVS     r1,#1
        LSLS     r1,r1,#10
        CMP      r0,r1
        BGT      |L1.2034|
        SUBS     r2,r4,#2
        MOV      r3,r6
        MOV      r1,r5
        MOVS     r0,#9
        BL       dwt_writetodevice
        MOVS     r0,#0
|L1.2032|
        POP      {r4-r6,pc}
|L1.2034|
        MOVS     r0,#0
        MVNS     r0,r0
        B        |L1.2032|
        ENDP

dwt_writetxfctrl PROC
        PUSH     {r3-r7,lr}
        MOV      r4,r0
        MOV      r5,r1
        MOV      r6,r2
        LDR      r0,|L1.2956|
        LDR      r0,[r0,#0xc]  ; dw1000local
        ORRS     r0,r0,r4
        LSLS     r1,r5,#22
        ORRS     r0,r0,r1
        LSLS     r1,r6,#15
        ORRS     r0,r0,r1
        MOV      r7,r0
        MOV      r2,r7
        MOVS     r1,#0
        MOVS     r0,#8
        BL       dwt_write32bitoffsetreg
        POP      {r3-r7,pc}
        ENDP

dwt_readrxdata PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOV      r5,r1
        MOV      r6,r2
        MOV      r3,r4
        MOV      r2,r5
        MOV      r1,r6
        MOVS     r0,#0x11
        BL       dwt_readfromdevice
        POP      {r4-r6,pc}
        ENDP

dwt_readaccdata PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOV      r5,r1
        MOV      r6,r2
        MOVS     r0,#7
        BL       _dwt_enableclocks
        MOV      r3,r4
        MOV      r2,r5
        MOV      r1,r6
        MOVS     r0,#0x25
        BL       dwt_readfromdevice
        MOVS     r0,#8
        BL       _dwt_enableclocks
        POP      {r4-r6,pc}
        ENDP

dwt_readdiagnostics PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        MOVS     r1,#5
        MOVS     r0,#0x15
        BL       dwt_read16bitoffsetreg
        STRH     r0,[r4,#0xe]
        MOVS     r1,#0
        MOVS     r0,#0x2e
        BL       dwt_read16bitoffsetreg
        STRH     r0,[r4,#0]
        ADDS     r3,r4,#4
        MOVS     r2,#8
        MOVS     r1,#0
        MOVS     r0,#0x12
        BL       dwt_readfromdevice
        MOVS     r1,#7
        MOVS     r0,#0x15
        BL       dwt_read16bitoffsetreg
        STRH     r0,[r4,#2]
        MOVS     r1,#0
        MOVS     r0,#0x10
        BL       dwt_read32bitoffsetreg
        LSRS     r0,r0,#20
        STRH     r0,[r4,#0xc]
        POP      {r4,pc}
        ENDP

dwt_readtxtimestamp PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        MOV      r3,r4
        MOVS     r2,#5
        MOVS     r1,#0
        MOVS     r0,#0x17
        BL       dwt_readfromdevice
        POP      {r4,pc}
        ENDP

dwt_readtxtimestamphi32 PROC
        PUSH     {r4,lr}
        MOVS     r1,#1
        MOVS     r0,#0x17
        BL       dwt_read32bitoffsetreg
        POP      {r4,pc}
        ENDP

dwt_readtxtimestamplo32 PROC
        PUSH     {r4,lr}
        MOVS     r1,#0
        MOVS     r0,#0x17
        BL       dwt_read32bitoffsetreg
        POP      {r4,pc}
        ENDP

dwt_readrxtimestamp PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        MOV      r3,r4
        MOVS     r2,#5
        MOVS     r1,#0
        MOVS     r0,#0x15
        BL       dwt_readfromdevice
        POP      {r4,pc}
        ENDP

dwt_readrxtimestamphi32 PROC
        PUSH     {r4,lr}
        MOVS     r1,#1
        MOVS     r0,#0x15
        BL       dwt_read32bitoffsetreg
        POP      {r4,pc}
        ENDP

dwt_readrxtimestamplo32 PROC
        PUSH     {r4,lr}
        MOVS     r1,#0
        MOVS     r0,#0x15
        BL       dwt_read32bitoffsetreg
        POP      {r4,pc}
        ENDP

dwt_readsystimestamphi32 PROC
        PUSH     {r4,lr}
        MOVS     r1,#1
        MOVS     r0,#6
        BL       dwt_read32bitoffsetreg
        POP      {r4,pc}
        ENDP

dwt_readsystime PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        MOV      r3,r4
        MOVS     r2,#5
        MOVS     r1,#0
        MOVS     r0,#6
        BL       dwt_readfromdevice
        POP      {r4,pc}
        ENDP

dwt_read8bitoffsetreg PROC
        PUSH     {r3-r5,lr}
        MOV      r4,r0
        MOV      r5,r1
        UXTH     r1,r5
        UXTH     r0,r4
        MOV      r3,sp
        MOVS     r2,#1
        BL       dwt_readfromdevice
        MOV      r0,sp
        LDRB     r0,[r0,#0]
        POP      {r3-r5,pc}
        ENDP

dwt_enableframefilter PROC
        PUSH     {r4-r6,lr}
        MOV      r5,r0
        MOVS     r1,#0
        MOVS     r0,#4
        BL       dwt_read32bitoffsetreg
        LDR      r1,|L1.2964|
        ANDS     r0,r0,r1
        MOV      r4,r0
        CMP      r5,#0
        BEQ      |L1.2372|
        MOVS     r1,#0xff
        ADDS     r1,r1,#0xff
        MOV      r0,r4
        BICS     r0,r0,r1
        MOV      r4,r0
        MOV      r0,r5
        ANDS     r0,r0,r1
        ADDS     r0,r0,#1
        ORRS     r4,r4,r0
        B        |L1.2376|
|L1.2372|
        LSRS     r4,r4,#1
        LSLS     r4,r4,#1
|L1.2376|
        LDR      r0,|L1.2956|
        STR      r4,[r0,#0x14]  ; dw1000local
        MOV      r2,r4
        MOVS     r1,#0
        MOVS     r0,#4
        BL       dwt_write32bitoffsetreg
        POP      {r4-r6,pc}
        ENDP

dwt_setpanid PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        MOV      r2,r4
        MOVS     r1,#2
        MOVS     r0,#3
        BL       dwt_write16bitoffsetreg
        POP      {r4,pc}
        ENDP

dwt_setaddress16 PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        MOV      r2,r4
        MOVS     r1,#0
        MOVS     r0,#3
        BL       dwt_write16bitoffsetreg
        POP      {r4,pc}
        ENDP

dwt_seteui PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        MOV      r3,r4
        MOVS     r2,#8
        MOVS     r1,#0
        MOVS     r0,#1
        BL       dwt_writetodevice
        POP      {r4,pc}
        ENDP

dwt_geteui PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        MOV      r3,r4
        MOVS     r2,#8
        MOVS     r1,#0
        MOVS     r0,#1
        BL       dwt_readfromdevice
        POP      {r4,pc}
        ENDP

dwt_otpread PROC
        PUSH     {r3-r7,lr}
        MOV      r5,r0
        MOV      r6,r1
        MOV      r7,r2
        MOVS     r0,#0
        BL       _dwt_enableclocks
        MOVS     r4,#0
        B        |L1.2490|
|L1.2478|
        ADDS     r0,r5,r4
        BL       _dwt_otpread
        LSLS     r1,r4,#2
        STR      r0,[r6,r1]
        ADDS     r4,r4,#1
|L1.2490|
        CMP      r4,r7
        BLT      |L1.2478|
        MOVS     r0,#1
        BL       _dwt_enableclocks
        POP      {r3-r7,pc}
        ENDP

_dwt_otpsetmrregs PROC
        PUSH     {r1-r7,lr}
        MOV      r4,r0
        MOVS     r5,#0
        MOVS     r6,#0
        MOVS     r7,#0
        MOVS     r0,#3
        MOV      r1,sp
        STRB     r0,[r1,#0]
        MOV      r3,sp
        MOVS     r2,#1
        MOVS     r1,#7
        MOVS     r0,#0x2d
        BL       dwt_writetodevice
        LSLS     r0,r4,#28
        LSRS     r0,r0,#28
        MOVS     r3,r0
        BL       __ARM_common_switch8
        DCB      0x06,0x04,0x08,0x0c
        DCB      0x11,0x16,0x1a,0x1e
        MOVS     r7,#0
        MOVS     r5,#0
        MOVS     r6,#0
        B        |L1.2606|
        LDR      r7,|L1.2968|
        LDR      r5,|L1.2972|
        MOVS     r6,#0xe
        B        |L1.2606|
        LDR      r7,|L1.2960|
        ADDS     r7,r7,#0x20
        LDR      r5,|L1.2972|
        MOVS     r6,#3
        B        |L1.2606|
        LDR      r7,|L1.2960|
        ADDS     r7,r7,#0x20
        LDR      r5,|L1.2972|
        MOVS     r6,#0x4e
        B        |L1.2606|
        MOVS     r7,#0
        MOVS     r5,#0
        MOVS     r6,#3
        B        |L1.2606|
        MOVS     r7,#0x24
        MOVS     r5,#0
        MOVS     r6,#3
        B        |L1.2606|
        MOVS     r0,#0
        MVNS     r0,r0
|L1.2604|
        POP      {r1-r7,pc}
|L1.2606|
        NOP      
        MOV      r0,sp
        STRB     r5,[r0,#0]
        MOVS     r0,#0xff
        LSLS     r0,r0,#8
        ANDS     r0,r0,r5
        LSRS     r1,r0,#8
        MOV      r0,sp
        STRB     r1,[r0,#1]
        MOV      r3,sp
        MOVS     r2,#2
        MOVS     r1,#0
        MOVS     r0,#0x2d
        BL       dwt_writetodevice
        MOVS     r1,#8
        MOV      r0,sp
        STRB     r1,[r0,#0]
        MOV      r3,sp
        MOVS     r2,#1
        MOVS     r1,#6
        MOVS     r0,#0x2d
        BL       dwt_writetodevice
        MOVS     r1,#2
        MOV      r0,sp
        STRB     r1,[r0,#0]
        MOV      r3,sp
        MOVS     r2,#1
        MOVS     r1,#7
        MOVS     r0,#0x2d
        BL       dwt_writetodevice
        MOVS     r1,#0x88
        MOV      r0,sp
        STRB     r1,[r0,#0]
        MOV      r3,sp
        MOVS     r2,#1
        MOVS     r1,#6
        MOVS     r0,#0x2d
        BL       dwt_writetodevice
        MOVS     r1,#0x80
        MOV      r0,sp
        STRB     r1,[r0,#0]
        MOV      r3,sp
        MOVS     r2,#1
        MOVS     r1,#6
        MOVS     r0,#0x2d
        BL       dwt_writetodevice
        MOVS     r1,#0
        MOV      r0,sp
        STRB     r1,[r0,#0]
        MOV      r3,sp
        MOVS     r2,#1
        MOVS     r1,#6
        MOVS     r0,#0x2d
        BL       dwt_writetodevice
        MOVS     r1,#5
        MOV      r0,sp
        STRB     r1,[r0,#0]
        MOV      r3,sp
        MOVS     r2,#1
        MOVS     r1,#7
        MOVS     r0,#0x2d
        BL       dwt_writetodevice
        MOV      r0,sp
        STRB     r6,[r0,#0]
        MOVS     r0,#0xff
        LSLS     r0,r0,#8
        ANDS     r0,r0,r6
        LSRS     r1,r0,#8
        MOV      r0,sp
        STRB     r1,[r0,#1]
        MOV      r3,sp
        MOVS     r2,#2
        MOVS     r1,#0
        MOVS     r0,#0x2d
        BL       dwt_writetodevice
        MOVS     r1,#8
        MOV      r0,sp
        STRB     r1,[r0,#0]
        MOV      r3,sp
        MOVS     r2,#1
        MOVS     r1,#6
        MOVS     r0,#0x2d
        BL       dwt_writetodevice
        MOVS     r1,#4
        MOV      r0,sp
        STRB     r1,[r0,#0]
        MOV      r3,sp
        MOVS     r2,#1
        MOVS     r1,#7
        MOVS     r0,#0x2d
        BL       dwt_writetodevice
        MOVS     r1,#0x88
        MOV      r0,sp
        STRB     r1,[r0,#0]
        MOV      r3,sp
        MOVS     r2,#1
        MOVS     r1,#6
        MOVS     r0,#0x2d
        BL       dwt_writetodevice
        MOVS     r1,#0x80
        MOV      r0,sp
        STRB     r1,[r0,#0]
        MOV      r3,sp
        MOVS     r2,#1
        MOVS     r1,#6
        MOVS     r0,#0x2d
        BL       dwt_writetodevice
        MOVS     r1,#0
        MOV      r0,sp
        STRB     r1,[r0,#0]
        MOV      r3,sp
        MOVS     r2,#1
        MOVS     r1,#6
        MOVS     r0,#0x2d
        BL       dwt_writetodevice
        MOVS     r1,#1
        MOV      r0,sp
        STRB     r1,[r0,#0]
        MOV      r3,sp
        MOVS     r2,#1
        MOVS     r1,#7
        MOVS     r0,#0x2d
        BL       dwt_writetodevice
        MOV      r0,sp
        STRB     r7,[r0,#0]
        MOVS     r0,#0xff
        LSLS     r0,r0,#8
        ANDS     r0,r0,r7
        LSRS     r1,r0,#8
        MOV      r0,sp
        STRB     r1,[r0,#1]
        MOV      r3,sp
        MOVS     r2,#2
        MOVS     r1,#0
        MOVS     r0,#0x2d
        BL       dwt_writetodevice
        MOVS     r1,#8
        MOV      r0,sp
        STRB     r1,[r0,#0]
        MOV      r3,sp
        MOVS     r2,#1
        MOVS     r1,#6
        MOVS     r0,#0x2d
        BL       dwt_writetodevice
        MOVS     r0,#0xa
        BL       deca_sleep
        MOVS     r1,#0
        MOV      r0,sp
        STRB     r1,[r0,#0]
        MOV      r3,sp
        MOVS     r2,#1
        MOVS     r1,#7
        MOVS     r0,#0x2d
        BL       dwt_writetodevice
        MOVS     r1,#1
        MOV      r0,sp
        B        |L1.2976|
|L1.2956|
        DCD      dw1000local
|L1.2960|
        DCD      0x00001804
|L1.2964|
        DCD      0xf047ffff
|L1.2968|
        DCD      0x00001024
|L1.2972|
        DCD      0x00009220
|L1.2976|
        STRB     r1,[r0,#0]
        MOV      r3,sp
        MOVS     r2,#1
        MOVS     r1,#6
        MOVS     r0,#0x2d
        BL       dwt_writetodevice
        MOVS     r1,#2
        MOV      r0,sp
        STRB     r1,[r0,#0]
        MOV      r3,sp
        MOVS     r2,#1
        MOVS     r1,#7
        MOVS     r0,#0x2d
        BL       dwt_writetodevice
        MOVS     r1,#4
        MOV      r0,sp
        STRB     r1,[r0,#0]
        MOV      r3,sp
        MOVS     r2,#1
        MOVS     r1,#7
        MOVS     r0,#0x2d
        BL       dwt_writetodevice
        MOVS     r0,#0x64
        BL       deca_sleep
        MOVS     r1,#0
        MOV      r0,sp
        STRB     r1,[r0,#0]
        MOV      r3,sp
        MOVS     r2,#1
        MOVS     r1,#7
        MOVS     r0,#0x2d
        BL       dwt_writetodevice
        MOVS     r1,#0
        MOV      r0,sp
        STRB     r1,[r0,#0]
        MOV      r3,sp
        MOVS     r2,#1
        MOVS     r1,#6
        MOVS     r0,#0x2d
        BL       dwt_writetodevice
        MOVS     r0,#0xa
        BL       deca_sleep
        LSLS     r0,r4,#28
        LSRS     r0,r0,#28
        CMP      r0,#1
        BEQ      |L1.3090|
        LSLS     r0,r4,#28
        LSRS     r0,r0,#28
        CMP      r0,#2
        BNE      |L1.3102|
|L1.3090|
        ADD      r3,sp,#4
        MOVS     r2,#1
        MOVS     r1,#8
        MOVS     r0,#0x2d
        BL       dwt_readfromdevice
|L1.3102|
        MOVS     r0,#0
        B        |L1.2604|
        ENDP

_dwt_otpprogword32 PROC
        PUSH     {r2-r6,lr}
        MOV      r4,r0
        MOV      r5,r1
        ADD      r3,sp,#4
        MOVS     r2,#1
        MOVS     r1,#8
        MOVS     r0,#0x2d
        BL       dwt_readfromdevice
        MOV      r0,sp
        LDRB     r0,[r0,#4]
        MOVS     r1,#2
        ANDS     r0,r0,r1
        CMP      r0,#2
        BEQ      |L1.3140|
        SUBS     r0,r1,#3
|L1.3138|
        POP      {r2-r6,pc}
|L1.3140|
        LSRS     r0,r4,#24
        MOV      r1,sp
        STRB     r0,[r1,#3]
        LSLS     r0,r4,#8
        LSRS     r1,r0,#24
        MOV      r0,sp
        STRB     r1,[r0,#2]
        LSLS     r0,r4,#16
        LSRS     r1,r0,#24
        MOV      r0,sp
        STRB     r1,[r0,#1]
        STRB     r4,[r0,#0]
        MOV      r3,sp
        MOVS     r2,#4
        MOVS     r1,#0
        MOVS     r0,#0x2d
        BL       dwt_writetodevice
        LSLS     r0,r5,#21
        LSRS     r1,r0,#29
        MOV      r0,sp
        STRB     r1,[r0,#1]
        STRB     r5,[r0,#0]
        MOV      r3,sp
        MOVS     r2,#2
        MOVS     r1,#4
        MOVS     r0,#0x2d
        BL       dwt_writetodevice
        MOVS     r1,#0x40
        MOV      r0,sp
        STRB     r1,[r0,#0]
        MOV      r3,sp
        MOVS     r2,#1
        MOVS     r1,#6
        MOVS     r0,#0x2d
        BL       dwt_writetodevice
        MOVS     r1,#0
        MOV      r0,sp
        STRB     r1,[r0,#0]
        MOV      r3,sp
        MOVS     r2,#1
        MOVS     r1,#6
        MOVS     r0,#0x2d
        BL       dwt_writetodevice
        MOVS     r6,#0
        B        |L1.3268|
|L1.3238|
        MOVS     r0,#1
        BL       deca_sleep
        ADD      r3,sp,#4
        MOVS     r2,#1
        MOVS     r1,#8
        MOVS     r0,#0x2d
        BL       dwt_readfromdevice
        MOV      r0,sp
        LDRB     r0,[r0,#4]
        LSLS     r0,r0,#31
        LSRS     r0,r0,#31
        BEQ      |L1.3268|
        MOVS     r6,#1
|L1.3268|
        CMP      r6,#0
        BEQ      |L1.3238|
        MOVS     r0,#0
        B        |L1.3138|
        ENDP

dwt_otpwriteandverify PROC
        PUSH     {r3-r7,lr}
        MOV      r4,r0
        MOV      r5,r1
        MOVS     r7,#0
        MOVS     r6,#0
        MOVS     r0,#0
        BL       _dwt_enableclocks
        MOVS     r0,#1
        BL       _dwt_otpsetmrregs
        B        |L1.3328|
|L1.3300|
        MOV      r1,r5
        MOV      r0,r4
        BL       _dwt_otpprogword32
        MOV      r0,r5
        BL       _dwt_otpread
        CMP      r0,r4
        BNE      |L1.3320|
        B        |L1.3330|
|L1.3320|
        ADDS     r6,r6,#1
        CMP      r6,#5
        BNE      |L1.3328|
        B        |L1.3330|
|L1.3328|
        B        |L1.3300|
|L1.3330|
        NOP      
        MOVS     r0,#4
        BL       _dwt_otpsetmrregs
        MOV      r0,r5
        BL       _dwt_otpread
        CMP      r0,r4
        BEQ      |L1.3352|
        MOVS     r7,#0
        MVNS     r7,r7
|L1.3352|
        MOVS     r0,#0
        BL       _dwt_otpsetmrregs
        MOV      r0,r7
        POP      {r3-r7,pc}
        ENDP

_dwt_aonconfigupload PROC
        PUSH     {r4,lr}
        MOVS     r2,#4
        MOVS     r1,#2
        MOVS     r0,#0x2c
        BL       dwt_write8bitoffsetreg
        MOVS     r2,#0
        MOVS     r1,#2
        MOVS     r0,#0x2c
        BL       dwt_write8bitoffsetreg
        POP      {r4,pc}
        ENDP

dwt_entersleep PROC
        PUSH     {r4,lr}
        BL       _dwt_aonarrayupload
        POP      {r4,pc}
        ENDP

dwt_configuresleepcnt PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        MOVS     r0,#0
        BL       _dwt_enableclocks
        MOVS     r2,#0
        MOVS     r1,#6
        MOVS     r0,#0x2c
        BL       dwt_write8bitoffsetreg
        MOVS     r2,#0
        MOVS     r1,#0xa
        MOVS     r0,#0x2c
        BL       dwt_write8bitoffsetreg
        BL       _dwt_aonconfigupload
        MOV      r2,r4
        MOVS     r1,#8
        MOVS     r0,#0x2c
        BL       dwt_write16bitoffsetreg
        BL       _dwt_aonconfigupload
        MOVS     r2,#1
        MOVS     r1,#0xa
        MOVS     r0,#0x2c
        BL       dwt_write8bitoffsetreg
        BL       _dwt_aonconfigupload
        MOVS     r0,#1
        BL       _dwt_enableclocks
        POP      {r4,pc}
        ENDP

dwt_calibratesleepcnt PROC
        PUSH     {r4,lr}
        MOVS     r2,#4
        MOVS     r1,#0xa
        MOVS     r0,#0x2c
        BL       dwt_write8bitoffsetreg
        BL       _dwt_aonconfigupload
        MOVS     r2,#0
        MOVS     r1,#0xa
        MOVS     r0,#0x2c
        BL       dwt_write8bitoffsetreg
        BL       _dwt_aonconfigupload
        MOVS     r0,#0
        BL       _dwt_enableclocks
        MOVS     r0,#1
        BL       deca_sleep
        MOVS     r2,#0x76
        MOVS     r1,#4
        MOVS     r0,#0x2c
        BL       dwt_write8bitoffsetreg
        MOVS     r2,#0x80
        MOVS     r1,#2
        MOVS     r0,#0x2c
        BL       dwt_write8bitoffsetreg
        MOVS     r2,#0x88
        MOVS     r1,#2
        MOVS     r0,#0x2c
        BL       dwt_write8bitoffsetreg
        MOVS     r1,#3
        MOVS     r0,#0x2c
        BL       dwt_read8bitoffsetreg
        MOV      r4,r0
        LSLS     r4,r4,#8
        MOVS     r2,#0x75
        MOVS     r1,#4
        MOVS     r0,#0x2c
        BL       dwt_write8bitoffsetreg
        MOVS     r2,#0x80
        MOVS     r1,#2
        MOVS     r0,#0x2c
        BL       dwt_write8bitoffsetreg
        MOVS     r2,#0x88
        MOVS     r1,#2
        MOVS     r0,#0x2c
        BL       dwt_write8bitoffsetreg
        MOVS     r1,#3
        MOVS     r0,#0x2c
        BL       dwt_read8bitoffsetreg
        ORRS     r4,r4,r0
        MOVS     r2,#0
        MOVS     r1,#2
        MOVS     r0,#0x2c
        BL       dwt_write8bitoffsetreg
        MOVS     r0,#1
        BL       _dwt_enableclocks
        MOV      r0,r4
        POP      {r4,pc}
        ENDP

dwt_configuresleep PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOV      r5,r1
        LDR      r0,|L1.4632|
        LDRH     r0,[r0,#0x18]  ; dw1000local
        ORRS     r4,r4,r0
        MOV      r2,r4
        MOVS     r1,#0
        MOVS     r0,#0x2c
        BL       dwt_write16bitoffsetreg
        MOV      r2,r5
        MOVS     r1,#6
        MOVS     r0,#0x2c
        BL       dwt_write8bitoffsetreg
        POP      {r4-r6,pc}
        ENDP

dwt_entersleepaftertx PROC
        PUSH     {r4-r6,lr}
        MOV      r5,r0
        MOVS     r1,#4
        MOVS     r0,#0x36
        BL       dwt_read32bitoffsetreg
        MOV      r4,r0
        CMP      r5,#0
        BEQ      |L1.3668|
        MOVS     r0,#1
        LSLS     r0,r0,#11
        ORRS     r4,r4,r0
        B        |L1.3678|
|L1.3668|
        MOVS     r1,#1
        LSLS     r1,r1,#11
        MOV      r0,r4
        BICS     r0,r0,r1
        MOV      r4,r0
|L1.3678|
        MOV      r2,r4
        MOVS     r1,#4
        MOVS     r0,#0x36
        BL       dwt_write32bitoffsetreg
        POP      {r4-r6,pc}
        ENDP

dwt_spicswakeup PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOV      r5,r1
        BL       dwt_readdevid
        LDR      r1,|L1.4636|
        CMP      r0,r1
        BEQ      |L1.3726|
        MOV      r3,r4
        MOV      r2,r5
        MOVS     r1,#0
        MOV      r0,r1
        BL       dwt_readfromdevice
        MOVS     r0,#5
        BL       deca_sleep
        B        |L1.3730|
|L1.3726|
        MOVS     r0,#0
|L1.3728|
        POP      {r4-r6,pc}
|L1.3730|
        BL       dwt_readdevid
        LDR      r1,|L1.4636|
        CMP      r0,r1
        BEQ      |L1.3744|
        ASRS     r0,r1,#30
        B        |L1.3728|
|L1.3744|
        MOVS     r0,#0
        B        |L1.3728|
        ENDP

dwt_loadopsettabfromotp PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        LSLS     r0,r4,#5
        MOVS     r1,#0x60
        ANDS     r0,r0,r1
        ADDS     r5,r0,#1
        MOVS     r0,#0xe
        BL       _dwt_enableclocks
        MOV      r2,r5
        MOVS     r1,#0x12
        MOVS     r0,#0x2d
        BL       dwt_write16bitoffsetreg
        MOVS     r0,#1
        BL       _dwt_enableclocks
        POP      {r4-r6,pc}
        ENDP

dwt_setsmarttxpower PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        MOVS     r1,#0
        MOVS     r0,#4
        BL       dwt_read32bitoffsetreg
        LDR      r1,|L1.4632|
        STR      r0,[r1,#0x14]  ; dw1000local
        CMP      r4,#0
        BEQ      |L1.3820|
        MOV      r0,r1
        LDR      r0,[r0,#0x14]  ; dw1000local
        MOVS     r1,#1
        LSLS     r1,r1,#18
        BICS     r0,r0,r1
        LDR      r1,|L1.4632|
        STR      r0,[r1,#0x14]  ; dw1000local
        B        |L1.3834|
|L1.3820|
        LDR      r0,|L1.4632|
        LDR      r0,[r0,#0x14]  ; dw1000local
        MOVS     r1,#1
        LSLS     r1,r1,#18
        ORRS     r0,r0,r1
        LDR      r1,|L1.4632|
        STR      r0,[r1,#0x14]  ; dw1000local
|L1.3834|
        LDR      r0,|L1.4632|
        MOVS     r1,#0
        LDR      r2,[r0,#0x14]  ; dw1000local
        MOVS     r0,#4
        BL       dwt_write32bitoffsetreg
        POP      {r4,pc}
        ENDP

dwt_enableautoack PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        MOV      r2,r4
        MOVS     r1,#3
        MOVS     r0,#0x1a
        BL       dwt_write8bitoffsetreg
        LDR      r0,|L1.4632|
        LDR      r0,[r0,#0x14]  ; dw1000local
        MOVS     r1,#1
        LSLS     r1,r1,#30
        ORRS     r0,r0,r1
        LDR      r1,|L1.4632|
        STR      r0,[r1,#0x14]  ; dw1000local
        MOV      r0,r1
        MOVS     r1,#0
        LDR      r2,[r0,#0x14]  ; dw1000local
        MOVS     r0,#4
        BL       dwt_write32bitoffsetreg
        POP      {r4,pc}
        ENDP

dwt_setdblrxbuffmode PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        CMP      r4,#0
        BEQ      |L1.3918|
        LDR      r0,|L1.4632|
        LDR      r0,[r0,#0x14]  ; dw1000local
        MOVS     r1,#1
        LSLS     r1,r1,#12
        BICS     r0,r0,r1
        LDR      r1,|L1.4632|
        STR      r0,[r1,#0x14]  ; dw1000local
        MOVS     r0,#1
        STRB     r0,[r1,#0x11]
        B        |L1.3936|
|L1.3918|
        LDR      r0,|L1.4632|
        LDR      r0,[r0,#0x14]  ; dw1000local
        MOVS     r1,#1
        LSLS     r1,r1,#12
        ORRS     r0,r0,r1
        LDR      r1,|L1.4632|
        STR      r0,[r1,#0x14]  ; dw1000local
        MOVS     r0,#0
        STRB     r0,[r1,#0x11]
|L1.3936|
        LDR      r0,|L1.4632|
        MOVS     r1,#0
        LDR      r2,[r0,#0x14]  ; dw1000local
        MOVS     r0,#4
        BL       dwt_write32bitoffsetreg
        POP      {r4,pc}
        ENDP

dwt_setrxaftertxdelay PROC
        PUSH     {r4-r6,lr}
        MOV      r5,r0
        MOVS     r1,#0
        MOVS     r0,#0x1a
        BL       dwt_read32bitoffsetreg
        MOV      r4,r0
        LSRS     r4,r4,#20
        LSLS     r4,r4,#20
        LSLS     r0,r5,#12
        LSRS     r0,r0,#12
        ORRS     r4,r4,r0
        MOV      r2,r4
        MOVS     r1,#0
        MOVS     r0,#0x1a
        BL       dwt_write32bitoffsetreg
        POP      {r4-r6,pc}
        ENDP

dwt_setcallbacks PROC
        PUSH     {r4,lr}
        LDR      r4,|L1.4632|
        STR      r0,[r4,#0x28]  ; dw1000local
        STR      r1,[r4,#0x2c]  ; dw1000local
        STR      r2,[r4,#0x30]  ; dw1000local
        STR      r3,[r4,#0x34]  ; dw1000local
        POP      {r4,pc}
        ENDP

dwt_checkirq PROC
        PUSH     {r4,lr}
        MOVS     r1,#0
        MOVS     r0,#0xf
        BL       dwt_read8bitoffsetreg
        LSLS     r0,r0,#31
        LSRS     r0,r0,#31
        POP      {r4,pc}
        ENDP

dwt_rxreset PROC
        PUSH     {r4,lr}
        MOVS     r2,#0xe0
        MOVS     r1,#3
        MOVS     r0,#0x36
        BL       dwt_write8bitoffsetreg
        MOVS     r2,#0xf0
        MOVS     r1,#3
        MOVS     r0,#0x36
        BL       dwt_write8bitoffsetreg
        POP      {r4,pc}
        ENDP

dwt_syncrxbufptrs PROC
        PUSH     {r4,lr}
        MOVS     r1,#3
        MOVS     r0,#0xf
        BL       dwt_read8bitoffsetreg
        MOV      r4,r0
        MOVS     r0,#0x80
        ANDS     r0,r0,r4
        MOVS     r1,#0x40
        ANDS     r1,r1,r4
        LSLS     r1,r1,#1
        CMP      r0,r1
        BEQ      |L1.4076|
        MOVS     r2,#1
        MOVS     r1,#3
        MOVS     r0,#0xd
        BL       dwt_write8bitoffsetreg
|L1.4076|
        POP      {r4,pc}
        ENDP

dwt_forcetrxoff PROC
        PUSH     {r4-r6,lr}
        MOVS     r1,#0
        MOVS     r0,#0xe
        BL       dwt_read32bitoffsetreg
        MOV      r5,r0
        BL       decamutexon
        MOV      r4,r0
        MOVS     r2,#0
        MOV      r1,r2
        MOVS     r0,#0xe
        BL       dwt_write32bitoffsetreg
        MOVS     r2,#0x40
        MOVS     r1,#0
        MOVS     r0,#0xd
        BL       dwt_write8bitoffsetreg
        LDR      r2,|L1.4640|
        MOVS     r1,#0
        MOVS     r0,#0xf
        BL       dwt_write32bitoffsetreg
        BL       dwt_syncrxbufptrs
        MOV      r2,r5
        MOVS     r1,#0
        MOVS     r0,#0xe
        BL       dwt_write32bitoffsetreg
        MOV      r0,r4
        BL       decamutexoff
        MOVS     r0,#0
        LDR      r1,|L1.4632|
        STRB     r0,[r1,#0x1a]
        POP      {r4-r6,pc}
        ENDP

dwt_isr PROC
        PUSH     {r4-r6,lr}
        MOVS     r1,#0
        MOVS     r0,#0xf
        BL       dwt_read32bitoffsetreg
        LDR      r1,|L1.4632|
        MOV      r4,r0
        STR      r0,[r1,#0x1c]  ; dw1000local
        MOVS     r0,#1
        LSLS     r0,r0,#14
        TST      r4,r0
        BEQ      |L1.4344|
        MOVS     r2,#0x6f
        LSLS     r2,r2,#8
        MOVS     r1,#0
        MOVS     r0,#0xf
        BL       dwt_write32bitoffsetreg
        MOVS     r1,#0
        LDR      r0,|L1.4632|
        ADDS     r0,r0,#0x1c
        STRB     r1,[r0,#8]
        MOVS     r0,#0x10
        BL       dwt_read16bitoffsetreg
        MOV      r5,r0
        LSLS     r6,r5,#22
        LSRS     r6,r6,#22
        LDR      r0,|L1.4632|
        LDRB     r0,[r0,#8]  ; dw1000local
        CMP      r0,#0
        BNE      |L1.4222|
        LSLS     r6,r6,#25
        LSRS     r6,r6,#25
|L1.4222|
        LDR      r0,|L1.4632|
        STRH     r6,[r0,#0x20]
        MOVS     r0,#1
        LSLS     r0,r0,#15
        TST      r5,r0
        BEQ      |L1.4250|
        LDR      r0,|L1.4632|
        ADDS     r0,r0,#0x1c
        LDRB     r0,[r0,#8]
        MOVS     r1,#1
        ORRS     r0,r0,r1
        LDR      r1,|L1.4632|
        ADDS     r1,r1,#0x1c
        STRB     r0,[r1,#8]
|L1.4250|
        LDR      r3,|L1.4632|
        ADDS     r3,r3,#0x22
        MOVS     r2,#2
        MOVS     r1,#0
        MOVS     r0,#0x11
        BL       dwt_readfromdevice
        MOVS     r0,#8
        TST      r4,r0
        BEQ      |L1.4308|
        LDR      r0,|L1.4632|
        ADDS     r0,r0,#0x1c
        LDRB     r0,[r0,#6]
        MOVS     r1,#0x20
        TST      r0,r1
        BNE      |L1.4308|
        MOVS     r2,#8
        MOVS     r1,#0
        MOVS     r0,#0xf
        BL       dwt_write32bitoffsetreg
        LDR      r0,|L1.4632|
        LDR      r0,[r0,#0x1c]  ; dw1000local
        MOVS     r1,#8
        BICS     r0,r0,r1
        LDR      r1,|L1.4632|
        STR      r0,[r1,#0x1c]  ; dw1000local
        MOVS     r0,#0
        STRB     r0,[r1,#0x1a]
|L1.4308|
        LDR      r0,|L1.4632|
        LDR      r0,[r0,#0x2c]  ; dw1000local
        CMP      r0,#0
        BEQ      |L1.4324|
        LDR      r0,|L1.4632|
        LDR      r1,[r0,#0x2c]  ; dw1000local
        ADDS     r0,r0,#0x1c
        BLX      r1
|L1.4324|
        LDR      r0,|L1.4632|
        LDRB     r0,[r0,#0x11]  ; dw1000local
        CMP      r0,#0
        BEQ      |L1.4342|
        MOVS     r2,#1
        MOVS     r1,#3
        MOVS     r0,#0xd
        BL       dwt_write8bitoffsetreg
|L1.4342|
        NOP      
|L1.4344|
        MOVS     r0,#0x80
        TST      r4,r0
        BEQ      |L1.4398|
        MOVS     r2,#0xf8
        MOVS     r1,#0
        MOVS     r0,#0xf
        BL       dwt_write32bitoffsetreg
        MOVS     r0,#8
        TST      r4,r0
        BEQ      |L1.4382|
        LDR      r0,|L1.4632|
        LDRB     r0,[r0,#0x1a]  ; dw1000local
        CMP      r0,#0
        BEQ      |L1.4382|
        BL       dwt_forcetrxoff
        BL       dwt_rxreset
|L1.4382|
        LDR      r0,|L1.4632|
        LDR      r0,[r0,#0x28]  ; dw1000local
        CMP      r0,#0
        BEQ      |L1.4398|
        LDR      r0,|L1.4632|
        LDR      r1,[r0,#0x28]  ; dw1000local
        ADDS     r0,r0,#0x1c
        BLX      r1
|L1.4398|
        MOVS     r0,#0x11
        LSLS     r0,r0,#17
        TST      r4,r0
        BEQ      |L1.4448|
        MOVS     r2,#1
        LSLS     r2,r2,#17
        MOVS     r1,#0
        MOVS     r0,#0xf
        BL       dwt_write32bitoffsetreg
        MOVS     r0,#0
        LDR      r1,|L1.4632|
        STRB     r0,[r1,#0x1a]
        BL       dwt_forcetrxoff
        BL       dwt_rxreset
        LDR      r0,|L1.4632|
        LDR      r0,[r0,#0x30]  ; dw1000local
        CMP      r0,#0
        BEQ      |L1.4448|
        LDR      r0,|L1.4632|
        LDR      r1,[r0,#0x30]  ; dw1000local
        ADDS     r0,r0,#0x1c
        BLX      r1
|L1.4448|
        LDR      r0,|L1.4644|
        TST      r4,r0
        BEQ      |L1.4494|
        MOV      r2,r0
        MOVS     r1,#0
        MOVS     r0,#0xf
        BL       dwt_write32bitoffsetreg
        MOVS     r0,#0
        LDR      r1,|L1.4632|
        STRB     r0,[r1,#0x1a]
        BL       dwt_forcetrxoff
        BL       dwt_rxreset
        LDR      r0,|L1.4632|
        LDR      r0,[r0,#0x34]  ; dw1000local
        CMP      r0,#0
        BEQ      |L1.4494|
        LDR      r0,|L1.4632|
        LDR      r1,[r0,#0x34]  ; dw1000local
        ADDS     r0,r0,#0x1c
        BLX      r1
|L1.4494|
        POP      {r4-r6,pc}
        ENDP

dwt_setlowpowerlistening PROC
        PUSH     {r4-r6,lr}
        MOV      r5,r0
        MOVS     r1,#4
        MOVS     r0,#0x36
        BL       dwt_read32bitoffsetreg
        MOV      r4,r0
        CMP      r5,#0
        BEQ      |L1.4522|
        MOVS     r0,#3
        LSLS     r0,r0,#12
        ORRS     r4,r4,r0
        B        |L1.4532|
|L1.4522|
        MOVS     r1,#3
        LSLS     r1,r1,#12
        MOV      r0,r4
        BICS     r0,r0,r1
        MOV      r4,r0
|L1.4532|
        MOV      r2,r4
        MOVS     r1,#4
        MOVS     r0,#0x36
        BL       dwt_write32bitoffsetreg
        POP      {r4-r6,pc}
        ENDP

dwt_lowpowerlistenisr PROC
        PUSH     {r4-r6,lr}
        MOVS     r1,#0
        MOVS     r0,#0xf
        BL       dwt_read32bitoffsetreg
        LDR      r1,|L1.4632|
        MOV      r6,r0
        STR      r0,[r1,#0x1c]  ; dw1000local
        MOVS     r0,#0
        BL       dwt_setlowpowerlistening
        MOVS     r2,#0x6f
        LSLS     r2,r2,#8
        MOVS     r1,#0
        MOVS     r0,#0xf
        BL       dwt_write32bitoffsetreg
        MOVS     r1,#0
        LDR      r0,|L1.4632|
        ADDS     r0,r0,#0x1c
        STRB     r1,[r0,#8]
        MOVS     r0,#0x10
        BL       dwt_read16bitoffsetreg
        MOV      r4,r0
        LSLS     r5,r4,#22
        LSRS     r5,r5,#22
        LDR      r0,|L1.4632|
        LDRB     r0,[r0,#8]  ; dw1000local
        CMP      r0,#0
        BNE      |L1.4610|
        LSLS     r5,r5,#25
        LSRS     r5,r5,#25
|L1.4610|
        LDR      r0,|L1.4632|
        STRH     r5,[r0,#0x20]
        MOVS     r0,#1
        LSLS     r0,r0,#15
        TST      r4,r0
        BEQ      |L1.4654|
        LDR      r0,|L1.4632|
        ADDS     r0,r0,#0x1c
        LDRB     r0,[r0,#8]
        MOVS     r1,#1
        B        |L1.4648|
|L1.4632|
        DCD      dw1000local
|L1.4636|
        DCD      0xdeca0130
|L1.4640|
        DCD      0x2427fff8
|L1.4644|
        DCD      0x24059000
|L1.4648|
        ORRS     r0,r0,r1
        LDR      r1,|L1.5668|
        STRB     r0,[r1,#8]
|L1.4654|
        LDR      r3,|L1.5668|
        ADDS     r3,r3,#6
        MOVS     r2,#2
        MOVS     r1,#0
        MOVS     r0,#0x11
        BL       dwt_readfromdevice
        MOVS     r0,#8
        TST      r6,r0
        BEQ      |L1.4714|
        LDR      r0,|L1.5668|
        LDRB     r0,[r0,#6]
        MOVS     r1,#0x20
        TST      r0,r1
        BNE      |L1.4714|
        MOVS     r2,#8
        MOVS     r1,#0
        MOVS     r0,#0xf
        BL       dwt_write32bitoffsetreg
        LDR      r0,|L1.5668|
        SUBS     r0,r0,#0x1c
        LDR      r0,[r0,#0x1c]  ; dw1000local
        MOVS     r1,#8
        BICS     r0,r0,r1
        LDR      r1,|L1.5668|
        SUBS     r1,r1,#0x1c
        STR      r0,[r1,#0x1c]  ; dw1000local
        MOVS     r0,#0
        STRB     r0,[r1,#0x1a]
|L1.4714|
        LDR      r0,|L1.5668|
        SUBS     r0,r0,#0x1c
        LDR      r0,[r0,#0x2c]  ; dw1000local
        CMP      r0,#0
        BEQ      |L1.4734|
        LDR      r0,|L1.5668|
        SUBS     r0,r0,#0x1c
        LDR      r1,[r0,#0x2c]  ; dw1000local
        ADDS     r0,r0,#0x1c
        BLX      r1
|L1.4734|
        POP      {r4-r6,pc}
        ENDP

dwt_setleds PROC
        PUSH     {r4-r6,lr}
        MOV      r5,r0
        LSLS     r0,r5,#31
        LSRS     r0,r0,#31
        BEQ      |L1.4862|
        MOVS     r1,#0
        MOVS     r0,#0x26
        BL       dwt_read32bitoffsetreg
        MOV      r4,r0
        MOVS     r1,#0xf
        LSLS     r1,r1,#10
        MOV      r0,r4
        BICS     r0,r0,r1
        MOV      r4,r0
        MOVS     r0,#5
        LSLS     r0,r0,#10
        ORRS     r4,r4,r0
        MOV      r2,r4
        MOVS     r1,#0
        MOVS     r0,#0x26
        BL       dwt_write32bitoffsetreg
        MOVS     r1,#0
        MOVS     r0,#0x36
        BL       dwt_read32bitoffsetreg
        MOV      r4,r0
        MOVS     r0,#0x21
        LSLS     r0,r0,#18
        ORRS     r4,r4,r0
        MOV      r2,r4
        MOVS     r1,#0
        MOVS     r0,#0x36
        BL       dwt_write32bitoffsetreg
        MOVS     r4,#0xff
        ADDS     r4,r4,#0x11
        MOVS     r0,#2
        TST      r5,r0
        BEQ      |L1.4824|
        MOVS     r0,#0xf
        LSLS     r0,r0,#16
        ORRS     r4,r4,r0
|L1.4824|
        MOV      r2,r4
        MOVS     r1,#0x28
        MOVS     r0,#0x36
        BL       dwt_write32bitoffsetreg
        MOVS     r0,#2
        TST      r5,r0
        BEQ      |L1.4892|
        MOVS     r1,#0xf
        LSLS     r1,r1,#16
        MOV      r0,r4
        BICS     r0,r0,r1
        MOV      r4,r0
        MOV      r2,r4
        MOVS     r1,#0x28
        MOVS     r0,#0x36
        BL       dwt_write32bitoffsetreg
        B        |L1.4892|
|L1.4862|
        MOVS     r1,#0
        MOVS     r0,#0x26
        BL       dwt_read32bitoffsetreg
        MOV      r4,r0
        MOVS     r1,#0xf
        LSLS     r1,r1,#10
        MOV      r0,r4
        BICS     r0,r0,r1
        MOV      r4,r0
        MOV      r2,r4
        MOVS     r1,#0
        MOVS     r0,#0x26
        BL       dwt_write32bitoffsetreg
|L1.4892|
        POP      {r4-r6,pc}
        ENDP

dwt_setdelayedtrxtime PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        MOV      r2,r4
        MOVS     r1,#1
        MOVS     r0,#0xa
        BL       dwt_write32bitoffsetreg
        POP      {r4,pc}
        ENDP

dwt_starttx PROC
        PUSH     {r3-r7,lr}
        MOV      r4,r0
        MOVS     r6,#0
        MOVS     r5,#0
        MOVS     r7,#0
        MOVS     r0,#2
        TST      r4,r0
        BEQ      |L1.4946|
        MOVS     r5,#0x80
        MOV      r2,r5
        MOVS     r1,#0
        MOVS     r0,#0xd
        BL       dwt_write8bitoffsetreg
        MOVS     r0,#1
        LDR      r1,|L1.5668|
        SUBS     r1,r1,#0x1c
        STRB     r0,[r1,#0x1a]
|L1.4946|
        LSLS     r0,r4,#31
        LSRS     r0,r0,#31
        BEQ      |L1.5012|
        MOVS     r0,#6
        ORRS     r5,r5,r0
        MOV      r2,r5
        MOVS     r1,#0
        MOVS     r0,#0xd
        BL       dwt_write8bitoffsetreg
        MOVS     r1,#3
        MOVS     r0,#0xf
        BL       dwt_read16bitoffsetreg
        MOV      r7,r0
        MOVS     r0,#0x81
        LSLS     r0,r0,#3
        TST      r7,r0
        BNE      |L1.4988|
        MOVS     r6,#0
        B        |L1.5026|
|L1.4988|
        MOVS     r5,#0x40
        MOV      r2,r5
        MOVS     r1,#0
        MOVS     r0,#0xd
        BL       dwt_write8bitoffsetreg
        MOVS     r0,#0
        LDR      r1,|L1.5668|
        SUBS     r1,r1,#0x1c
        STRB     r0,[r1,#0x1a]
        SUBS     r6,r0,#1
        B        |L1.5026|
|L1.5012|
        MOVS     r0,#2
        ORRS     r5,r5,r0
        MOV      r2,r5
        MOVS     r1,#0
        MOVS     r0,#0xd
        BL       dwt_write8bitoffsetreg
|L1.5026|
        MOV      r0,r6
        POP      {r3-r7,pc}
        ENDP

dwt_setsniffmode PROC
        PUSH     {r3-r7,lr}
        MOV      r5,r0
        MOV      r6,r1
        MOV      r7,r2
        CMP      r5,#0
        BEQ      |L1.5090|
        LSLS     r0,r7,#8
        ORRS     r0,r0,r6
        LDR      r1,|L1.5672|
        ANDS     r0,r0,r1
        STR      r0,[sp,#0]
        MOVS     r1,#0
        MOVS     r0,#0x1d
        LDR      r2,[sp,#0]
        BL       dwt_write16bitoffsetreg
        MOVS     r1,#0
        MOVS     r0,#0x36
        BL       dwt_read32bitoffsetreg
        MOV      r4,r0
        MOVS     r0,#1
        LSLS     r0,r0,#24
        ORRS     r4,r4,r0
        MOV      r2,r4
        MOVS     r1,#0
        MOVS     r0,#0x36
        BL       dwt_write32bitoffsetreg
        B        |L1.5130|
|L1.5090|
        MOVS     r2,#0
        MOV      r1,r2
        MOVS     r0,#0x1d
        BL       dwt_write16bitoffsetreg
        MOVS     r1,#0
        MOVS     r0,#0x36
        BL       dwt_read32bitoffsetreg
        MOV      r4,r0
        MOVS     r1,#1
        LSLS     r1,r1,#24
        MOV      r0,r4
        BICS     r0,r0,r1
        MOV      r4,r0
        MOV      r2,r4
        MOVS     r1,#0
        MOVS     r0,#0x36
        BL       dwt_write32bitoffsetreg
|L1.5130|
        POP      {r3-r7,pc}
        ENDP

dwt_setsnoozetime PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        MOV      r2,r4
        MOVS     r1,#0xc
        MOVS     r0,#0x36
        BL       dwt_write8bitoffsetreg
        POP      {r4,pc}
        ENDP

dwt_rxenable PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOVS     r0,#4
        TST      r4,r0
        BNE      |L1.5162|
        BL       dwt_syncrxbufptrs
|L1.5162|
        MOVS     r5,#0xff
        ADDS     r5,#1
        LSLS     r0,r4,#31
        LSRS     r0,r0,#31
        BEQ      |L1.5176|
        LSLS     r0,r5,#1
        ORRS     r5,r5,r0
|L1.5176|
        MOV      r2,r5
        MOVS     r1,#0
        MOVS     r0,#0xd
        BL       dwt_write16bitoffsetreg
        LSLS     r0,r4,#31
        LSRS     r0,r0,#31
        BEQ      |L1.5234|
        MOVS     r1,#3
        MOVS     r0,#0xf
        BL       dwt_read8bitoffsetreg
        MOV      r6,r0
        MOVS     r0,#8
        TST      r6,r0
        BEQ      |L1.5234|
        BL       dwt_forcetrxoff
        MOVS     r0,#2
        TST      r4,r0
        BNE      |L1.5228|
        LSLS     r2,r0,#7
        MOVS     r1,#0
        MOVS     r0,#0xd
        BL       dwt_write16bitoffsetreg
|L1.5228|
        MOVS     r0,#0
        MVNS     r0,r0
|L1.5232|
        POP      {r4-r6,pc}
|L1.5234|
        MOVS     r0,#0
        B        |L1.5232|
        ENDP

dwt_setrxtimeout PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOVS     r1,#3
        MOVS     r0,#4
        BL       dwt_read8bitoffsetreg
        MOV      r5,r0
        CMP      r4,#0
        BLE      |L1.5300|
        MOV      r2,r4
        MOVS     r1,#0
        MOVS     r0,#0xc
        BL       dwt_write16bitoffsetreg
        MOVS     r0,#0x10
        ORRS     r5,r5,r0
        LDR      r0,|L1.5668|
        SUBS     r0,r0,#0x1c
        LDR      r0,[r0,#0x14]  ; dw1000local
        MOVS     r1,#1
        LSLS     r1,r1,#28
        ORRS     r0,r0,r1
        LDR      r1,|L1.5668|
        SUBS     r1,r1,#0x1c
        STR      r0,[r1,#0x14]  ; dw1000local
        MOV      r2,r5
        MOVS     r1,#3
        MOVS     r0,#4
        BL       dwt_write8bitoffsetreg
        B        |L1.5334|
|L1.5300|
        MOVS     r1,#0x10
        MOV      r0,r5
        BICS     r0,r0,r1
        MOV      r5,r0
        LDR      r0,|L1.5668|
        SUBS     r0,r0,#0x1c
        LDR      r0,[r0,#0x14]  ; dw1000local
        LSLS     r1,r1,#24
        BICS     r0,r0,r1
        LDR      r1,|L1.5668|
        SUBS     r1,r1,#0x1c
        STR      r0,[r1,#0x14]  ; dw1000local
        MOV      r2,r5
        MOVS     r1,#3
        MOVS     r0,#4
        BL       dwt_write8bitoffsetreg
|L1.5334|
        POP      {r4-r6,pc}
        ENDP

dwt_setpreambledetecttimeout PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        MOV      r2,r4
        MOVS     r1,#0x24
        MOVS     r0,#0x27
        BL       dwt_write16bitoffsetreg
        POP      {r4,pc}
        ENDP

dwt_setinterrupt PROC
        PUSH     {r3-r7,lr}
        MOV      r4,r0
        MOV      r6,r1
        BL       decamutexon
        MOV      r7,r0
        MOVS     r1,#0
        MOVS     r0,#0xe
        BL       dwt_read32bitoffsetreg
        MOV      r5,r0
        CMP      r6,#0
        BEQ      |L1.5386|
        MOV      r0,r5
        ORRS     r0,r0,r4
        MOV      r5,r0
        B        |L1.5392|
|L1.5386|
        MOV      r0,r5
        BICS     r0,r0,r4
        MOV      r5,r0
|L1.5392|
        MOV      r2,r5
        MOVS     r1,#0
        MOVS     r0,#0xe
        BL       dwt_write32bitoffsetreg
        UXTH     r0,r7
        BL       decamutexoff
        POP      {r3-r7,pc}
        ENDP

dwt_configeventcounters PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        MOVS     r2,#2
        MOVS     r1,#0
        MOVS     r0,#0x2f
        BL       dwt_write8bitoffsetreg
        CMP      r4,#0
        BEQ      |L1.5438|
        MOVS     r2,#1
        MOVS     r1,#0
        MOVS     r0,#0x2f
        BL       dwt_write8bitoffsetreg
|L1.5438|
        POP      {r4,pc}
        ENDP

dwt_readeventcounters PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOVS     r1,#4
        MOVS     r0,#0x2f
        BL       dwt_read32bitoffsetreg
        MOV      r5,r0
        LSLS     r0,r5,#20
        LSRS     r0,r0,#20
        STRH     r0,[r4,#0]
        LSLS     r0,r5,#4
        LSRS     r0,r0,#20
        STRH     r0,[r4,#2]
        MOVS     r1,#8
        MOVS     r0,#0x2f
        BL       dwt_read32bitoffsetreg
        MOV      r5,r0
        LSLS     r0,r5,#20
        LSRS     r0,r0,#20
        STRH     r0,[r4,#4]
        LSLS     r0,r5,#4
        LSRS     r0,r0,#20
        STRH     r0,[r4,#6]
        MOVS     r1,#0xc
        MOVS     r0,#0x2f
        BL       dwt_read32bitoffsetreg
        MOV      r5,r0
        LSLS     r0,r5,#20
        LSRS     r0,r0,#20
        STRH     r0,[r4,#8]
        LSLS     r0,r5,#4
        LSRS     r0,r0,#20
        STRH     r0,[r4,#0xa]
        MOVS     r1,#0x10
        MOVS     r0,#0x2f
        BL       dwt_read32bitoffsetreg
        MOV      r5,r0
        LSLS     r0,r5,#4
        LSRS     r0,r0,#20
        STRH     r0,[r4,#0xe]
        LSLS     r0,r5,#20
        LSRS     r0,r0,#20
        STRH     r0,[r4,#0xc]
        MOVS     r1,#0x14
        MOVS     r0,#0x2f
        BL       dwt_read32bitoffsetreg
        MOV      r5,r0
        LSLS     r0,r5,#4
        LSRS     r0,r0,#20
        STRH     r0,[r4,#0x12]
        LSLS     r0,r5,#20
        LSRS     r0,r0,#20
        STRH     r0,[r4,#0x10]
        MOVS     r1,#0x18
        MOVS     r0,#0x2f
        BL       dwt_read32bitoffsetreg
        MOV      r5,r0
        LSLS     r0,r5,#20
        LSRS     r0,r0,#20
        STRH     r0,[r4,#0x14]
        LSLS     r0,r5,#4
        LSRS     r0,r0,#20
        STRH     r0,[r4,#0x16]
        POP      {r4-r6,pc}
        ENDP

dwt_getinitxtaltrim PROC
        LDR      r0,|L1.5668|
        SUBS     r0,r0,#0x1c
        LDRB     r0,[r0,#0x10]  ; dw1000local
        BX       lr
        ENDP

dwt_configcwmode PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        BL       _dwt_disablesequencing
        LDR      r0,|L1.5676|
        LDRB     r0,[r0,r4]
        LSLS     r0,r0,#2
        LDR      r1,|L1.5680|
        LDR      r2,[r1,r0]
        MOVS     r1,#7
        MOVS     r0,#0x2b
        BL       dwt_write32bitoffsetreg
        LDR      r0,|L1.5676|
        LDRB     r0,[r0,r4]
        LDR      r1,|L1.5684|
        LDRB     r2,[r1,r0]
        MOVS     r1,#0xb
        MOVS     r0,#0x2b
        BL       dwt_write8bitoffsetreg
        LDR      r0,|L1.5676|
        LDRB     r0,[r0,r4]
        LSLS     r0,r0,#2
        LDR      r1,|L1.5688|
        LDR      r2,[r1,r0]
        MOVS     r1,#0xc
        MOVS     r0,#0x28
        BL       dwt_write32bitoffsetreg
        MOVS     r2,#0xff
        LSLS     r2,r2,#13
        MOVS     r1,#0
        MOVS     r0,#0x28
        BL       dwt_write32bitoffsetreg
        LDR      r2,|L1.5692|
        MOVS     r1,#0
        MOVS     r0,#0x28
        B        |L1.5696|
        DCW      0x0000
|L1.5668|
        DCD      dw1000local+0x1c
|L1.5672|
        DCD      0x0000ff0f
|L1.5676|
        DCD      chan_idx
|L1.5680|
        DCD      fs_pll_cfg
|L1.5684|
        DCD      fs_pll_tune
|L1.5688|
        DCD      tx_config
|L1.5692|
        DCD      0x005fff00
|L1.5696|
        BL       dwt_write32bitoffsetreg
        MOVS     r2,#0x22
        MOVS     r1,#0
        MOVS     r0,#0x36
        BL       dwt_write8bitoffsetreg
        MOVS     r2,#7
        MOVS     r1,#1
        MOVS     r0,#0x36
        BL       dwt_write8bitoffsetreg
        MOVS     r0,#0
        BL       dwt_setfinegraintxseq
        MOVS     r2,#0x13
        MOVS     r1,#0xc
        MOVS     r0,#0x2a
        BL       dwt_write8bitoffsetreg
        POP      {r4,pc}
        ENDP

dwt_configcontinuousframemode PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        BL       _dwt_disablesequencing
        MOVS     r2,#0xff
        LSLS     r2,r2,#13
        MOVS     r1,#0
        MOVS     r0,#0x28
        BL       dwt_write32bitoffsetreg
        LDR      r2,|L1.6000|
        MOVS     r1,#0
        MOVS     r0,#0x28
        BL       dwt_write32bitoffsetreg
        MOVS     r0,#2
        BL       _dwt_enableclocks
        MOVS     r0,#0xd
        BL       _dwt_enableclocks
        CMP      r4,#4
        BCS      |L1.5786|
        MOVS     r4,#4
|L1.5786|
        MOV      r2,r4
        MOVS     r1,#0
        MOVS     r0,#0xa
        BL       dwt_write32bitoffsetreg
        MOVS     r2,#0x10
        MOVS     r1,#0x24
        MOVS     r0,#0x2f
        BL       dwt_write8bitoffsetreg
        POP      {r4,pc}
        ENDP

dwt_readtempvbat PROC
        PUSH     {r3-r7,lr}
        MOV      r4,r0
        MOVS     r1,#0x80
        MOV      r0,sp
        STRB     r1,[r0,#0]
        MOV      r3,sp
        MOVS     r2,#1
        MOVS     r1,#0x11
        MOVS     r0,#0x28
        BL       dwt_writetodevice
        MOVS     r1,#0xa
        MOV      r0,sp
        STRB     r1,[r0,#0]
        MOV      r3,sp
        MOVS     r2,#1
        MOVS     r1,#0x12
        MOVS     r0,#0x28
        BL       dwt_writetodevice
        MOVS     r1,#0xf
        MOV      r0,sp
        STRB     r1,[r0,#0]
        MOV      r3,sp
        MOVS     r2,#1
        MOVS     r1,#0x12
        MOVS     r0,#0x28
        BL       dwt_writetodevice
        MOVS     r1,#0
        MOV      r0,sp
        STRB     r1,[r0,#0]
        MOV      r3,sp
        MOVS     r2,#1
        MOVS     r0,#0x2a
        BL       dwt_writetodevice
        MOVS     r1,#1
        MOV      r0,sp
        STRB     r1,[r0,#0]
        MOV      r3,sp
        MOVS     r2,#1
        MOVS     r1,#0
        MOVS     r0,#0x2a
        BL       dwt_writetodevice
        CMP      r4,#1
        BNE      |L1.5924|
        MOVS     r0,#1
        BL       deca_sleep
        MOV      r3,sp
        MOVS     r2,#2
        MOVS     r1,#3
        MOVS     r0,#0x2a
        BL       dwt_readfromdevice
        B        |L1.5948|
|L1.5924|
        MOVS     r0,#0
        BL       _dwt_enableclocks
        MOV      r3,sp
        MOVS     r2,#2
        MOVS     r1,#3
        MOVS     r0,#0x2a
        BL       dwt_readfromdevice
        MOVS     r0,#1
        BL       _dwt_enableclocks
|L1.5948|
        MOV      r0,sp
        LDRB     r5,[r0,#0]
        LDRB     r6,[r0,#1]
        MOVS     r1,#0
        STRB     r1,[r0,#0]
        MOV      r3,sp
        MOVS     r2,#1
        MOVS     r0,#0x2a
        BL       dwt_writetodevice
        LSLS     r0,r6,#8
        ORRS     r0,r0,r5
        POP      {r3-r7,pc}
        ENDP

dwt_readwakeuptemp PROC
        PUSH     {r4,lr}
        MOVS     r1,#4
        MOVS     r0,#0x2a
        BL       dwt_read8bitoffsetreg
        POP      {r4,pc}
        ENDP

dwt_readwakeupvbat PROC
        PUSH     {r4,lr}
        MOVS     r1,#3
        MOVS     r0,#0x2a
        BL       dwt_read8bitoffsetreg
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L1.6000|
        DCD      0x005fff00

        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.bss||, DATA, NOINIT, ALIGN=2

dw1000local
        %        56

        AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

__ARM_common_switch8 PROC
        PUSH     {r4,r5}
        MOV      r4,lr
        SUBS     r4,r4,#1
        LDRB     r5,[r4,#0]
        ADDS     r4,r4,#1
        CMP      r3,r5
        BCC      |L15.24|
|L15.14|
        LDRB     r3,[r4,r5]
        LSLS     r3,r3,#1
        ADDS     r3,r4,r3
        POP      {r4,r5}
        BX       r3
|L15.24|
        MOV      r5,r3
        B        |L15.14|
        ENDP


        EXPORT dwt_readfromdevice [CODE]
        EXPORT dwt_read32bitoffsetreg [CODE]
        EXPORT dwt_writetodevice [CODE]
        EXPORT dwt_write8bitoffsetreg [CODE]
        EXPORT _dwt_enableclocks [CODE]
        EXPORT dwt_write16bitoffsetreg [CODE]
        EXPORT dwt_read16bitoffsetreg [CODE]
        EXPORT _dwt_loaducodefromrom [CODE]
        EXPORT dwt_setxtaltrim [CODE]
        EXPORT _dwt_otpread [CODE]
        EXPORT _dwt_aonarrayupload [CODE]
        EXPORT _dwt_disablesequencing [CODE]
        EXPORT dwt_softreset [CODE]
        EXPORT dwt_readdevid [CODE]
        EXPORT dwt_initialise [CODE]
        EXPORT dwt_otprevision [CODE]
        EXPORT dwt_setfinegraintxseq [CODE]
        EXPORT dwt_write32bitoffsetreg [CODE]
        EXPORT dwt_setlnapamode [CODE]
        EXPORT dwt_setgpiodirection [CODE]
        EXPORT dwt_setgpiovalue [CODE]
        EXPORT dwt_getpartid [CODE]
        EXPORT dwt_getlotid [CODE]
        EXPORT dwt_configuretxrf [CODE]
        EXPORT _dwt_configlde [CODE]
        EXPORT dwt_configure [CODE]
        EXPORT dwt_setrxantennadelay [CODE]
        EXPORT dwt_settxantennadelay [CODE]
        EXPORT dwt_writetxdata [CODE]
        EXPORT dwt_writetxfctrl [CODE]
        EXPORT dwt_readrxdata [CODE]
        EXPORT dwt_readaccdata [CODE]
        EXPORT dwt_readdiagnostics [CODE]
        EXPORT dwt_readtxtimestamp [CODE]
        EXPORT dwt_readtxtimestamphi32 [CODE]
        EXPORT dwt_readtxtimestamplo32 [CODE]
        EXPORT dwt_readrxtimestamp [CODE]
        EXPORT dwt_readrxtimestamphi32 [CODE]
        EXPORT dwt_readrxtimestamplo32 [CODE]
        EXPORT dwt_readsystimestamphi32 [CODE]
        EXPORT dwt_readsystime [CODE]
        EXPORT dwt_read8bitoffsetreg [CODE]
        EXPORT dwt_enableframefilter [CODE]
        EXPORT dwt_setpanid [CODE]
        EXPORT dwt_setaddress16 [CODE]
        EXPORT dwt_seteui [CODE]
        EXPORT dwt_geteui [CODE]
        EXPORT dwt_otpread [CODE]
        EXPORT _dwt_otpsetmrregs [CODE]
        EXPORT _dwt_otpprogword32 [CODE]
        EXPORT dwt_otpwriteandverify [CODE]
        EXPORT _dwt_aonconfigupload [CODE]
        EXPORT dwt_entersleep [CODE]
        EXPORT dwt_configuresleepcnt [CODE]
        EXPORT dwt_calibratesleepcnt [CODE]
        EXPORT dwt_configuresleep [CODE]
        EXPORT dwt_entersleepaftertx [CODE]
        EXPORT dwt_spicswakeup [CODE]
        EXPORT dwt_loadopsettabfromotp [CODE]
        EXPORT dwt_setsmarttxpower [CODE]
        EXPORT dwt_enableautoack [CODE]
        EXPORT dwt_setdblrxbuffmode [CODE]
        EXPORT dwt_setrxaftertxdelay [CODE]
        EXPORT dwt_setcallbacks [CODE]
        EXPORT dwt_checkirq [CODE]
        EXPORT dwt_rxreset [CODE]
        EXPORT dwt_syncrxbufptrs [CODE]
        EXPORT dwt_forcetrxoff [CODE]
        EXPORT dwt_isr [CODE]
        EXPORT dwt_setlowpowerlistening [CODE]
        EXPORT dwt_lowpowerlistenisr [CODE]
        EXPORT dwt_setleds [CODE]
        EXPORT dwt_setdelayedtrxtime [CODE]
        EXPORT dwt_starttx [CODE]
        EXPORT dwt_setsniffmode [CODE]
        EXPORT dwt_setsnoozetime [CODE]
        EXPORT dwt_rxenable [CODE]
        EXPORT dwt_setrxtimeout [CODE]
        EXPORT dwt_setpreambledetecttimeout [CODE]
        EXPORT dwt_setinterrupt [CODE]
        EXPORT dwt_configeventcounters [CODE]
        EXPORT dwt_readeventcounters [CODE]
        EXPORT dwt_getinitxtaltrim [CODE]
        EXPORT dwt_configcwmode [CODE]
        EXPORT dwt_configcontinuousframemode [CODE]
        EXPORT dwt_readtempvbat [CODE]
        EXPORT dwt_readwakeuptemp [CODE]
        EXPORT dwt_readwakeupvbat [CODE]
        EXPORT __ARM_common_switch8 [CODE]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT readfromspi [CODE]
        IMPORT writetospi [CODE]
        IMPORT deca_sleep [CODE]
        IMPORT lde_replicaCoeff [DATA]
        IMPORT chan_idx [DATA]
        IMPORT fs_pll_cfg [DATA]
        IMPORT fs_pll_tune [DATA]
        IMPORT rx_config [DATA]
        IMPORT tx_config [DATA]
        IMPORT sftsh [DATA]
        IMPORT dtune1 [DATA]
        IMPORT digital_bb_config [DATA]
        IMPORT agc_config [DATA]
        IMPORT dwnsSFDlen [DATA]
        IMPORT decamutexon [CODE]
        IMPORT decamutexoff [CODE]

        KEEP dw1000local

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,6
        ATTR SETSTRING Tag_conformance,"2.06"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
