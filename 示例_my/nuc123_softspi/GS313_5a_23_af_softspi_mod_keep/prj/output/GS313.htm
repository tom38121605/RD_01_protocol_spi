<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\GS313.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\GS313.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Thu May 06 15:03:35 2021
<BR><P>
<H3>Maximum Stack Usage =        176 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; dwt_configure &rArr; _dwt_configlde &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi &rArr; spiwritebyte
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[2d]">SH_DoCommand</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[d]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1e]">ADC_IRQHandler</a> from adckey.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[6]">BOD_IRQHandler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[26]">ChangInputVolumeCheck</a> from sta339.o(.text) referenced 2 times from sta339.o(.text)
 <LI><a href="#[2a]">DWP83SpiritTask</a> from dwhp83.o(.text) referenced from dwhp83.o(.text)
 <LI><a href="#[d]">Default_Handler</a> from startup_nuc123series.o(.text) referenced 8 times from startup_nuc123series.o(RESET)
 <LI><a href="#[8]">EINT0_IRQHandler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[9]">EINT1_IRQHandler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[a]">GPAB_IRQHandler</a> from power.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[b]">GPCDF_IRQHandler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[17]">I2C0_IRQHandler</a> from i2csys.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[18]">I2C1_IRQHandler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[1c]">I2S_IRQHandler</a> from filter.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[2b]">InputChannelCheck</a> from cs8422.o(.text) referenced from cs8422.o(.text)
 <LI><a href="#[1]">NMI_Handler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[1b]">PDMA_IRQHandler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[1a]">PS2_IRQHandler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[c]">PWMA_IRQHandler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[1d]">PWRWU_IRQHandler</a> from power.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[2c]">Reset_Handler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[14]">SPI0_IRQHandler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[15]">SPI1_IRQHandler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[16]">SPI2_IRQHandler</a> from i2s_spi.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from systimertask.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[20]">SystemInit</a> from system_nuc123series.o(.text) referenced from startup_nuc123series.o(.text)
 <LI><a href="#[e]">TMR0_IRQHandler</a> from power.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[f]">TMR1_IRQHandler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[10]">TMR2_IRQHandler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[11]">TMR3_IRQHandler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[12]">UART0_IRQHandler</a> from uart.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[13]">UART1_IRQHandler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[19]">USBD_IRQHandler</a> from startup_nuc123series.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[7]">WDT_IRQHandler</a> from power.o(.text) referenced from startup_nuc123series.o(RESET)
 <LI><a href="#[22]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_nuc123series.o(.text)
 <LI><a href="#[23]">adckeyScan</a> from adckey.o(.text) referenced from adckey.o(.text)
 <LI><a href="#[28]">ampAddVolume</a> from sta339.o(.text) referenced from sta339.o(.text)
 <LI><a href="#[27]">ampDecVolume</a> from sta339.o(.text) referenced from sta339.o(.text)
 <LI><a href="#[29]">dwph83Check</a> from dwhp83.o(.text) referenced from dwhp83.o(.text)
 <LI><a href="#[24]">ledTask</a> from led.o(.text) referenced from led.o(.text)
 <LI><a href="#[1f]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[25]">playSFMusicEnd</a> from i2s_spi.o(.text) referenced from i2s_spi.o(.text)
 <LI><a href="#[21]">resetHook</a> from power.o(.text) referenced from startup_nuc123series.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[22]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(.text)
</UL>
<P><STRONG><a name="[1b9]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1b8]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1ba]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1bb]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1bc]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1bd]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1be]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[30]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, system_nuc123series.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Init
</UL>

<P><STRONG><a name="[20]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(.text)
</UL>
<P><STRONG><a name="[2c]"></a>Reset_Handler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>GPCDF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>PDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PS2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PWMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>USBD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SH_DoCommand</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_nuc123series.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[1bf]"></a>DrvADC_Init</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, drvadc.o(.text), UNUSED)

<P><STRONG><a name="[33]"></a>DrvADC_DeInit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, drvadc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SET_CMP_DATA
</UL>

<P><STRONG><a name="[36]"></a>DrvADC_EnableInt</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, drvadc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DrvADC_EnableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CLR_IF
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adckeyTaskInit
</UL>

<P><STRONG><a name="[39]"></a>DrvADC_DisableInt</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, drvadc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[3a]"></a>DrvADC_EnableComp0Int</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drvadc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CLR_IF
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CMP_INT_ENABLE
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[3c]"></a>DrvADC_DisableComp0Int</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, drvadc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CMP_INT_DISABLE
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[3e]"></a>DrvADC_EnableComp1Int</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drvadc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CLR_IF
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CMP_INT_ENABLE
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[3f]"></a>DrvADC_DisableComp1Int</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, drvadc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CMP_INT_DISABLE
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[1c0]"></a>DrvADC_EnableExtTrigger</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, drvadc.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>DrvADC_EnableComp0</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, drvadc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CMP_ENABLE
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SET_CMP
</UL>

<P><STRONG><a name="[43]"></a>DrvADC_EnableComp1</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, drvadc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CMP_ENABLE
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SET_CMP
</UL>

<P><STRONG><a name="[1c1]"></a>DrvI2C_Ctrl</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, drvi2c.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>CLK_GetAPBClockFreq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drvi2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Init
</UL>

<P><STRONG><a name="[47]"></a>DrvI2C_Init</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, drvi2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetAPBClockFreq
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_RESET_IP2
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ENABLE_I2C_INT
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APBCLK_ENABLE
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSysInit
</UL>

<P><STRONG><a name="[4c]"></a>DrvI2C_DeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, drvi2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DISABLE_I2C_INT
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[4f]"></a>DrvI2C_GetClockFreq</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, drvi2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[50]"></a>DrvI2C_EnableInt</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, drvi2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ENABLE_I2C_INT
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[51]"></a>DrvI2C_DisableInt</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, drvi2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DISABLE_I2C_INT
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[1c2]"></a>DrvI2C_SetAddress</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, drvi2c.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>DrvI2C_SetAddressMask</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, drvi2c.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>DrvI2S_GetSourceClockFreq</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, drvi2s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2S_Init
</UL>

<P><STRONG><a name="[54]"></a>DrvI2S_Init</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, drvi2s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2S_GetSourceClockFreq
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[55]"></a>DrvI2S_DeInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drvi2s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[f8]"></a>DrvI2S_EnableInt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, drvi2s.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2sStart
</UL>

<P><STRONG><a name="[57]"></a>DrvI2S_DisableInt</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drvi2s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[58]"></a>DrvTIMER_Init</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, drvtimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DrvTIMER_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APBCLK_ENABLE
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledInit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInit
</UL>

<P><STRONG><a name="[5a]"></a>DrvTIMER_DeInit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, drvtimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APBCLK_DISABLE
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[5d]"></a>DrvTIMER_EnableInt</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, drvtimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DrvTIMER_EnableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledInit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInit
</UL>

<P><STRONG><a name="[5f]"></a>DrvTIMER_DisableInt</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, drvtimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[60]"></a>DrvWDT_Init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, drvtimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DrvWDT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APBCLK_ENABLE
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTInit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTwake
</UL>

<P><STRONG><a name="[63]"></a>DrvWDT_DeInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, drvtimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_DISABLE_INT
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APBCLK_DISABLE
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[65]"></a>DrvWDT_EnableInt</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, drvtimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DrvWDT_EnableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTInit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTwake
</UL>

<P><STRONG><a name="[66]"></a>DrvWDT_DisableInt</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drvtimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_DISABLE_INT
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[67]"></a>DrvWWDT_Init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, drvtimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[1c4]"></a>WWDT_DeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drvtimer.o(.text), UNUSED)

<P><STRONG><a name="[1c5]"></a>DrvWWDT_IsResetSource</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, drvtimer.o(.text), UNUSED)

<P><STRONG><a name="[1c6]"></a>DrvUART_DriveRTS</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, drvuart.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>DrvUART_Init</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, drvuart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DrvUART_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_RESET_IP2
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APBCLK_ENABLE
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInit
</UL>

<P><STRONG><a name="[1c7]"></a>DrvUART_EnableFlowCtrl</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, drvuart.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>DrvUART_DisableFlowCtrl</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drvuart.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>DrvUART_DeInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, drvuart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APBCLK_DISABLE
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[6e]"></a>DrvUART_EnableInt</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, drvuart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DrvUART_EnableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInit
</UL>

<P><STRONG><a name="[70]"></a>DrvUART_DisableInt</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, drvuart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[1c9]"></a>DrvUART_GetCTSInfo</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, drvuart.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>DrvUART_SetFnIRDA</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, drvuart.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>DrvUART_SetFnRS485</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, drvuart.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>CLK_Init</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CLK_Init &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcKeyClkInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickInit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_IS_STABLE
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Init
</UL>

<P><STRONG><a name="[75]"></a>Hal_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Hal_Init &rArr; CLK_Init &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTaskInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledInit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f]"></a>main</STRONG> (Thumb, 400 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = main &rArr; dwt_configure &rArr; _dwt_configlde &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi &rArr; spiwritebyte
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_rate_low
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_rate_high
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_DW1000
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTaskInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledInit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledColorSet
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iputs
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSysInit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_settxantennadelay
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxtimeout
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxantennadelay
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxaftertxdelay
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setpreambledetecttimeout
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adckeyTaskInit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTInit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_MODE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[91]"></a>uartSendCmd</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ENABLE_INT
</UL>

<P><STRONG><a name="[1cc]"></a>smscSendCmd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>iputc</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iputc
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ENABLE_INT
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr
</UL>

<P><STRONG><a name="[7d]"></a>iputs</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iputs
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ENABLE_INT
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartdecodeH32
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartdecodeH2
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartdecodeH
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartdecode
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendInfo
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dps
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83SpiritTask
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doMuMsg
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doCuMsg
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83SendCmd2
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83SendCmd
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MU_tell_CU_change
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IRQHandler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adckeyScan
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartdecode2
</UL>

<P><STRONG><a name="[94]"></a>iputchar</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ENABLE_INT
</UL>

<P><STRONG><a name="[1cd]"></a>igetc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>iungetc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>clr</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iputc
</UL>

<P><STRONG><a name="[96]"></a>itoa</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = itoa &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartdecode
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartdecode2
</UL>

<P><STRONG><a name="[1cf]"></a>itoh</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>dps</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iputs
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendInfo
</UL>

<P><STRONG><a name="[1d0]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>strcmp</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>sendInfo</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dps
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iputs
</UL>

<P><STRONG><a name="[12]"></a>UART0_IRQHandler</STRONG> (Thumb, 458 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART0_IRQHandler &rArr; iputs
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iputc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>uartInit</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = uartInit &rArr; DrvUART_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUART_EnableInt
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d2]"></a>i32toh</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>cpld_send_data</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayUs
</UL>

<P><STRONG><a name="[9c]"></a>uartdecode</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = uartdecode &rArr; itoa &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iputs
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doCuMsg
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83SendCmd2
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83SendCmd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSetVolume
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchKeyRemap
</UL>

<P><STRONG><a name="[9d]"></a>uartdecodeH</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iputs
</UL>

<P><STRONG><a name="[9e]"></a>uartdecodeH2</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iputs
</UL>

<P><STRONG><a name="[9f]"></a>uartdecodeH32</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iputs
</UL>

<P><STRONG><a name="[73]"></a>SysTickInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, systimertask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTickInit &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Init
</UL>

<P><STRONG><a name="[9b]"></a>sysDelayUs</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, systimertask.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpld_send_data
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
</UL>

<P><STRONG><a name="[82]"></a>sysDelayMs</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, systimertask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sysDelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_TIMER_RESET
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_DW1000
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422InitAllConf
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMuAddr
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputChannel
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83SpiritTask
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doCuMsg
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_soundbar_coco
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_local_coco
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwph83Check
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83WriteCoCo
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deca_sleep
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRWU_IRQHandler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchKeyRemap
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;capIntDisable1
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;capIntDisable
</UL>

<P><STRONG><a name="[a3]"></a>sysDelayAMs</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, systimertask.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_TIMER_RESET
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, systimertask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSpirit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[1d3]"></a>runTimedTasks</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, systimertask.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>sysTaskInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, systimertask.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Init
</UL>

<P><STRONG><a name="[be]"></a>getATask</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, systimertask.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTaskInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adckeyTaskInit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422Init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWPH83Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampInit
</UL>

<P><STRONG><a name="[1d4]"></a>taskFlush</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, systimertask.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>startATask</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, systimertask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = startATask
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTaskInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adckeyTaskInit
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputChannelCheck
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWPH83Init
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83SpiritTask
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changetoWirelessSlave
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwph83Check
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampAddVolume
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampDecVolume
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputVolumeDown
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangInputVolumeCheck
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnUpVolume
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnDownVolume
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adckeyScan
</UL>

<P><STRONG><a name="[b3]"></a>delStandbytkey</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, appkey.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devStandbyDealAdcKey
</UL>

<P><STRONG><a name="[1d5]"></a>setConfig</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, appkey.o(.text), UNUSED)

<P><STRONG><a name="[1d6]"></a>getDevCofig</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, appkey.o(.text), UNUSED)

<P><STRONG><a name="[1d7]"></a>playBTname</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, appkey.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>delStartkey</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, appkey.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = delStartkey &rArr; iputs
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iputs
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devStartDealAdcKey
</UL>

<P><STRONG><a name="[1d8]"></a>delStartkeyContinue</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, appkey.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>adcKeyClkInit</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, adckey.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Init
</UL>

<P><STRONG><a name="[a6]"></a>readCAP8298</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, adckey.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initI2cDataBlock
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addI2cChain
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchKeyRemap
</UL>

<P><STRONG><a name="[1d9]"></a>capack</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adckey.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>readCAPBlock</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, adckey.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initI2cDataBlock
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addI2cChain
</UL>

<P><STRONG><a name="[aa]"></a>writeCAP8298</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, adckey.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initI2cDataBlock
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addI2cChain
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetCap
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;capPinEnable
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;capIntDisable1
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;capIntDisable
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchKeyconfig
</UL>

<P><STRONG><a name="[ab]"></a>writeCAP8298Block</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, adckey.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initI2cDataBlock
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addI2cChain
</UL>

<P><STRONG><a name="[ac]"></a>touchKeyconfig</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, adckey.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCAP8298
</UL>

<P><STRONG><a name="[1da]"></a>capIntEnable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, adckey.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>capIntDisable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, adckey.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCAP8298
</UL>

<P><STRONG><a name="[ae]"></a>capIntDisable1</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, adckey.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCAP8298
</UL>

<P><STRONG><a name="[af]"></a>capPinEnable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, adckey.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCAP8298
</UL>

<P><STRONG><a name="[b0]"></a>resetCap</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, adckey.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCAP8298
</UL>

<P><STRONG><a name="[b1]"></a>capSliderPostion</STRONG> (Thumb, 356 bytes, Stack size 16 bytes, adckey.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[b8]"></a>adcReadKeyContinue</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, adckey.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adckeyScan
</UL>

<P><STRONG><a name="[1db]"></a>keyRst</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, adckey.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>devTestDealAdcKey</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, adckey.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adckeyScan
</UL>

<P><STRONG><a name="[b2]"></a>devStandbyDealAdcKey</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, adckey.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = devStandbyDealAdcKey
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStandbytkey
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adckeyScan
</UL>

<P><STRONG><a name="[b4]"></a>uartdecode2</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, adckey.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iputs
</UL>

<P><STRONG><a name="[1dc]"></a>touchClr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, adckey.o(.text), UNUSED)

<P><STRONG><a name="[1dd]"></a>NFC_DECT</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, adckey.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>touchKeyRemap</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, adckey.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartdecode
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readCAP8298
</UL>

<P><STRONG><a name="[b7]"></a>adcReadKey</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, adckey.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adckeyScan
</UL>

<P><STRONG><a name="[b6]"></a>devStartDealAdcKey</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, adckey.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = devStartDealAdcKey &rArr; delStartkey &rArr; iputs
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delStartkey
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adckeyScan
</UL>

<P><STRONG><a name="[1de]"></a>adcKeyHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, adckey.o(.text), UNUSED)

<P><STRONG><a name="[23]"></a>adckeyScan</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, adckey.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = adckeyScan &rArr; devStartDealAdcKey &rArr; delStartkey &rArr; iputs
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iputs
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devStartDealAdcKey
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcReadKey
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devStandbyDealAdcKey
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devTestDealAdcKey
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcReadKeyContinue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adckey.o(.text)
</UL>
<P><STRONG><a name="[bb]"></a>adcKeyInit</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, adckey.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adcKeyInit
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CH_ENABLE
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adckeyTaskInit
</UL>

<P><STRONG><a name="[7c]"></a>adckeyTaskInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, adckey.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = adckeyTaskInit &rArr; startATask
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getATask
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_EnableInt
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcKeyInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bf]"></a>adcKeyRemap</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, adckey.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adcKeyRemap
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GET_PIN
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[c1]"></a>readeeprom</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, adckey.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initI2cDataBlock
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addI2cChain
</UL>

<P><STRONG><a name="[c2]"></a>writeeeprom</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, adckey.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initI2cDataBlock
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addI2cChain
</UL>

<P><STRONG><a name="[c3]"></a>Key_Scan</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, adckey.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GET_PIN
</UL>

<P><STRONG><a name="[c4]"></a>readbq</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, adckey.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initI2cDataBlock
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addI2cChain
</UL>

<P><STRONG><a name="[c5]"></a>writebq</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, adckey.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initI2cDataBlock
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addI2cChain
</UL>

<P><STRONG><a name="[1e]"></a>ADC_IRQHandler</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, adckey.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_IRQHandler &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcKeyRemap
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GET_RSLT
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[1df]"></a>resumeI2c</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, i2csys.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>initI2cDataBlock</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, i2csys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = initI2cDataBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422SendCmd
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampGetStatus
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampGetCmd_38
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_38
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writebq
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readbq
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeeeprom
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readeeprom
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCAP8298Block
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCAP8298
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readCAPBlock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readCAP8298
</UL>

<P><STRONG><a name="[c7]"></a>readI2cChain</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, i2csys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSpirit
</UL>

<P><STRONG><a name="[a4]"></a>i2cSpirit</STRONG> (Thumb, 320 bytes, Stack size 8 bytes, i2csys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readI2cChain
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ENABLE_TOC
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DISABLE_I2C
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_START
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addI2cChain
</UL>

<P><STRONG><a name="[a8]"></a>addI2cChain</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, i2csys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSpirit
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422SendCmd
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampGetStatus
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampGetCmd_38
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_38
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writebq
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readbq
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeeeprom
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readeeprom
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCAP8298Block
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCAP8298
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readCAPBlock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readCAP8298
</UL>

<P><STRONG><a name="[17]"></a>I2C0_IRQHandler</STRONG> (Thumb, 656 bytes, Stack size 8 bytes, i2csys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DISABLE_TOC
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SET_DATA
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CLEAR_AA
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SET_AA
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CLEAR_SI
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_STOP
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_START
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>i2cSysInit</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, i2csys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = i2cSysInit &rArr; DrvI2C_Init &rArr; CLK_GetAPBClockFreq &rArr; CLK_GetHCLKFreq &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ENABLE_TOC
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_MODE
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[de]"></a>readBuf</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, i2csys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cReadByte
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWriteByte
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStop
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRestart
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nack
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cAck
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
</UL>

<P><STRONG><a name="[1e0]"></a>sysResume</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, power.o(.text), UNUSED)

<P><STRONG><a name="[1e1]"></a>sysStore</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, power.o(.text), UNUSED)

<P><STRONG><a name="[21]"></a>resetHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, power.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(.text)
</UL>
<P><STRONG><a name="[1e2]"></a>dealPowerKey</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, power.o(.text), UNUSED)

<P><STRONG><a name="[1e3]"></a>doPowerOff</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, power.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>powerOff</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, power.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangInputVolumeCheck
</UL>

<P><STRONG><a name="[df]"></a>timerInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, power.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTIMER_EnableInt
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTIMER_Init
</UL>

<P><STRONG><a name="[1e4]"></a>set_p</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, power.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>ampInit1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, power.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>powerOn</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, power.o(.text), UNUSED)

<P><STRONG><a name="[1e7]"></a>outStandby</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, power.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>enterStandby</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, power.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>WDT_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, power.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WDT_IRQHandler &rArr; iputs
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iputs
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>WDTInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, power.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WDTInit &rArr; DrvWDT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvWDT_EnableInt
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvWDT_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_TIMER_RESET
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_CLEAR_RESET_FLAG
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_ENABLE_COUNTING
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e5]"></a>WDTwake</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, power.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvWDT_EnableInt
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvWDT_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_TIMER_RESET
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_CLEAR_RESET_FLAG
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_ENABLE_COUNTING
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>

<P><STRONG><a name="[1d]"></a>PWRWU_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, power.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PWRWU_IRQHandler &rArr; ledColorSet &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledColorSet
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>GPAB_IRQHandler</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, power.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPAB_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CLR_PIN_IF
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GET_PIN_IF
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DisableInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TMR0_IRQHandler</STRONG> (Thumb, 242 bytes, Stack size 0 bytes, power.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[1e9]"></a>openMcuCtrlPin</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, power.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>leddisable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, led.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>ledInit</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ledInit &rArr; DrvTIMER_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTIMER_EnableInt
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTIMER_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_MODE
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Init
</UL>

<P><STRONG><a name="[1eb]"></a>fadeon</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, led.o(.text), UNUSED)

<P><STRONG><a name="[1ec]"></a>fadeoff</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, led.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>breathingColor</STRONG> (Thumb, 568 bytes, Stack size 4 bytes, led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>

<P><STRONG><a name="[7a]"></a>ledColorSet</STRONG> (Thumb, 210 bytes, Stack size 4 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ledColorSet &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRWU_IRQHandler
</UL>

<P><STRONG><a name="[24]"></a>ledTask</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = ledTask &rArr; DWHP83DealMsg &rArr; doCuMsg &rArr; dwhp83CuAck &rArr; DWHP83SendCmd2 &rArr; uartdecode &rArr; itoa &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledColorSet
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83DealMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(.text)
</UL>
<P><STRONG><a name="[78]"></a>ledTaskInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ledTaskInit &rArr; startATask
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getATask
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f3]"></a>I2SClkInit</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, i2s_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_SET_MCK_DIV
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_CLR_TXFIFO
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_CLR_RXFIFO
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[f7]"></a>i2sStart</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, i2s_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2S_EnableInt
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_CLR_TXFIFO
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_CLR_RXFIFO
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>

<P><STRONG><a name="[16]"></a>SPI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, i2s_spi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[fa]"></a>spiFlashRead</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, i2s_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CLR_SS0
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SET_SS0
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DISABLE_REORDER
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ENABLE_REORDER
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSendWord
</UL>

<P><STRONG><a name="[ff]"></a>spiFlashPageWrite</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, i2s_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CLR_SS0
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SET_SS0
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DISABLE_REORDER
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSendWord
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflashInfoWrite
</UL>

<P><STRONG><a name="[7e]"></a>spiFlashInit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, i2s_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = spiFlashInit &rArr; GPIO_SET_MODE
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CLR_PIN
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_PIN
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_MODE
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ed]"></a>adpcmDataInit</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, i2s_spi.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>readWaveHeaderInfo</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, i2s_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CLR_SS0
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SET_SS0
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DISABLE_REORDER
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ENABLE_REORDER
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSendWord
</UL>

<P><STRONG><a name="[1ee]"></a>playMusic</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, i2s_spi.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>spiflashInfoWrite</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, i2s_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPageWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_spiflash_info
</UL>

<P><STRONG><a name="[105]"></a>init_spiflash_info</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, i2s_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflashInfoWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recodeEnd
</UL>

<P><STRONG><a name="[1ef]"></a>recodeMusic</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, i2s_spi.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>recodeEnd</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, i2s_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_spiflash_info
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CLR_SS0
</UL>

<P><STRONG><a name="[25]"></a>playSFMusicEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, i2s_spi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> i2s_spi.o(.text)
</UL>
<P><STRONG><a name="[1f0]"></a>adpcmEncode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2s_spi.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>adpcmDecode</STRONG> (Thumb, 754 bytes, Stack size 8 bytes, i2s_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = adpcmDecode &rArr; spiSendWord
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WRITE_TX0
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IS_BUSY
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SET_GO
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSendWord
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SET_TX_BIT_LEN
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealFlashEvent
</UL>

<P><STRONG><a name="[108]"></a>dealFlashEvent</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, i2s_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dealFlashEvent &rArr; adpcmDecode &rArr; spiSendWord
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adpcmDecode
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CLR_SS0
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_CLR_TXFIFO
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_CLR_RXFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_IRQHandler
</UL>

<P><STRONG><a name="[109]"></a>spireadbyte</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, i2s_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spireadbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CLR_PIN
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_PIN
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readfromspi
</UL>

<P><STRONG><a name="[10a]"></a>spiwritebyte</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, i2s_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spiwritebyte
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CLR_PIN
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_PIN
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writetospi
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readfromspi
</UL>

<P><STRONG><a name="[10b]"></a>readfromspi</STRONG> (Thumb, 526 bytes, Stack size 40 bytes, i2s_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = readfromspi &rArr; spiwritebyte
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiwritebyte
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spireadbyte
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CLR_PIN
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_PIN
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>

<P><STRONG><a name="[10c]"></a>writetospi</STRONG> (Thumb, 532 bytes, Stack size 40 bytes, i2s_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = writetospi &rArr; spiwritebyte
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiwritebyte
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CLR_PIN
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_PIN
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>

<P><STRONG><a name="[80]"></a>reset_DW1000</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, i2s_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = reset_DW1000 &rArr; GPIO_SET_MODE
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CLR_PIN
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_PIN
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_MODE
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>spi_set_rate_low</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, i2s_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>spi_set_rate_high</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, i2s_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10d]"></a>deca_sleep</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, i2s_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = deca_sleep &rArr; sysDelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_spicswakeup
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_calibratesleepcnt
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_otpprogword32
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_otpsetmrregs
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_softreset
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_loaducodefromrom
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readtempvbat
</UL>

<P><STRONG><a name="[1a5]"></a>decamutexon</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, i2s_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_forcetrxoff
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setinterrupt
</UL>

<P><STRONG><a name="[1a6]"></a>decamutexoff</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, i2s_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_forcetrxoff
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setinterrupt
</UL>

<P><STRONG><a name="[10e]"></a>ampSendCmd_38</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, sta339.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ampSendCmd_38 &rArr; addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initI2cDataBlock
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addI2cChain
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampEQon
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampEQbypass
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSetL1ATRT
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampUnMuteBass
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampMuteBass
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampPowerUp
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampPowerDown
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unMute
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSetVolume
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampMute
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSetEqDefault
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendEqs_38
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampInitAllConf
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnUpVolume
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnDownVolume
</UL>

<P><STRONG><a name="[10f]"></a>ampGetCmd_38</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, sta339.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initI2cDataBlock
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addI2cChain
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampEQon
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampEQbypass
</UL>

<P><STRONG><a name="[110]"></a>ampInitAllConf</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, sta339.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_38
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_TIMER_RESET
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>

<P><STRONG><a name="[113]"></a>ampInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sta339.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getATask
</UL>

<P><STRONG><a name="[114]"></a>ampGetStatus</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, sta339.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_TIMER_RESET
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initI2cDataBlock
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addI2cChain
</UL>

<P><STRONG><a name="[115]"></a>ampSendEqs_38</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, sta339.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_38
</UL>

<P><STRONG><a name="[116]"></a>ampSetEqDefault</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, sta339.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_38
</UL>

<P><STRONG><a name="[119]"></a>ampMute</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sta339.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ampMute &rArr; ampSendCmd_38 &rArr; addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_38
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangInputVolumeCheck
</UL>

<P><STRONG><a name="[11c]"></a>getChangeVolume</STRONG> (Thumb, 62 bytes, Stack size 4 bytes, sta339.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputVolumeDown
</UL>

<P><STRONG><a name="[11d]"></a>changeInputVolumeDown</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sta339.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getChangeVolume
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampMuteSwitch
</UL>

<P><STRONG><a name="[11e]"></a>ampMuteSwitch</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sta339.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputVolumeDown
</UL>

<P><STRONG><a name="[11f]"></a>stopAmpDD</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sta339.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopATask
</UL>

<P><STRONG><a name="[120]"></a>ampSetVolume</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sta339.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ampSetVolume &rArr; uartdecode &rArr; itoa &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartdecode
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_38
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampAddVolume
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampDecVolume
</UL>

<P><STRONG><a name="[27]"></a>ampDecVolume</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, sta339.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ampDecVolume &rArr; ampSetVolume &rArr; uartdecode &rArr; itoa &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSetVolume
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopATask
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83DealMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sta339.o(.text)
</UL>
<P><STRONG><a name="[28]"></a>ampAddVolume</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, sta339.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ampAddVolume &rArr; ampSetVolume &rArr; uartdecode &rArr; itoa &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSetVolume
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopATask
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83DealMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sta339.o(.text)
</UL>
<P><STRONG><a name="[121]"></a>unMute</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sta339.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = unMute &rArr; ampSendCmd_38 &rArr; addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_38
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputChannel
</UL>

<P><STRONG><a name="[122]"></a>ampPowerDown</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sta339.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_38
</UL>

<P><STRONG><a name="[123]"></a>ampPowerUp</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sta339.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_38
</UL>

<P><STRONG><a name="[124]"></a>ampMuteBass</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sta339.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_38
</UL>

<P><STRONG><a name="[125]"></a>ampUnMuteBass</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sta339.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_38
</UL>

<P><STRONG><a name="[1f1]"></a>ampResumeI2c</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sta339.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>ampSetL1ATRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sta339.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_38
</UL>

<P><STRONG><a name="[127]"></a>ampEQbypass</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sta339.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampGetCmd_38
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_38
</UL>

<P><STRONG><a name="[128]"></a>ampEQon</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, sta339.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampGetCmd_38
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_38
</UL>

<P><STRONG><a name="[129]"></a>stopFlashLed</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sta339.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopATask
</UL>

<P><STRONG><a name="[12a]"></a>changeInputVolumeUp</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sta339.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = changeInputVolumeUp &rArr; ChangInputVolumeCheck &rArr; ampMute &rArr; ampSendCmd_38 &rArr; addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangInputVolumeCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputChannel
</UL>

<P><STRONG><a name="[1f2]"></a>abs</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, filter.o(.text), UNUSED)

<P><STRONG><a name="[1c]"></a>I2S_IRQHandler</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2S_IRQHandler &rArr; dealFlashEvent &rArr; adpcmDecode &rArr; spiSendWord
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_SET_DATA
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealFlashEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[1f3]"></a>filterInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, filter.o(.text), UNUSED)

<P><STRONG><a name="[1f4]"></a>filter</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, filter.o(.text), UNUSED)

<P><STRONG><a name="[1f5]"></a>triggerFilter</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, filter.o(.text), UNUSED)

<P><STRONG><a name="[12c]"></a>delayus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dwhp83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeAmp38Cmd
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDwhp83
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cReadByte
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWriteByte
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStop
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRestart
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nack
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cAck
</UL>

<P><STRONG><a name="[12d]"></a>i2cAck</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, dwhp83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2cAck &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CLR_PIN
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_PIN
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeAmp38Cmd
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDwhp83
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
</UL>

<P><STRONG><a name="[130]"></a>ack</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dwhp83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ack &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CLR_PIN
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_PIN
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDwhp83
</UL>

<P><STRONG><a name="[131]"></a>nack</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dwhp83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nack &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CLR_PIN
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_PIN
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDwhp83
</UL>

<P><STRONG><a name="[132]"></a>i2cRestart</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dwhp83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2cRestart &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CLR_PIN
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_PIN
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDwhp83
</UL>

<P><STRONG><a name="[133]"></a>i2cStop</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dwhp83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2cStop &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CLR_PIN
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_PIN
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeAmp38Cmd
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDwhp83
</UL>

<P><STRONG><a name="[134]"></a>i2cWriteByte</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dwhp83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CLR_PIN
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_PIN
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeAmp38Cmd
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDwhp83
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
</UL>

<P><STRONG><a name="[135]"></a>i2cReadByte</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, dwhp83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = i2cReadByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CLR_PIN
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_PIN
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDwhp83
</UL>

<P><STRONG><a name="[136]"></a>i2cStart</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, dwhp83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayUs
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWriteByte
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cAck
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CLR_PIN
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_PIN
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_MODE
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeAmp38Cmd
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDwhp83
</UL>

<P><STRONG><a name="[13c]"></a>exitGpioI2c</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dwhp83.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWPH83VolumeChange
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83SendCmd2
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83SendCmd
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83CuMuDetect
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83UnMute
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_coco_check
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soundbar_coco_check
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveCoCo
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83WriteCoCo
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83Mute
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83SendCoCo
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83Master
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83Slave
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83GetStatus
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83EnterPairing
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83DealMsg
</UL>

<P><STRONG><a name="[138]"></a>readDwhp83</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dwhp83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = readDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cReadByte
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWriteByte
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStop
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRestart
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nack
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cAck
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83CuMuDetect
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_coco_check
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soundbar_coco_check
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveCoCo
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83GetStatus
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83DealMsg
</UL>

<P><STRONG><a name="[139]"></a>writeDwhp83</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, dwhp83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWriteByte
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStop
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cAck
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CLR_PIN
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWPH83VolumeChange
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83SendCmd2
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83SendCmd
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83toSUB
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_soundbar_coco
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_local_coco
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MU_tell_CU_change
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83toEXT_MCU
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_to_local_coco
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_volume_unmute
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUB_volume_unmute
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUB_volume_mute
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_volume_mute
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_SB_alive
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RX_SB_alive
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83RxtoTxMsg
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83UnMute
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83WriteCoCo
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83Mute
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83SendCoCo
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83Master
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83Slave
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83EnterPairing
</UL>

<P><STRONG><a name="[13a]"></a>writeAmp38Cmd</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, dwhp83.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWriteByte
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStop
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cAck
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CLR_PIN
</UL>

<P><STRONG><a name="[13b]"></a>Dwhp83EnterPairing</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dwhp83.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitGpioI2c
</UL>

<P><STRONG><a name="[13d]"></a>Dwhp83GetStatus</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, dwhp83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Dwhp83GetStatus &rArr; readDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDwhp83
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitGpioI2c
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83SpiritTask
</UL>

<P><STRONG><a name="[13e]"></a>Dwhp83Slave</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dwhp83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Dwhp83Slave &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitGpioI2c
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422InitAllConf
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputChannel
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwph83Check
</UL>

<P><STRONG><a name="[140]"></a>DWP83CuPowerOn</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dwhp83.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83Master
</UL>

<P><STRONG><a name="[13f]"></a>Dwhp83Master</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dwhp83.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83CuPowerOn
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitGpioI2c
</UL>

<P><STRONG><a name="[141]"></a>Dwhp83SendCoCo</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dwhp83.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitGpioI2c
</UL>

<P><STRONG><a name="[142]"></a>DWHP83Mute</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dwhp83.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitGpioI2c
</UL>

<P><STRONG><a name="[143]"></a>Dwhp83WriteCoCo</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dwhp83.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitGpioI2c
</UL>

<P><STRONG><a name="[144]"></a>saveCoCo</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dwhp83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = saveCoCo &rArr; readDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDwhp83
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitGpioI2c
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doMuMsg
</UL>

<P><STRONG><a name="[145]"></a>soundbar_coco_check</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dwhp83.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDwhp83
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitGpioI2c
</UL>

<P><STRONG><a name="[146]"></a>local_coco_check</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, dwhp83.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDwhp83
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitGpioI2c
</UL>

<P><STRONG><a name="[147]"></a>DWHP83UnMute</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dwhp83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DWHP83UnMute &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitGpioI2c
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputChannel
</UL>

<P><STRONG><a name="[148]"></a>Dwhp83CuMuDetect</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, dwhp83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Dwhp83CuMuDetect &rArr; readDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDwhp83
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitGpioI2c
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DETECT_USER_MODULE
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422InitAllConf
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputChannel
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83SpiritTask
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwph83Check
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83DealMsg
</UL>

<P><STRONG><a name="[29]"></a>dwph83Check</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, dwhp83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dwph83Check &rArr; Dwhp83Slave &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83CuMuDetect
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83Slave
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dwhp83.o(.text)
</UL>
<P><STRONG><a name="[149]"></a>changetoWirelessSlave</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dwhp83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = changetoWirelessSlave &rArr; changeInputChannel &rArr; DWHP83UnMute &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doCuMsg
</UL>

<P><STRONG><a name="[14b]"></a>DWHP83RxtoTxMsg</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dwhp83.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
</UL>

<P><STRONG><a name="[14c]"></a>RX_SB_alive</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dwhp83.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
</UL>

<P><STRONG><a name="[14d]"></a>TX_SB_alive</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dwhp83.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
</UL>

<P><STRONG><a name="[14e]"></a>SB_volume_mute</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dwhp83.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
</UL>

<P><STRONG><a name="[14f]"></a>SUB_volume_mute</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dwhp83.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
</UL>

<P><STRONG><a name="[150]"></a>SUB_volume_unmute</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dwhp83.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
</UL>

<P><STRONG><a name="[151]"></a>SB_volume_unmute</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dwhp83.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
</UL>

<P><STRONG><a name="[152]"></a>change_to_local_coco</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dwhp83.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
</UL>

<P><STRONG><a name="[153]"></a>DWHP83toEXT_MCU</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dwhp83.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
</UL>

<P><STRONG><a name="[154]"></a>MU_tell_CU_change</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dwhp83.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iputs
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
</UL>

<P><STRONG><a name="[155]"></a>set_local_coco</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, dwhp83.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
</UL>

<P><STRONG><a name="[156]"></a>set_soundbar_coco</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, dwhp83.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
</UL>

<P><STRONG><a name="[157]"></a>DWHP83toSUB</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dwhp83.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
</UL>

<P><STRONG><a name="[158]"></a>DWHP83SendCmd</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, dwhp83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = DWHP83SendCmd &rArr; uartdecode &rArr; itoa &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartdecode
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iputs
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitGpioI2c
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83SpiritTask
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doMuMsg
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doCuMsg
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealMuContainer
</UL>

<P><STRONG><a name="[15a]"></a>DWHP83SendCmd2</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, dwhp83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = DWHP83SendCmd2 &rArr; uartdecode &rArr; itoa &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartdecode
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iputs
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitGpioI2c
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwhp83CuAck
</UL>

<P><STRONG><a name="[15b]"></a>DWPH83VolumeChange</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, dwhp83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DWPH83VolumeChange &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitGpioI2c
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83SpiritTask
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doCuMsg
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealMuContainer
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83CuCV0
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83CuCV
</UL>

<P><STRONG><a name="[15c]"></a>DWP83CuCV</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, dwhp83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DWP83CuCV &rArr; DWPH83VolumeChange &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWPH83VolumeChange
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83SpiritTask
</UL>

<P><STRONG><a name="[15d]"></a>DWP83CuCV0</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dwhp83.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWPH83VolumeChange
</UL>

<P><STRONG><a name="[1f6]"></a>DWP83MuPowerOn</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dwhp83.o(.text), UNUSED)

<P><STRONG><a name="[1f7]"></a>isDwhp83Linked</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dwhp83.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>dwhp83CuAck</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dwhp83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = dwhp83CuAck &rArr; DWHP83SendCmd2 &rArr; uartdecode &rArr; itoa &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83SendCmd2
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doCuMsg
</UL>

<P><STRONG><a name="[15f]"></a>dealMuContainer</STRONG> (Thumb, 292 bytes, Stack size 8 bytes, dwhp83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dealMuContainer &rArr; DWPH83VolumeChange &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWPH83VolumeChange
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83SpiritTask
</UL>

<P><STRONG><a name="[161]"></a>addMuContainer</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, dwhp83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = addMuContainer
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doCuMsg
</UL>

<P><STRONG><a name="[160]"></a>doCuMsg</STRONG> (Thumb, 390 bytes, Stack size 16 bytes, dwhp83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = doCuMsg &rArr; dwhp83CuAck &rArr; DWHP83SendCmd2 &rArr; uartdecode &rArr; itoa &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartdecode
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iputs
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addMuContainer
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwhp83CuAck
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWPH83VolumeChange
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83SendCmd
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changetoWirelessSlave
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83DealMsg
</UL>

<P><STRONG><a name="[162]"></a>doMuMsg</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, dwhp83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = doMuMsg &rArr; DWHP83SendCmd &rArr; uartdecode &rArr; itoa &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iputs
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83SendCmd
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveCoCo
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83DealMsg
</UL>

<P><STRONG><a name="[ed]"></a>DWHP83DealMsg</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, dwhp83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = DWHP83DealMsg &rArr; doCuMsg &rArr; dwhp83CuAck &rArr; DWHP83SendCmd2 &rArr; uartdecode &rArr; itoa &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doMuMsg
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doCuMsg
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83CuMuDetect
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDwhp83
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitGpioI2c
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampAddVolume
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampDecVolume
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
</UL>

<P><STRONG><a name="[2a]"></a>DWP83SpiritTask</STRONG> (Thumb, 440 bytes, Stack size 8 bytes, dwhp83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DWP83SpiritTask &rArr; DWP83CuCV &rArr; DWPH83VolumeChange &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iputs
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealMuContainer
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWP83CuCV
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWPH83VolumeChange
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83SendCmd
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83CuMuDetect
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dwhp83.o(.text)
</UL>
<P><STRONG><a name="[163]"></a>DWPH83Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, dwhp83.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getATask
</UL>

<P><STRONG><a name="[164]"></a>cs8422SendCmd</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, cs8422.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cs8422SendCmd &rArr; addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initI2cDataBlock
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addI2cChain
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422InitAllConf
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422AESRX2
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422SRCSourceAES3
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422SRCSourceSDIN
</UL>

<P><STRONG><a name="[165]"></a>cs8422SRCSourceSDIN</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cs8422.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cs8422SRCSourceSDIN &rArr; cs8422SendCmd &rArr; addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422InitAllConf
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMuAddr
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputChannel
</UL>

<P><STRONG><a name="[166]"></a>cs8422SRCSourceAES3</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cs8422.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cs8422SRCSourceAES3 &rArr; cs8422SendCmd &rArr; addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422InitAllConf
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputChannel
</UL>

<P><STRONG><a name="[167]"></a>cs8422AESRX2</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cs8422.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cs8422AESRX2 &rArr; cs8422SendCmd &rArr; addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422InitAllConf
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputChannel
</UL>

<P><STRONG><a name="[168]"></a>getMuAddr</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, cs8422.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422SRCSourceSDIN
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422InitAllConf
</UL>

<P><STRONG><a name="[169]"></a>cs8422InitAllConf</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, cs8422.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMuAddr
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422AESRX2
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422SRCSourceAES3
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422SRCSourceSDIN
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422SendCmd
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83CuMuDetect
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83Slave
</UL>

<P><STRONG><a name="[16a]"></a>DETECT_USER_MODULE</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cs8422.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83CuMuDetect
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextInput
</UL>

<P><STRONG><a name="[16b]"></a>getNextInput</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, cs8422.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DETECT_USER_MODULE
</UL>

<P><STRONG><a name="[14a]"></a>changeInputChannel</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, cs8422.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = changeInputChannel &rArr; DWHP83UnMute &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422AESRX2
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422SRCSourceAES3
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs8422SRCSourceSDIN
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83CuMuDetect
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83UnMute
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwhp83Slave
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputVolumeUp
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unMute
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputChannelCheck
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changetoWirelessSlave
</UL>

<P><STRONG><a name="[2b]"></a>InputChannelCheck</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, cs8422.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = InputChannelCheck &rArr; changeInputChannel &rArr; DWHP83UnMute &rArr; writeDwhp83 &rArr; i2cStart &rArr; i2cWriteByte &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputChannel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs8422.o(.text)
</UL>
<P><STRONG><a name="[16c]"></a>cs8422Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cs8422.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getATask
</UL>

<P><STRONG><a name="[16d]"></a>dwt_readfromdevice</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dwt_readfromdevice &rArr; readfromspi &rArr; spiwritebyte
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readfromspi
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readtxtimestamp
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readrxtimestamp
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_lowpowerlistenisr
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_isr
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_spicswakeup
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_otpprogword32
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_otpsetmrregs
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_geteui
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read8bitoffsetreg
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readsystime
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readdiagnostics
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readaccdata
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readrxdata
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read16bitoffsetreg
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_enableclocks
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readtempvbat
</UL>

<P><STRONG><a name="[16e]"></a>dwt_read32bitoffsetreg</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dwt_read32bitoffsetreg &rArr; dwt_readfromdevice &rArr; readfromspi &rArr; spiwritebyte
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxaftertxdelay
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setsniffmode
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setleds
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_lowpowerlistenisr
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setlowpowerlistening
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_isr
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_forcetrxoff
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setsmarttxpower
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_entersleepaftertx
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_enableframefilter
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readsystimestamphi32
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readrxtimestamplo32
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readrxtimestamphi32
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readtxtimestamplo32
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readtxtimestamphi32
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readdiagnostics
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setlnapamode
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readdevid
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_otpread
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readeventcounters
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setinterrupt
</UL>

<P><STRONG><a name="[8c]"></a>dwt_writetodevice</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dwt_writetodevice &rArr; writetospi &rArr; spiwritebyte
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writetospi
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_otpprogword32
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_otpsetmrregs
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_seteui
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetxdata
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setgpiovalue
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setgpiodirection
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_enableclocks
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readtempvbat
</UL>

<P><STRONG><a name="[16f]"></a>dwt_write8bitoffsetreg</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dwt_write8bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi &rArr; spiwritebyte
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxtimeout
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setsnoozetime
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_starttx
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_isr
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_forcetrxoff
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_syncrxbufptrs
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_rxreset
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_enableautoack
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configuresleep
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_calibratesleepcnt
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configuresleepcnt
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_aonconfigupload
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_configlde
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configuretxrf
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_softreset
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_aonarrayupload
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_otpread
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setxtaltrim
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configcontinuousframemode
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configcwmode
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configeventcounters
</UL>

<P><STRONG><a name="[170]"></a>_dwt_enableclocks</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _dwt_enableclocks &rArr; dwt_writetodevice &rArr; writetospi &rArr; spiwritebyte
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_loadopsettabfromotp
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_calibratesleepcnt
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configuresleepcnt
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_otpwriteandverify
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_otpread
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readaccdata
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_disablesequencing
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_loaducodefromrom
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readtempvbat
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configcontinuousframemode
</UL>

<P><STRONG><a name="[171]"></a>dwt_write16bitoffsetreg</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi &rArr; spiwritebyte
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_settxantennadelay
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxtimeout
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxantennadelay
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setpreambledetecttimeout
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_rxenable
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setsniffmode
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_loadopsettabfromotp
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configuresleep
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configuresleepcnt
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setaddress16
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setpanid
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_configlde
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setfinegraintxseq
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_softreset
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_disablesequencing
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_otpread
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_loaducodefromrom
</UL>

<P><STRONG><a name="[172]"></a>dwt_read16bitoffsetreg</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dwt_read16bitoffsetreg &rArr; dwt_readfromdevice &rArr; readfromspi &rArr; spiwritebyte
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_starttx
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_lowpowerlistenisr
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_isr
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readdiagnostics
</UL>

<P><STRONG><a name="[173]"></a>_dwt_loaducodefromrom</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _dwt_loaducodefromrom &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi &rArr; spiwritebyte
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_enableclocks
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deca_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
</UL>

<P><STRONG><a name="[174]"></a>dwt_setxtaltrim</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dwt_setxtaltrim &rArr; dwt_write8bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi &rArr; spiwritebyte
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
</UL>

<P><STRONG><a name="[175]"></a>_dwt_otpread</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _dwt_otpread &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi &rArr; spiwritebyte
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_otpwriteandverify
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_otpread
</UL>

<P><STRONG><a name="[176]"></a>_dwt_aonarrayupload</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _dwt_aonarrayupload &rArr; dwt_write8bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi &rArr; spiwritebyte
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_entersleep
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_softreset
</UL>

<P><STRONG><a name="[177]"></a>_dwt_disablesequencing</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _dwt_disablesequencing &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi &rArr; spiwritebyte
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_enableclocks
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_softreset
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configcontinuousframemode
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configcwmode
</UL>

<P><STRONG><a name="[178]"></a>dwt_softreset</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dwt_softreset &rArr; _dwt_disablesequencing &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi &rArr; spiwritebyte
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_disablesequencing
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_aonarrayupload
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deca_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
</UL>

<P><STRONG><a name="[179]"></a>dwt_readdevid</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dwt_readdevid &rArr; dwt_read32bitoffsetreg &rArr; dwt_readfromdevice &rArr; readfromspi &rArr; spiwritebyte
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_spicswakeup
</UL>

<P><STRONG><a name="[83]"></a>dwt_initialise</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = dwt_initialise &rArr; dwt_softreset &rArr; _dwt_disablesequencing &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi &rArr; spiwritebyte
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readdevid
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_softreset
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_otpread
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setxtaltrim
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_loaducodefromrom
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read16bitoffsetreg
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_enableclocks
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f8]"></a>dwt_otprevision</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, deca_device.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>dwt_setfinegraintxseq</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configcwmode
</UL>

<P><STRONG><a name="[17b]"></a>dwt_write32bitoffsetreg</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi &rArr; spiwritebyte
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxaftertxdelay
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setsniffmode
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setdelayedtrxtime
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setleds
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_lowpowerlistenisr
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setlowpowerlistening
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_isr
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_forcetrxoff
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setdblrxbuffmode
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_enableautoack
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setsmarttxpower
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_entersleepaftertx
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_enableframefilter
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetxfctrl
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configuretxrf
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setlnapamode
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configcontinuousframemode
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configcwmode
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setinterrupt
</UL>

<P><STRONG><a name="[17c]"></a>dwt_setlnapamode</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
</UL>

<P><STRONG><a name="[17d]"></a>dwt_setgpiodirection</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>

<P><STRONG><a name="[17e]"></a>dwt_setgpiovalue</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>

<P><STRONG><a name="[1f9]"></a>dwt_getpartid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, deca_device.o(.text), UNUSED)

<P><STRONG><a name="[1fa]"></a>dwt_getlotid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, deca_device.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>dwt_configuretxrf</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
</UL>

<P><STRONG><a name="[180]"></a>_dwt_configlde</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _dwt_configlde &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi &rArr; spiwritebyte
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
</UL>

<P><STRONG><a name="[85]"></a>dwt_configure</STRONG> (Thumb, 630 bytes, Stack size 40 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dwt_configure &rArr; _dwt_configlde &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi &rArr; spiwritebyte
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_configlde
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>dwt_setrxantennadelay</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dwt_setrxantennadelay &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi &rArr; spiwritebyte
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>dwt_settxantennadelay</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dwt_settxantennadelay &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi &rArr; spiwritebyte
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[181]"></a>dwt_writetxdata</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>

<P><STRONG><a name="[182]"></a>dwt_writetxfctrl</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
</UL>

<P><STRONG><a name="[183]"></a>dwt_readrxdata</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>

<P><STRONG><a name="[184]"></a>dwt_readaccdata</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_enableclocks
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>

<P><STRONG><a name="[185]"></a>dwt_readdiagnostics</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read16bitoffsetreg
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>

<P><STRONG><a name="[8e]"></a>dwt_readtxtimestamp</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tx_timestamp_u64
</UL>

<P><STRONG><a name="[186]"></a>dwt_readtxtimestamphi32</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
</UL>

<P><STRONG><a name="[187]"></a>dwt_readtxtimestamplo32</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
</UL>

<P><STRONG><a name="[90]"></a>dwt_readrxtimestamp</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rx_timestamp_u64
</UL>

<P><STRONG><a name="[188]"></a>dwt_readrxtimestamphi32</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
</UL>

<P><STRONG><a name="[189]"></a>dwt_readrxtimestamplo32</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
</UL>

<P><STRONG><a name="[18a]"></a>dwt_readsystimestamphi32</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
</UL>

<P><STRONG><a name="[18b]"></a>dwt_readsystime</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>

<P><STRONG><a name="[18c]"></a>dwt_read8bitoffsetreg</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dwt_read8bitoffsetreg &rArr; dwt_readfromdevice &rArr; readfromspi &rArr; spiwritebyte
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxtimeout
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_rxenable
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_syncrxbufptrs
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_checkirq
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_calibratesleepcnt
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readwakeupvbat
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readwakeuptemp
</UL>

<P><STRONG><a name="[18d]"></a>dwt_enableframefilter</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
</UL>

<P><STRONG><a name="[18e]"></a>dwt_setpanid</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
</UL>

<P><STRONG><a name="[18f]"></a>dwt_setaddress16</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
</UL>

<P><STRONG><a name="[190]"></a>dwt_seteui</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>

<P><STRONG><a name="[191]"></a>dwt_geteui</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>

<P><STRONG><a name="[192]"></a>dwt_otpread</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_otpread
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_enableclocks
</UL>

<P><STRONG><a name="[193]"></a>_dwt_otpsetmrregs</STRONG> (Thumb, 604 bytes, Stack size 32 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deca_sleep
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_otpwriteandverify
</UL>

<P><STRONG><a name="[194]"></a>_dwt_otpprogword32</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deca_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_otpwriteandverify
</UL>

<P><STRONG><a name="[195]"></a>dwt_otpwriteandverify</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_otpprogword32
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_otpsetmrregs
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_otpread
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_enableclocks
</UL>

<P><STRONG><a name="[196]"></a>_dwt_aonconfigupload</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_calibratesleepcnt
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configuresleepcnt
</UL>

<P><STRONG><a name="[197]"></a>dwt_entersleep</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_aonarrayupload
</UL>

<P><STRONG><a name="[198]"></a>dwt_configuresleepcnt</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_aonconfigupload
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_enableclocks
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
</UL>

<P><STRONG><a name="[199]"></a>dwt_calibratesleepcnt</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_aonconfigupload
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read8bitoffsetreg
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_enableclocks
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deca_sleep
</UL>

<P><STRONG><a name="[19a]"></a>dwt_configuresleep</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
</UL>

<P><STRONG><a name="[19b]"></a>dwt_entersleepaftertx</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
</UL>

<P><STRONG><a name="[19c]"></a>dwt_spicswakeup</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readdevid
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deca_sleep
</UL>

<P><STRONG><a name="[19d]"></a>dwt_loadopsettabfromotp</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_enableclocks
</UL>

<P><STRONG><a name="[19e]"></a>dwt_setsmarttxpower</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
</UL>

<P><STRONG><a name="[19f]"></a>dwt_enableautoack</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
</UL>

<P><STRONG><a name="[1a0]"></a>dwt_setdblrxbuffmode</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
</UL>

<P><STRONG><a name="[88]"></a>dwt_setrxaftertxdelay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dwt_setrxaftertxdelay &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi &rArr; spiwritebyte
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1fb]"></a>dwt_setcallbacks</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)

<P><STRONG><a name="[1a1]"></a>dwt_checkirq</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read8bitoffsetreg
</UL>

<P><STRONG><a name="[1a2]"></a>dwt_rxreset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_isr
</UL>

<P><STRONG><a name="[1a3]"></a>dwt_syncrxbufptrs</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read8bitoffsetreg
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_rxenable
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_forcetrxoff
</UL>

<P><STRONG><a name="[1a4]"></a>dwt_forcetrxoff</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_syncrxbufptrs
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decamutexoff
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decamutexon
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_rxenable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_isr
</UL>

<P><STRONG><a name="[1a7]"></a>dwt_isr</STRONG> (Thumb, 342 bytes, Stack size 16 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_forcetrxoff
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_rxreset
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read16bitoffsetreg
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>

<P><STRONG><a name="[1a8]"></a>dwt_setlowpowerlistening</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_lowpowerlistenisr
</UL>

<P><STRONG><a name="[1a9]"></a>dwt_lowpowerlistenisr</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setlowpowerlistening
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read16bitoffsetreg
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>

<P><STRONG><a name="[1aa]"></a>dwt_setleds</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
</UL>

<P><STRONG><a name="[1ab]"></a>dwt_setdelayedtrxtime</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
</UL>

<P><STRONG><a name="[1ac]"></a>dwt_starttx</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read16bitoffsetreg
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
</UL>

<P><STRONG><a name="[1ad]"></a>dwt_setsniffmode</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
</UL>

<P><STRONG><a name="[1ae]"></a>dwt_setsnoozetime</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
</UL>

<P><STRONG><a name="[1af]"></a>dwt_rxenable</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_forcetrxoff
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_syncrxbufptrs
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read8bitoffsetreg
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
</UL>

<P><STRONG><a name="[89]"></a>dwt_setrxtimeout</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dwt_setrxtimeout &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi &rArr; spiwritebyte
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read8bitoffsetreg
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>dwt_setpreambledetecttimeout</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dwt_setpreambledetecttimeout &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi &rArr; spiwritebyte
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b0]"></a>dwt_setinterrupt</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decamutexoff
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decamutexon
</UL>

<P><STRONG><a name="[1b1]"></a>dwt_configeventcounters</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
</UL>

<P><STRONG><a name="[1b2]"></a>dwt_readeventcounters</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
</UL>

<P><STRONG><a name="[1fc]"></a>dwt_getinitxtaltrim</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, deca_device.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>dwt_configcwmode</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setfinegraintxseq
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_disablesequencing
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
</UL>

<P><STRONG><a name="[1b4]"></a>dwt_configcontinuousframemode</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_disablesequencing
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_enableclocks
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
</UL>

<P><STRONG><a name="[1b5]"></a>dwt_readtempvbat</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_enableclocks
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deca_sleep
</UL>

<P><STRONG><a name="[1b6]"></a>dwt_readwakeuptemp</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read8bitoffsetreg
</UL>

<P><STRONG><a name="[1b7]"></a>dwt_readwakeupvbat</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read8bitoffsetreg
</UL>

<P><STRONG><a name="[1fd]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUART_Init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2S_Init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2S_GetSourceClockFreq
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_GetClockFreq
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetAPBClockFreq
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SClkInit
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;capSliderPostion
</UL>

<P><STRONG><a name="[159]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83SendCmd2
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83SendCmd
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWHP83DealMsg
</UL>

<P><STRONG><a name="[1fe]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[1ff]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[200]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, led.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledColorSet
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_otpsetmrregs
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_enableclocks
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getChangeVolume
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangInputVolumeCheck
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breathingColor
</UL>

<P><STRONG><a name="[201]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[202]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[203]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[31]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, system_nuc123series.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[d]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc123series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc123series.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>ADC_SET_CMP</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, drvadc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_EnableComp1
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_EnableComp0
</UL>

<P><STRONG><a name="[34]"></a>ADC_SET_CMP_DATA</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, drvadc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_DeInit
</UL>

<P><STRONG><a name="[38]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drvadc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_EnableComp1Int
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_EnableComp0Int
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_EnableInt
</UL>

<P><STRONG><a name="[35]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drvadc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_DisableComp1Int
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_DisableComp0Int
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_DisableInt
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_DeInit
</UL>

<P><STRONG><a name="[3b]"></a>ADC_CMP_INT_ENABLE</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drvadc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_EnableComp1Int
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_EnableComp0Int
</UL>

<P><STRONG><a name="[3d]"></a>ADC_CMP_INT_DISABLE</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drvadc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_DisableComp1Int
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_DisableComp0Int
</UL>

<P><STRONG><a name="[42]"></a>ADC_CMP_ENABLE</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drvadc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_EnableComp1
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_EnableComp0
</UL>

<P><STRONG><a name="[37]"></a>ADC_CLR_IF</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drvadc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_EnableComp1Int
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_EnableComp0Int
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_EnableInt
</UL>

<P><STRONG><a name="[44]"></a>CLK_GetHCLKFreq</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, drvi2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CLK_GetHCLKFreq &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_GetClockFreq
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetAPBClockFreq
</UL>

<P><STRONG><a name="[4b]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drvi2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_EnableInt
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Init
</UL>

<P><STRONG><a name="[4e]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drvi2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_DisableInt
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_DeInit
</UL>

<P><STRONG><a name="[49]"></a>APBCLK_ENABLE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drvi2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Init
</UL>

<P><STRONG><a name="[45]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, drvi2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
</UL>

<P><STRONG><a name="[4a]"></a>I2C_ENABLE_I2C_INT</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drvi2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_EnableInt
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Init
</UL>

<P><STRONG><a name="[4d]"></a>I2C_DISABLE_I2C_INT</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drvi2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_DisableInt
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_DeInit
</UL>

<P><STRONG><a name="[48]"></a>SYS_RESET_IP2</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, drvi2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Init
</UL>

<P><STRONG><a name="[52]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, drvi2s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2S_GetSourceClockFreq
</UL>

<P><STRONG><a name="[56]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drvi2s.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2S_DisableInt
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2S_DeInit
</UL>

<P><STRONG><a name="[5e]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drvtimer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvWWDT_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvWDT_EnableInt
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTIMER_EnableInt
</UL>

<P><STRONG><a name="[5c]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drvtimer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvWDT_DisableInt
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvWDT_DeInit
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTIMER_DisableInt
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTIMER_DeInit
</UL>

<P><STRONG><a name="[59]"></a>APBCLK_ENABLE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drvtimer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvWDT_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTIMER_Init
</UL>

<P><STRONG><a name="[5b]"></a>APBCLK_DISABLE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drvtimer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvWDT_DeInit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTIMER_DeInit
</UL>

<P><STRONG><a name="[61]"></a>SYS_UnlockReg</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drvtimer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvWWDT_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvWDT_DisableInt
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvWDT_EnableInt
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvWDT_DeInit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvWDT_Init
</UL>

<P><STRONG><a name="[62]"></a>SYS_LockReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drvtimer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvWWDT_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvWDT_DisableInt
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvWDT_EnableInt
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvWDT_DeInit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvWDT_Init
</UL>

<P><STRONG><a name="[64]"></a>WDT_DISABLE_INT</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drvtimer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvWDT_DisableInt
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvWDT_DeInit
</UL>

<P><STRONG><a name="[6f]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drvuart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUART_EnableInt
</UL>

<P><STRONG><a name="[6d]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drvuart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUART_DisableInt
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUART_DeInit
</UL>

<P><STRONG><a name="[6a]"></a>APBCLK_ENABLE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drvuart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUART_Init
</UL>

<P><STRONG><a name="[6c]"></a>APBCLK_DISABLE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drvuart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUART_DeInit
</UL>

<P><STRONG><a name="[69]"></a>SYS_RESET_IP2</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, drvuart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUART_Init
</UL>

<P><STRONG><a name="[7f]"></a>GPIO_SET_MODE</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_SET_MODE
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>get_tx_timestamp_u64</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readtxtimestamp
</UL>

<P><STRONG><a name="[8f]"></a>get_rx_timestamp_u64</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readrxtimestamp
</UL>

<P><STRONG><a name="[72]"></a>CLK_IS_STABLE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Init
</UL>

<P><STRONG><a name="[99]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInit
</UL>

<P><STRONG><a name="[92]"></a>UART_ENABLE_INT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iputchar
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iputc
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartSendCmd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iputs
</UL>

<P><STRONG><a name="[a0]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, systimertask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickInit
</UL>

<P><STRONG><a name="[a1]"></a>SYS_UnlockReg</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, systimertask.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayAMs
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
</UL>

<P><STRONG><a name="[a2]"></a>WDT_TIMER_RESET</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systimertask.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayAMs
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayMs
</UL>

<P><STRONG><a name="[bd]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, adckey.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adckeyTaskInit
</UL>

<P><STRONG><a name="[c6]"></a>ADC_GET_RSLT</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adckey.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[bc]"></a>ADC_CH_ENABLE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, adckey.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcKeyInit
</UL>

<P><STRONG><a name="[c0]"></a>GPIO_GET_PIN</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adckey.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcKeyRemap
</UL>

<P><STRONG><a name="[d1]"></a>GPIO_SET_MODE</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, i2csys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_SET_MODE
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSysInit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
</UL>

<P><STRONG><a name="[d3]"></a>delayus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, i2csys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBuf
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cReadByte
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWriteByte
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStop
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRestart
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nack
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cAck
</UL>

<P><STRONG><a name="[d4]"></a>i2cAck</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, i2csys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CLR_PIN
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_PIN
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBuf
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
</UL>

<P><STRONG><a name="[d7]"></a>ack</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, i2csys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CLR_PIN
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_PIN
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBuf
</UL>

<P><STRONG><a name="[d8]"></a>nack</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, i2csys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CLR_PIN
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_PIN
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBuf
</UL>

<P><STRONG><a name="[d9]"></a>i2cRestart</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, i2csys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CLR_PIN
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_PIN
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBuf
</UL>

<P><STRONG><a name="[da]"></a>i2cStop</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, i2csys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CLR_PIN
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_PIN
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBuf
</UL>

<P><STRONG><a name="[db]"></a>i2cWriteByte</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, i2csys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CLR_PIN
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_PIN
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBuf
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
</UL>

<P><STRONG><a name="[dc]"></a>i2cReadByte</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, i2csys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CLR_PIN
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_PIN
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBuf
</UL>

<P><STRONG><a name="[dd]"></a>i2cStart</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, i2csys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DISABLE_TOC
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DISABLE_I2C
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CLR_PIN
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_PIN
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWriteByte
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cAck
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SET_MODE
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBuf
</UL>

<P><STRONG><a name="[d2]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, i2csys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSysInit
</UL>

<P><STRONG><a name="[d6]"></a>GPIO_SET_PIN</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2csys.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cReadByte
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWriteByte
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStop
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRestart
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nack
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cAck
</UL>

<P><STRONG><a name="[d5]"></a>GPIO_CLR_PIN</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2csys.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cReadByte
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWriteByte
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStop
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRestart
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nack
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cAck
</UL>

<P><STRONG><a name="[c8]"></a>I2C_START</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2csys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSpirit
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>

<P><STRONG><a name="[cc]"></a>I2C_STOP</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2csys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>

<P><STRONG><a name="[ca]"></a>I2C_DISABLE_I2C</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2csys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSpirit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
</UL>

<P><STRONG><a name="[ce]"></a>I2C_CLEAR_SI</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2csys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>

<P><STRONG><a name="[cf]"></a>I2C_SET_AA</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2csys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>

<P><STRONG><a name="[d0]"></a>I2C_CLEAR_AA</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2csys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>

<P><STRONG><a name="[cd]"></a>I2C_SET_DATA</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2csys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>

<P><STRONG><a name="[c9]"></a>I2C_ENABLE_TOC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2csys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSpirit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSysInit
</UL>

<P><STRONG><a name="[cb]"></a>I2C_DISABLE_TOC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2csys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
</UL>

<P><STRONG><a name="[e8]"></a>GPIO_DisableInt</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, power.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPAB_IRQHandler
</UL>

<P><STRONG><a name="[e6]"></a>GPIO_GET_PIN_IF</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, power.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPAB_IRQHandler
</UL>

<P><STRONG><a name="[e7]"></a>GPIO_CLR_PIN_IF</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, power.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPAB_IRQHandler
</UL>

<P><STRONG><a name="[e0]"></a>SYS_UnlockReg</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, power.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTInit
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRWU_IRQHandler
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTwake
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IRQHandler
</UL>

<P><STRONG><a name="[e1]"></a>SYS_LockReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, power.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTInit
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRWU_IRQHandler
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTwake
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IRQHandler
</UL>

<P><STRONG><a name="[e3]"></a>WDT_ENABLE_COUNTING</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, power.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTInit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTwake
</UL>

<P><STRONG><a name="[e4]"></a>WDT_CLEAR_RESET_FLAG</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, power.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTInit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTwake
</UL>

<P><STRONG><a name="[e2]"></a>WDT_TIMER_RESET</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, power.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTInit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTwake
</UL>

<P><STRONG><a name="[e9]"></a>GPIO_SET_MODE</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_SET_MODE
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledInit
</UL>

<P><STRONG><a name="[ea]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledInit
</UL>

<P><STRONG><a name="[100]"></a>GPIO_SET_MODE</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, i2s_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_SET_MODE
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_DW1000
</UL>

<P><STRONG><a name="[ef]"></a>SPI_SET_TX_BIT_LEN</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, i2s_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adpcmDecode
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSendWord
</UL>

<P><STRONG><a name="[ee]"></a>spiSendWord</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, i2s_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spiSendWord
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WRITE_TX0
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IS_BUSY
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SET_GO
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SET_TX_BIT_LEN
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adpcmDecode
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readWaveHeaderInfo
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPageWrite
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashRead
</UL>

<P><STRONG><a name="[f9]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, i2s_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2sStart
</UL>

<P><STRONG><a name="[101]"></a>GPIO_SET_PIN</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2s_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_DW1000
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writetospi
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readfromspi
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiwritebyte
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spireadbyte
</UL>

<P><STRONG><a name="[102]"></a>GPIO_CLR_PIN</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2s_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_DW1000
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writetospi
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readfromspi
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiwritebyte
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spireadbyte
</UL>

<P><STRONG><a name="[f4]"></a>I2S_CLR_RXFIFO</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, i2s_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealFlashEvent
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2sStart
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SClkInit
</UL>

<P><STRONG><a name="[f5]"></a>I2S_CLR_TXFIFO</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, i2s_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealFlashEvent
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2sStart
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SClkInit
</UL>

<P><STRONG><a name="[f6]"></a>I2S_SET_MCK_DIV</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, i2s_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SClkInit
</UL>

<P><STRONG><a name="[fe]"></a>SPI_ENABLE_REORDER</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, i2s_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readWaveHeaderInfo
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashRead
</UL>

<P><STRONG><a name="[fc]"></a>SPI_DISABLE_REORDER</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, i2s_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readWaveHeaderInfo
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPageWrite
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashRead
</UL>

<P><STRONG><a name="[f1]"></a>SPI_SET_GO</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2s_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adpcmDecode
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSendWord
</UL>

<P><STRONG><a name="[f2]"></a>SPI_IS_BUSY</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2s_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adpcmDecode
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSendWord
</UL>

<P><STRONG><a name="[fd]"></a>SPI_SET_SS0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2s_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readWaveHeaderInfo
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPageWrite
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashRead
</UL>

<P><STRONG><a name="[fb]"></a>SPI_CLR_SS0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2s_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealFlashEvent
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recodeEnd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readWaveHeaderInfo
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPageWrite
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashRead
</UL>

<P><STRONG><a name="[f0]"></a>SPI_WRITE_TX0</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2s_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adpcmDecode
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSendWord
</UL>

<P><STRONG><a name="[117]"></a>turnDownVolume</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, sta339.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = turnDownVolume &rArr; ampSendCmd_38 &rArr; addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_38
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangInputVolumeCheck
</UL>

<P><STRONG><a name="[118]"></a>turnUpVolume</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, sta339.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = turnUpVolume &rArr; ampSendCmd_38 &rArr; addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampSendCmd_38
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangInputVolumeCheck
</UL>

<P><STRONG><a name="[26]"></a>ChangInputVolumeCheck</STRONG> (Thumb, 400 bytes, Stack size 8 bytes, sta339.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ChangInputVolumeCheck &rArr; ampMute &rArr; ampSendCmd_38 &rArr; addI2cChain &rArr; i2cSpirit
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startATask
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampMute
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopATask
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnUpVolume
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnDownVolume
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOff
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeInputVolumeUp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sta339.o(.text)
</UL>
<P><STRONG><a name="[111]"></a>SYS_UnlockReg</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sta339.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampGetStatus
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampInitAllConf
</UL>

<P><STRONG><a name="[112]"></a>WDT_TIMER_RESET</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sta339.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampGetStatus
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampInitAllConf
</UL>

<P><STRONG><a name="[11a]"></a>stopATask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sta339.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopFlashLed
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampAddVolume
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampDecVolume
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopAmpDD
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangInputVolumeCheck
</UL>

<P><STRONG><a name="[12b]"></a>I2S_SET_DATA</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, filter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_IRQHandler
</UL>

<P><STRONG><a name="[137]"></a>GPIO_SET_MODE</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, dwhp83.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_SET_MODE
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
</UL>

<P><STRONG><a name="[12f]"></a>GPIO_SET_PIN</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dwhp83.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cReadByte
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWriteByte
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStop
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRestart
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nack
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cAck
</UL>

<P><STRONG><a name="[12e]"></a>GPIO_CLR_PIN</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dwhp83.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeAmp38Cmd
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDwhp83
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStart
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cReadByte
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWriteByte
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cStop
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRestart
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nack
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cAck
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
