; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--debug -c --asm --info=totals -o.\output\deca.o --depend=.\output\deca.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\CMSIS\CM0\DeviceSupport\Nuvoton\NUC123Series -I..\CMSIS\CM0\CoreSupport -I..\INC\DrvInc -I..\INC\SysInc -I..\dw -IC:\Keil_v472\ARM\RV31\INC -IC:\Keil_v472\ARM\CMSIS\Include -IC:\Keil_v472\ARM\Inc\Nuvoton\NUC123Series -D__MICROLIB --omf_browse=.\output\deca.crf ..\dw\deca.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||.text||, CODE, READONLY, ALIGN=2

        REQUIRE _printf_percent
        REQUIRE _printf_d
        REQUIRE _printf_int_dec
GPIO_SET_MODE PROC
        PUSH     {r4,r5,lr}
        LDR      r3,[r0,#0]
        LSLS     r5,r1,#1
        MOVS     r4,#3
        LSLS     r4,r4,r5
        BICS     r3,r3,r4
        LSLS     r5,r1,#1
        MOV      r4,r2
        LSLS     r4,r4,r5
        ORRS     r3,r3,r4
        STR      r3,[r0,#0]
        POP      {r4,r5,pc}
        ENDP

dw1000_init PROC
        PUSH     {r4,lr}
        BL       spiFlashInit
        MOVS     r2,#1
        MOVS     r1,#0xa
        LDR      r0,|L1.1036|
        BL       GPIO_SET_MODE
        NOP      
        MOVS     r0,#0
        LDR      r1,|L1.1040|
        STR      r0,[r1,#0]
        NOP      
        LDR      r0,|L1.1036|
        ADDS     r0,r0,#0xc0
        LDR      r0,[r0,#0x18]
        MOVS     r1,#8
        BICS     r0,r0,r1
        LDR      r1,|L1.1036|
        ADDS     r1,r1,#0xc0
        STR      r0,[r1,#0x18]
        MOV      r0,r1
        LDR      r0,[r0,#0x1c]
        MOVS     r1,#1
        LSLS     r1,r1,#19
        ORRS     r0,r0,r1
        LDR      r1,|L1.1036|
        ADDS     r1,r1,#0xc0
        STR      r0,[r1,#0x1c]
        LDR      r0,|L1.1044|
        LDR      r0,[r0,#0]
        MOVS     r1,#0x20
        ORRS     r0,r0,r1
        LDR      r1,|L1.1044|
        STR      r0,[r1,#0]
        LDR      r0,|L1.1040|
        SUBS     r0,r0,#0xa8
        LDR      r0,[r0,#0]
        MOVS     r1,#0x20
        ORRS     r0,r0,r1
        LDR      r1,|L1.1040|
        SUBS     r1,r1,#0xa8
        STR      r0,[r1,#0]
        MOV      r0,r1
        LDR      r0,[r0,#0]
        MOVS     r1,#0x10
        BICS     r0,r0,r1
        LDR      r1,|L1.1040|
        SUBS     r1,r1,#0xa8
        STR      r0,[r1,#0]
        MOV      r0,r1
        LDR      r0,[r0,#0]
        MOVS     r1,#0xf0
        ANDS     r0,r0,r1
        LDR      r1,|L1.1040|
        SUBS     r1,r1,#0xa8
        STR      r0,[r1,#0]
        MOV      r0,r1
        LDR      r0,[r0,#0]
        MOVS     r1,#0xa
        ORRS     r0,r0,r1
        LDR      r1,|L1.1040|
        SUBS     r1,r1,#0xa8
        STR      r0,[r1,#0]
        LDR      r0,|L1.1036|
        ADDS     r0,r0,#0xc0
        LDR      r0,[r0,#0x14]
        MOVS     r1,#8
        ORRS     r0,r0,r1
        LDR      r1,|L1.1036|
        ADDS     r1,r1,#0xc0
        STR      r0,[r1,#0x14]
        MOVS     r2,#0
        MOVS     r1,#3
        LDR      r0,|L1.1036|
        ADDS     r0,r0,#0xc0
        BL       GPIO_SET_MODE
        BL       reset_DW1000
        BL       spi_set_rate_low
        MOVS     r0,#2
        BL       sysDelayMs
        MOVS     r0,#1
        BL       dwt_initialise
        ADDS     r0,r0,#1
        BNE      |L1.214|
        ADR      r0,|L1.1048|
        BL       iputs
        NOP      
|L1.212|
        B        |L1.212|
|L1.214|
        BL       spi_set_rate_high
        MOVS     r0,#2
        BL       sysDelayMs
        LDR      r0,|L1.1064|
        BL       dwt_configure
        LDR      r0,|L1.1068|
        BL       dwt_setrxantennadelay
        LDR      r0,|L1.1068|
        BL       dwt_settxantennadelay
        LDR      r0,|L1.1072|
        BL       dwt_setrxaftertxdelay
        LDR      r0,|L1.1076|
        BL       dwt_setrxtimeout
        MOVS     r0,#0x64
        BL       dwt_setpreambledetecttimeout
        POP      {r4,pc}
        ENDP

final_msg_set_ts PROC
        PUSH     {r4-r6,lr}
        MOV      r1,r0
        MOVS     r0,#0
        B        |L1.284|
|L1.270|
        STRB     r2,[r1,r0]
        LSLS     r6,r3,#24
        LSRS     r4,r2,#8
        ORRS     r4,r4,r6
        LSRS     r3,r3,#8
        MOV      r2,r4
        ADDS     r0,r0,#1
|L1.284|
        CMP      r0,#4
        BLT      |L1.270|
        POP      {r4-r6,pc}
        ENDP

final_msg_get_ts PROC
        PUSH     {r4,lr}
        MOV      r2,r0
        MOVS     r3,#0
        STR      r3,[r1,#0]
        MOVS     r0,#0
        B        |L1.316|
|L1.302|
        LDRB     r3,[r2,r0]
        LSLS     r4,r0,#3
        LSLS     r3,r3,r4
        LDR      r4,[r1,#0]
        ADDS     r3,r3,r4
        STR      r3,[r1,#0]
        ADDS     r0,r0,#1
|L1.316|
        CMP      r0,#4
        BLT      |L1.302|
        POP      {r4,pc}
        ENDP

get_rx_timestamp_u64 PROC
        PUSH     {r2-r6,lr}
        MOVS     r1,#0
        MOV      r4,r1
        MOV      r5,r1
        MOV      r0,sp
        BL       dwt_readrxtimestamp
        MOVS     r6,#4
        B        |L1.358|
|L1.340|
        LSRS     r2,r4,#24
        LSLS     r0,r5,#8
        ORRS     r0,r0,r2
        LSLS     r4,r4,#8
        MOV      r5,r0
        MOV      r0,sp
        LDRB     r0,[r0,r6]
        ORRS     r4,r4,r0
        SUBS     r6,r6,#1
|L1.358|
        CMP      r6,#0
        BGE      |L1.340|
        MOV      r0,r4
        MOV      r1,r5
        POP      {r2-r6,pc}
        ENDP

get_tx_timestamp_u64 PROC
        PUSH     {r2-r6,lr}
        MOVS     r1,#0
        MOV      r4,r1
        MOV      r5,r1
        MOV      r0,sp
        BL       dwt_readtxtimestamp
        MOVS     r6,#4
        B        |L1.404|
|L1.386|
        LSRS     r2,r4,#24
        LSLS     r0,r5,#8
        ORRS     r0,r0,r2
        LSLS     r4,r4,#8
        MOV      r5,r0
        MOV      r0,sp
        LDRB     r0,[r0,r6]
        ORRS     r4,r4,r0
        SUBS     r6,r6,#1
|L1.404|
        CMP      r6,#0
        BGE      |L1.386|
        MOV      r0,r4
        MOV      r1,r5
        POP      {r2-r6,pc}
        ENDP

dw1000_twr_measure PROC
        PUSH     {r4-r7,lr}
        SUB      sp,sp,#0x2c
        MOV      r4,r0
        LDR      r0,|L1.1080|
        STRB     r4,[r0,#0]
        LDR      r0,|L1.1084|
        LDRB     r0,[r0,#0]  ; frame_seq_nb
        LDR      r1,|L1.1088|
        STRB     r0,[r1,#2]
        LDR      r0,|L1.1092|
        LDRB     r0,[r0,#0]  ; ilocaladdr
        STRB     r0,[r1,#0xa]
        MOV      r0,r1
        STRB     r4,[r0,#0xb]
        LDR      r0,|L1.1096|
        LDRB     r0,[r0,#0]  ; ivol_adjust
        STRB     r0,[r1,#0x1c]
        MOVS     r0,#0
        STRB     r0,[r1,#0x1d]
        MOVS     r2,#0
        MOVS     r0,#0x20
        BL       dwt_writetxdata
        MOVS     r2,#1
        MOVS     r1,#0
        MOVS     r0,#0x20
        BL       dwt_writetxfctrl
        LDR      r0,|L1.1072|
        BL       dwt_setrxaftertxdelay
        LDR      r0,|L1.1076|
        BL       dwt_setrxtimeout
        MOVS     r0,#2
        BL       dwt_starttx
        NOP      
|L1.490|
        MOVS     r1,#0
        MOVS     r0,#0xf
        BL       dwt_read32bitoffsetreg
        LDR      r1,|L1.1100|
        STR      r0,[r1,#0]  ; status_reg
        LDR      r1,|L1.1104|
        TST      r0,r1
        BEQ      |L1.490|
        LDR      r0,|L1.1084|
        LDRB     r0,[r0,#0]  ; frame_seq_nb
        ADDS     r0,r0,#1
        LDR      r1,|L1.1084|
        STRB     r0,[r1,#0]
        LDR      r0,|L1.1100|
        LDR      r0,[r0,#0]  ; status_reg
        MOVS     r1,#1
        LSLS     r1,r1,#14
        TST      r0,r1
        BEQ      |L1.784|
        MOVS     r2,#0x81
        LSLS     r2,r2,#7
        MOVS     r1,#0
        MOVS     r0,#0xf
        BL       dwt_write32bitoffsetreg
        MOVS     r1,#0
        MOVS     r0,#0x10
        BL       dwt_read32bitoffsetreg
        LSLS     r5,r0,#25
        LSRS     r5,r5,#25
        CMP      r5,#0x32
        BHI      |L1.568|
        UXTH     r1,r5
        MOVS     r2,#0
        LDR      r0,|L1.1108|
        BL       dwt_readrxdata
|L1.568|
        MOVS     r0,#0
        LDR      r1,|L1.1108|
        STRB     r0,[r1,#2]
        MOVS     r2,#0xa
        LDR      r1,|L1.1112|
        LDR      r0,|L1.1108|
        BL       memcmp
        CMP      r0,#0
|L1.586|
        BNE      |L1.840|
        LDR      r0,|L1.1108|
        LDRB     r0,[r0,#0xe]  ; rx_buffer
        LDR      r1,|L1.1092|
        LDRB     r1,[r1,#0]  ; ilocaladdr
        CMP      r0,r1
        BNE      |L1.586|
        LDR      r0,|L1.1108|
        LDRB     r0,[r0,#0xd]  ; rx_buffer
        LDR      r1,|L1.1080|
        LDRB     r1,[r1,#0]  ; idestaddr_poll
        CMP      r0,r1
        BNE      |L1.586|
        BL       get_tx_timestamp_u64
        LDR      r2,|L1.1116|
        STM      r2!,{r0,r1}
        BL       get_rx_timestamp_u64
        LDR      r2,|L1.1120|
        STM      r2!,{r0,r1}
        LDR      r0,|L1.1120|
        LDR      r3,[r0,#0]  ; resp_rx_ts
        LDR      r0,[r0,#4]  ; resp_rx_ts
        LDR      r1,|L1.1124|
        MOVS     r2,#0
        ADDS     r1,r3,r1
        ADCS     r0,r0,r2
        LSLS     r2,r0,#24
        LSRS     r0,r1,#8
        ORRS     r0,r0,r2
        MOV      r6,r0
        MOV      r0,r6
        BL       dwt_setdelayedtrxtime
        LDR      r0,|L1.1072|
        BL       dwt_setrxaftertxdelay
        MOVS     r0,#0x19
        LSLS     r0,r0,#7
        BL       dwt_setrxtimeout
        LSRS     r0,r6,#1
        LSLS     r0,r0,#1
        MOVS     r1,#0
        LSRS     r2,r0,#24
        LSLS     r1,r1,#8
        ORRS     r1,r1,r2
        LSLS     r3,r0,#8
        LDR      r2,|L1.1068|
        MOVS     r0,#0
        ADDS     r2,r3,r2
        ADCS     r1,r1,r0
        LDR      r0,|L1.1128|
        STR      r2,[r0,#0]  ; final_tx_ts
        STR      r1,[r0,#4]  ; final_tx_ts
        LDR      r0,|L1.1116|
        LDM      r0!,{r2,r3}
        LDR      r0,|L1.1132|
        BL       final_msg_set_ts
        LDR      r0,|L1.1120|
        LDM      r0!,{r2,r3}
        LDR      r0,|L1.1132|
        ADDS     r0,r0,#4
        BL       final_msg_set_ts
        LDR      r0,|L1.1128|
        LDM      r0!,{r2,r3}
        LDR      r0,|L1.1132|
        ADDS     r0,r0,#8
        BL       final_msg_set_ts
        LDR      r0,|L1.1084|
        LDRB     r0,[r0,#0]  ; frame_seq_nb
        LDR      r1,|L1.1132|
        SUBS     r1,r1,#0xa
        STRB     r0,[r1,#2]
        LDR      r0,|L1.1092|
        LDRB     r0,[r0,#0]  ; ilocaladdr
        STRB     r0,[r1,#0x16]
        LDR      r0,|L1.1080|
        LDRB     r0,[r0,#0]  ; idestaddr_poll
        STRB     r0,[r1,#0x17]
        MOVS     r2,#0
        MOVS     r0,#0x1a
        BL       dwt_writetxdata
        MOVS     r2,#1
        MOVS     r1,#0
        MOVS     r0,#0x1a
        BL       dwt_writetxfctrl
        MOVS     r0,#3
        BL       dwt_starttx
        STR      r0,[sp,#0x28]
        LDR      r0,|L1.1084|
        B        |L1.786|
|L1.784|
        B        |L1.1244|
|L1.786|
        LDRB     r0,[r0,#0]  ; frame_seq_nb
        ADDS     r0,r0,#1
        LDR      r1,|L1.1084|
        STRB     r0,[r1,#0]
        LDR      r0,[sp,#0x28]
        ADDS     r0,r0,#1
        BNE      |L1.804|
|L1.800|
        ADD      sp,sp,#0x2c
        POP      {r4-r7,pc}
|L1.804|
        NOP      
|L1.806|
        MOVS     r1,#0
        MOVS     r0,#0xf
        BL       dwt_read32bitoffsetreg
        LDR      r1,|L1.1100|
        STR      r0,[r1,#0]  ; status_reg
        LDR      r1,|L1.1104|
        TST      r0,r1
        BEQ      |L1.806|
        LDR      r0,|L1.1100|
        LDR      r0,[r0,#0]  ; status_reg
        MOVS     r1,#1
        LSLS     r1,r1,#14
        TST      r0,r1
        BEQ      |L1.1032|
        MOVS     r2,#0x81
        B        |L1.842|
|L1.840|
        B        |L1.1242|
|L1.842|
        LSLS     r2,r2,#7
        MOVS     r1,#0
        MOVS     r0,#0xf
        BL       dwt_write32bitoffsetreg
        MOVS     r1,#0
        MOVS     r0,#0x10
        BL       dwt_read32bitoffsetreg
        LSLS     r5,r0,#25
        LSRS     r5,r5,#25
        CMP      r5,#0x32
        BHI      |L1.878|
        UXTH     r1,r5
        MOVS     r2,#0
        LDR      r0,|L1.1108|
        BL       dwt_readrxdata
|L1.878|
        MOVS     r0,#0
        LDR      r1,|L1.1108|
        STRB     r0,[r1,#2]
        MOVS     r2,#0xa
        LDR      r1,|L1.1136|
        LDR      r0,|L1.1108|
        BL       memcmp
        CMP      r0,#0
|L1.896|
        BNE      |L1.1034|
        LDR      r0,|L1.1108|
        LDRB     r0,[r0,#0xb]  ; rx_buffer
        LDR      r1,|L1.1092|
        LDRB     r1,[r1,#0]  ; ilocaladdr
        CMP      r0,r1
        BNE      |L1.896|
        LDR      r0,|L1.1108|
        LDRB     r0,[r0,#0xa]  ; rx_buffer
        LDR      r1,|L1.1080|
        LDRB     r1,[r1,#0]  ; idestaddr_poll
        CMP      r0,r1
        BNE      |L1.1034|
        MOVS     r1,#0x24
        MOV      r0,sp
        BL       __aeabi_memclr4
        ADD      r1,sp,#0x24
        LDR      r0,|L1.1108|
        ADDS     r0,r0,#0xc
        BL       final_msg_get_ts
        CMP      r4,#0
        BEQ      |L1.958|
        CMP      r4,#1
        BEQ      |L1.972|
        CMP      r4,#2
        BEQ      |L1.986|
        CMP      r4,#3
        BNE      |L1.1014|
        B        |L1.1000|
|L1.958|
        MOVS     r3,#0
        LDR      r0,|L1.1088|
        ADDS     r0,r0,#0xc
        LDR      r2,[sp,#0x24]
        BL       final_msg_set_ts
        B        |L1.1016|
|L1.972|
        MOVS     r3,#0
        LDR      r0,|L1.1088|
        ADDS     r0,r0,#0x10
        LDR      r2,[sp,#0x24]
        BL       final_msg_set_ts
        B        |L1.1016|
|L1.986|
        MOVS     r3,#0
        LDR      r0,|L1.1088|
        ADDS     r0,r0,#0x14
        LDR      r2,[sp,#0x24]
        BL       final_msg_set_ts
        B        |L1.1016|
|L1.1000|
        MOVS     r3,#0
        LDR      r0,|L1.1088|
        ADDS     r0,r0,#0x18
        LDR      r2,[sp,#0x24]
        BL       final_msg_set_ts
        B        |L1.1016|
|L1.1014|
        NOP      
|L1.1016|
        NOP      
        MOV      r0,sp
        MOVS     r7,#0x24
        LDRSH    r7,[r0,r7]
        MOV      r3,r7
        LDR      r0,|L1.1080|
        LDRB     r2,[r0,#0]  ; idestaddr_poll
        B        |L1.1140|
|L1.1032|
        B        |L1.1150|
|L1.1034|
        B        |L1.1240|
|L1.1036|
        DCD      0x50004000
|L1.1040|
        DCD      0x50004228
|L1.1044|
        DCD      0xe000e100
|L1.1048|
        DCB      "INIT FAILED \r\n",0
        DCB      0
|L1.1064|
        DCD      config
|L1.1068|
        DCD      0x00004034
|L1.1072|
        DCD      0x0000028a
|L1.1076|
        DCD      0x00001194
|L1.1080|
        DCD      idestaddr_poll
|L1.1084|
        DCD      frame_seq_nb
|L1.1088|
        DCD      tx_poll_msg
|L1.1092|
        DCD      ilocaladdr
|L1.1096|
        DCD      ivol_adjust
|L1.1100|
        DCD      status_reg
|L1.1104|
        DCD      0x2427d000
|L1.1108|
        DCD      rx_buffer
|L1.1112|
        DCD      rx_resp_msg
|L1.1116|
        DCD      poll_tx_ts
|L1.1120|
        DCD      resp_rx_ts
|L1.1124|
        DCD      0x0c1c0000
|L1.1128|
        DCD      final_tx_ts
|L1.1132|
        DCD      tx_final_msg+0xa
|L1.1136|
        DCD      rx_finalresp_msg
|L1.1140|
        ADR      r1,|L1.1340|
        MOV      r0,sp
        BL       __2sprintf
        B        |L1.1240|
|L1.1150|
        CMP      r4,#0
        BEQ      |L1.1168|
        CMP      r4,#1
        BEQ      |L1.1180|
        CMP      r4,#2
        BEQ      |L1.1194|
        CMP      r4,#3
        BNE      |L1.1222|
        B        |L1.1208|
|L1.1168|
        MOVS     r2,#0
        MOV      r3,r2
        LDR      r0,|L1.1368|
        BL       final_msg_set_ts
        B        |L1.1224|
|L1.1180|
        MOVS     r2,#0
        MOV      r3,r2
        LDR      r0,|L1.1368|
        ADDS     r0,r0,#4
        BL       final_msg_set_ts
        B        |L1.1224|
|L1.1194|
        MOVS     r2,#0
        MOV      r3,r2
        LDR      r0,|L1.1368|
        ADDS     r0,r0,#8
        BL       final_msg_set_ts
        B        |L1.1224|
|L1.1208|
        MOVS     r2,#0
        MOV      r3,r2
        LDR      r0,|L1.1368|
        ADDS     r0,r0,#0xc
        BL       final_msg_set_ts
        B        |L1.1224|
|L1.1222|
        NOP      
|L1.1224|
        NOP      
        LDR      r2,|L1.1372|
        MOVS     r1,#0
        MOVS     r0,#0xf
        BL       dwt_write32bitoffsetreg
        BL       dwt_rxreset
|L1.1240|
        NOP      
|L1.1242|
        B        |L1.1334|
|L1.1244|
        CMP      r4,#0
        BEQ      |L1.1262|
        CMP      r4,#1
        BEQ      |L1.1274|
        CMP      r4,#2
        BEQ      |L1.1288|
        CMP      r4,#3
        BNE      |L1.1316|
        B        |L1.1302|
|L1.1262|
        MOVS     r2,#0
        MOV      r3,r2
        LDR      r0,|L1.1368|
        BL       final_msg_set_ts
        B        |L1.1318|
|L1.1274|
        MOVS     r2,#0
        MOV      r3,r2
        LDR      r0,|L1.1368|
        ADDS     r0,r0,#4
        BL       final_msg_set_ts
        B        |L1.1318|
|L1.1288|
        MOVS     r2,#0
        MOV      r3,r2
        LDR      r0,|L1.1368|
        ADDS     r0,r0,#8
        BL       final_msg_set_ts
        B        |L1.1318|
|L1.1302|
        MOVS     r2,#0
        MOV      r3,r2
        LDR      r0,|L1.1368|
        ADDS     r0,r0,#0xc
        BL       final_msg_set_ts
        B        |L1.1318|
|L1.1316|
        NOP      
|L1.1318|
        NOP      
        LDR      r2,|L1.1372|
        MOVS     r1,#0
        MOVS     r0,#0xf
        BL       dwt_write32bitoffsetreg
        BL       dwt_rxreset
|L1.1334|
        NOP      
        B        |L1.800|
        ENDP

        DCW      0x0000
|L1.1340|
        DCB      "destaddr %d  DIST: %d cm\r\n",0
        DCB      0
|L1.1368|
        DCD      tx_poll_msg+0xc
|L1.1372|
        DCD      0x24279000

        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.bss||, DATA, NOINIT, ALIGN=0

rx_buffer
        %        50

        AREA ||.data||, DATA, ALIGN=3

ilocaladdr
        DCB      0x00
idestaddr
        DCB      0x00
idestaddr_poll
        DCB      0x00
flg_volchg
        DCB      0x00
ivol_adjust
        DCB      0x00
flg_powerchg
        DCB      0x00
ipowerctrl
        DCB      0x00,0x00
config
        DCB      0x02,0x02,0x08,0x02
        DCB      0x09,0x09,0x01,0x02
        DCB      0x00,0x00
        DCW      0x0421
tx_poll_msg
        DCB      0x41,0x88,0x00,0xca
        DCB      0xde,0x57,0x41,0x56
        DCB      0x45,0x21,0x00,0x00
        DCB      0x00,0x00,0x00,0x00
        DCB      0x00,0x00,0x00,0x00
        DCB      0x00,0x00,0x00,0x00
        DCB      0x00,0x00,0x00,0x00
        DCB      0x00,0x00,0x00,0x00
rx_resp_msg
        DCB      0x41,0x88,0x00,0xca
        DCB      0xde,0x56,0x45,0x57
        DCB      0x41,0x10,0x02,0x00
        DCB      0x00,0x00,0x00,0x00
        DCB      0x00
tx_final_msg
        DCB      0x41,0x88,0x00
        DCB      0xca,0xde,0x57,0x41
        DCB      0x56,0x45,0x23,0x00
        DCB      0x00,0x00,0x00,0x00
        DCB      0x00,0x00,0x00,0x00
        DCB      0x00,0x00,0x00,0x00
        DCB      0x00,0x00,0x00
rx_finalresp_msg
        DCB      0x41
        DCB      0x88,0x00,0xca,0xde
        DCB      0x57,0x41,0x56,0x45
        DCB      0x27,0x00,0x00,0x00
        DCB      0x00,0x00,0x00,0x00
        DCB      0x00
frame_seq_nb
        DCB      0x00,0x00,0x00
status_reg
        DCD      0x00000000
poll_tx_ts
        %        8
resp_rx_ts
        %        8
final_tx_ts
        %        8

        EXPORT dw1000_init [CODE]
        EXPORT dw1000_twr_measure [CODE]
        EXPORT ilocaladdr [DATA,SIZE=1]
        EXPORT idestaddr [DATA,SIZE=1]
        EXPORT idestaddr_poll [DATA,SIZE=1]
        EXPORT flg_volchg [DATA,SIZE=1]
        EXPORT ivol_adjust [DATA,SIZE=1]
        EXPORT flg_powerchg [DATA,SIZE=1]
        EXPORT ipowerctrl [DATA,SIZE=1]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT spiFlashInit [CODE]
        IMPORT reset_DW1000 [CODE]
        IMPORT spi_set_rate_low [CODE]
        IMPORT sysDelayMs [CODE]
        IMPORT dwt_initialise [CODE]
        IMPORT iputs [CODE]
        IMPORT spi_set_rate_high [CODE]
        IMPORT dwt_configure [CODE]
        IMPORT dwt_setrxantennadelay [CODE]
        IMPORT dwt_settxantennadelay [CODE]
        IMPORT dwt_setrxaftertxdelay [CODE]
        IMPORT dwt_setrxtimeout [CODE]
        IMPORT dwt_setpreambledetecttimeout [CODE]
        IMPORT dwt_readrxtimestamp [CODE]
        IMPORT dwt_readtxtimestamp [CODE]
        IMPORT dwt_writetxdata [CODE]
        IMPORT dwt_writetxfctrl [CODE]
        IMPORT dwt_starttx [CODE]
        IMPORT dwt_read32bitoffsetreg [CODE]
        IMPORT dwt_write32bitoffsetreg [CODE]
        IMPORT dwt_readrxdata [CODE]
        IMPORT memcmp [CODE]
        IMPORT dwt_setdelayedtrxtime [CODE]
        IMPORT __aeabi_memclr4 [CODE]
        IMPORT _printf_percent [CODE]
        IMPORT _printf_d [CODE]
        IMPORT _printf_int_dec [CODE]
        IMPORT __2sprintf [CODE]
        IMPORT dwt_rxreset [CODE]

        KEEP GPIO_SET_MODE
        KEEP final_msg_set_ts
        KEEP final_msg_get_ts
        KEEP get_rx_timestamp_u64
        KEEP get_tx_timestamp_u64
        KEEP rx_buffer
        KEEP config
        KEEP tx_poll_msg
        KEEP rx_resp_msg
        KEEP tx_final_msg
        KEEP rx_finalresp_msg
        KEEP frame_seq_nb
        KEEP status_reg
        KEEP poll_tx_ts
        KEEP resp_rx_ts
        KEEP final_tx_ts

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,6
        ATTR SETSTRING Tag_conformance,"2.06"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
