; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--debug -c --asm --info=totals -o.\output\power.o --depend=.\output\power.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\CMSIS\CM0\DeviceSupport\Nuvoton\NUC123Series -I..\CMSIS\CM0\CoreSupport -I..\INC\DrvInc -I..\INC\SysInc -I..\dw -IC:\Keil_v472\ARM\RV31\INC -IC:\Keil_v472\ARM\CMSIS\Include -IC:\Keil_v472\ARM\Inc\Nuvoton\NUC123Series -D__MICROLIB --omf_browse=.\output\power.crf ..\AppSrc\power.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||.text||, CODE, READONLY, ALIGN=2

GPIO_DisableInt PROC
        LDR      r2,[r0,#0x18]
        MOVS     r3,#1
        LSLS     r3,r3,r1
        BICS     r2,r2,r3
        STR      r2,[r0,#0x18]
        LDR      r3,[r0,#0x1c]
        LDR      r2,|L1.804|
        LSLS     r2,r2,r1
        BICS     r3,r3,r2
        STR      r3,[r0,#0x1c]
        BX       lr
        ENDP

sysResume PROC
        BX       lr
        ENDP

sysStore PROC
        BX       lr
        ENDP

resetHook PROC
        BX       lr
        ENDP

dealPowerKey PROC
        BX       lr
        ENDP

doPowerOff PROC
        BX       lr
        ENDP

powerOff PROC
        BX       lr
        ENDP

timerInit PROC
        PUSH     {r4,lr}
        MOVS     r0,#0
        LDR      r1,|L1.808|
        LDR      r1,[r1,#0x14]
        MOVS     r2,#7
        LSLS     r2,r2,#8
        BICS     r1,r1,r2
        ORRS     r1,r1,r0
        LDR      r2,|L1.808|
        STR      r1,[r2,#0x14]
        NOP      
        LSLS     r3,r2,#19
        MOVS     r2,#0xa
        MOVS     r1,#0x15
        LDR      r0,|L1.812|
        BL       DrvTIMER_Init
        MOVS     r1,#1
        LSLS     r1,r1,#29
        LDR      r0,|L1.812|
        BL       DrvTIMER_EnableInt
        NOP      
        LDR      r0,|L1.812|
        LDR      r0,[r0,#0]
        MOVS     r1,#1
        LSLS     r1,r1,#30
        ORRS     r0,r0,r1
        LDR      r1,|L1.812|
        STR      r0,[r1,#0]
        NOP      
        POP      {r4,pc}
        ENDP

set_p PROC
        MOVS     r0,#0x55
        LDR      r1,|L1.816|
        STR      r0,[r1,#0]  ; source_p
        BX       lr
        ENDP

ampInit1 PROC
        BX       lr
        ENDP

powerOn PROC
        BX       lr
        ENDP

outStandby PROC
        LDR      r0,|L1.820|
        LDRB     r0,[r0,#0]  ; dev_state
        CMP      r0,#0
        BEQ      |L1.124|
        MOVS     r0,#1
        LDR      r1,|L1.820|
        STRB     r0,[r1,#0]
|L1.124|
        BX       lr
        ENDP

enterStandby PROC
        BX       lr
        ENDP

WDT_IRQHandler PROC
        PUSH     {r4,lr}
        ADR      r0,|L1.824|
        BL       iputs
        LDR      r0,|L1.836|
        LDR      r0,[r0,#0]
        MOVS     r1,#8
        TST      r0,r1
        BEQ      |L1.166|
        BL       SYS_UnlockReg
        LDR      r0,|L1.836|
        LDR      r0,[r0,#0]
        MOVS     r1,#8
        ORRS     r0,r0,r1
        LDR      r1,|L1.836|
        STR      r0,[r1,#0]
        BL       SYS_LockReg
|L1.166|
        POP      {r4,pc}
        ENDP

WDTInit PROC
        PUSH     {r4,lr}
        MOVS     r2,#1
        MOVS     r1,#3
        MOVS     r0,#5
        BL       DrvWDT_Init
        BL       SYS_UnlockReg
        BL       WDT_TIMER_RESET
        BL       WDT_ENABLE_COUNTING
        BL       WDT_CLEAR_RESET_FLAG
        NOP      
        LDR      r0,|L1.836|
        LDR      r0,[r0,#0]
        MOVS     r1,#0x10
        BICS     r0,r0,r1
        LDR      r1,|L1.836|
        STR      r0,[r1,#0]
        NOP      
        NOP      
        MOV      r0,r1
        LDR      r0,[r0,#0]
        MOVS     r1,#2
        ORRS     r0,r0,r1
        LDR      r1,|L1.836|
        STR      r0,[r1,#0]
        NOP      
        BL       SYS_LockReg
        BL       DrvWDT_EnableInt
        POP      {r4,pc}
        ENDP

WDTwake PROC
        PUSH     {r4,lr}
        MOVS     r2,#0
        MOVS     r1,#3
        MOVS     r0,#6
        BL       DrvWDT_Init
        BL       DrvWDT_EnableInt
        BL       SYS_UnlockReg
        BL       WDT_TIMER_RESET
        BL       WDT_ENABLE_COUNTING
        BL       WDT_CLEAR_RESET_FLAG
        NOP      
        LDR      r0,|L1.836|
        LDR      r0,[r0,#0]
        MOVS     r1,#0x10
        ORRS     r0,r0,r1
        LDR      r1,|L1.836|
        STR      r0,[r1,#0]
        NOP      
        NOP      
        MOV      r0,r1
        LDR      r0,[r0,#0]
        MOVS     r1,#2
        BICS     r0,r0,r1
        LDR      r1,|L1.836|
        STR      r0,[r1,#0]
        NOP      
        BL       SYS_LockReg
        POP      {r4,pc}
        ENDP

PWRWU_IRQHandler PROC
        PUSH     {r4,lr}
        BL       SYS_UnlockReg
        MOVS     r0,#2
        BL       ledColorSet
        MOVS     r0,#0x7d
        LSLS     r0,r0,#4
        BL       sysDelayMs
        BL       SYS_LockReg
        POP      {r4,pc}
        ENDP

GPAB_IRQHandler PROC
        PUSH     {r4,lr}
        MOVS     r1,#0xa
        LDR      r0,|L1.840|
        BL       GPIO_GET_PIN_IF
        CMP      r0,#0
        BEQ      |L1.370|
        MOVS     r0,#1
        LDR      r1,|L1.844|
        STRB     r0,[r1,#0]
        MOVS     r1,#0xa
        LDR      r0,|L1.840|
        BL       GPIO_CLR_PIN_IF
        MOVS     r1,#0xa
        LDR      r0,|L1.840|
        BL       GPIO_DisableInt
|L1.370|
        MOVS     r1,#0xf
        LDR      r0,|L1.840|
        SUBS     r0,r0,#0x40
        BL       GPIO_GET_PIN_IF
        CMP      r0,#0
        BEQ      |L1.410|
        MOVS     r0,#1
        LDR      r1,|L1.844|
        STRB     r0,[r1,#0]
        MOVS     r1,#0xf
        LDR      r0,|L1.840|
        SUBS     r0,r0,#0x40
        BL       GPIO_CLR_PIN_IF
        MOVS     r1,#0xf
        LDR      r0,|L1.840|
        SUBS     r0,r0,#0x40
        BL       GPIO_DisableInt
|L1.410|
        MOVS     r1,#0xb
        LDR      r0,|L1.840|
        SUBS     r0,r0,#0x40
        BL       GPIO_GET_PIN_IF
        CMP      r0,#0
        BEQ      |L1.470|
        MOVS     r0,#1
        LDR      r1,|L1.844|
        STRB     r0,[r1,#0]
        LDR      r0,|L1.848|
        LDR      r0,[r0,#0]
        MOVS     r1,#0x10
        BICS     r0,r0,r1
        LDR      r1,|L1.848|
        STR      r0,[r1,#0]
        MOVS     r0,#1
        LDR      r1,|L1.852|
        STRB     r0,[r1,#0]
        MOVS     r1,#0xb
        LDR      r0,|L1.840|
        SUBS     r0,r0,#0x40
        BL       GPIO_CLR_PIN_IF
        LDR      r0,|L1.848|
        LDR      r0,[r0,#0]
        MOVS     r1,#0x10
        ORRS     r0,r0,r1
        LDR      r1,|L1.848|
        STR      r0,[r1,#0]
|L1.470|
        POP      {r4,pc}
        ENDP

TMR0_IRQHandler PROC
        NOP      
        LDR      r0,|L1.812|
        LDR      r0,[r0,#8]
        MOVS     r1,#1
        ORRS     r0,r0,r1
        LDR      r1,|L1.812|
        STR      r0,[r1,#8]
        NOP      
        LDR      r0,|L1.856|
        LDR      r0,[r0,#0]  ; ptimer
        ADDS     r0,r0,#1
        LDR      r1,|L1.856|
        STR      r0,[r1,#0]  ; ptimer
        CMP      r0,#0xc8
        BLS      |L1.506|
        MOVS     r0,#0
        STR      r0,[r1,#0]  ; ptimer
|L1.506|
        LDR      r0,|L1.860|
        LDRB     r0,[r0,#0]  ; flg_whitebreath
        CMP      r0,#1
        BNE      |L1.578|
        MOVS     r0,#0
        LDR      r1,|L1.860|
        STRB     r0,[r1,#0]
        LDR      r0,|L1.864|
        LDR      r0,[r0,#0]  ; R_C
        LSLS     r0,r0,#2
        LDR      r1,|L1.868|
        LDR      r0,[r1,r0]
        LDR      r1,|L1.856|
        LDR      r1,[r1,#0]  ; ptimer
        CMP      r0,r1
        BLS      |L1.558|
        LDR      r0,|L1.840|
        SUBS     r0,r0,#0x40
        LDR      r0,[r0,#8]
        MOVS     r1,#7
        LSLS     r1,r1,#12
        BICS     r0,r0,r1
        LDR      r1,|L1.840|
        SUBS     r1,r1,#0x40
        STR      r0,[r1,#8]
        B        |L1.712|
|L1.558|
        LDR      r0,|L1.840|
        SUBS     r0,r0,#0x40
        LDR      r0,[r0,#8]
        MOVS     r1,#7
        LSLS     r1,r1,#12
        ORRS     r0,r0,r1
        LDR      r1,|L1.840|
        SUBS     r1,r1,#0x40
        STR      r0,[r1,#8]
        B        |L1.712|
|L1.578|
        LDR      r0,|L1.864|
        LDR      r0,[r0,#0]  ; R_C
        LSLS     r0,r0,#2
        LDR      r1,|L1.868|
        LDR      r0,[r1,r0]
        LDR      r1,|L1.856|
        LDR      r1,[r1,#0]  ; ptimer
        CMP      r0,r1
        BLS      |L1.608|
        NOP      
        MOVS     r0,#0
        LDR      r1,|L1.872|
        STR      r0,[r1,#0]
        NOP      
        B        |L1.620|
|L1.608|
        NOP      
        MOVS     r0,#1
        LDR      r1,|L1.872|
        STR      r0,[r1,#0]
        NOP      
        NOP      
|L1.620|
        LDR      r0,|L1.876|
        LDR      r0,[r0,#0]  ; B_C
        LSLS     r0,r0,#2
        LDR      r1,|L1.868|
        LDR      r0,[r1,r0]
        LDR      r1,|L1.856|
        LDR      r1,[r1,#0]  ; ptimer
        CMP      r0,r1
        BLS      |L1.652|
        NOP      
        MOVS     r0,#0
        LDR      r1,|L1.872|
        ADDS     r1,r1,#8
        STR      r0,[r1,#0]
        NOP      
        B        |L1.666|
|L1.652|
        NOP      
        MOVS     r0,#1
        LDR      r1,|L1.872|
        ADDS     r1,r1,#8
        STR      r0,[r1,#0]
        NOP      
        NOP      
|L1.666|
        LDR      r0,|L1.880|
        LDR      r0,[r0,#0]  ; G_C
        LSLS     r0,r0,#2
        LDR      r1,|L1.868|
        LDR      r0,[r1,r0]
        LDR      r1,|L1.856|
        LDR      r1,[r1,#0]  ; ptimer
        CMP      r0,r1
        BLS      |L1.698|
        NOP      
        MOVS     r0,#0
        LDR      r1,|L1.872|
        ADDS     r1,r1,#4
        STR      r0,[r1,#0]
        NOP      
        B        |L1.712|
|L1.698|
        NOP      
        MOVS     r0,#1
        LDR      r1,|L1.872|
        ADDS     r1,r1,#4
        STR      r0,[r1,#0]
        NOP      
        NOP      
|L1.712|
        BX       lr
        ENDP

openMcuCtrlPin PROC
        BX       lr
        ENDP

GPIO_GET_PIN_IF PROC
        MOV      r2,r0
        LDR      r0,[r2,#0x20]
        MOVS     r3,#1
        LSLS     r3,r3,r1
        ANDS     r0,r0,r3
        BX       lr
        ENDP

GPIO_CLR_PIN_IF PROC
        MOVS     r2,#1
        LSLS     r2,r2,r1
        STR      r2,[r0,#0x20]
        BX       lr
        ENDP

SYS_UnlockReg PROC
        MOVS     r0,#0x59
        LDR      r1,|L1.884|
        STR      r0,[r1,#0]
        MOVS     r0,#0x16
        STR      r0,[r1,#0]
        MOVS     r0,#0x88
        STR      r0,[r1,#0]
        BX       lr
        ENDP

SYS_LockReg PROC
        MOVS     r0,#0
        LDR      r1,|L1.884|
        STR      r0,[r1,#0]
        BX       lr
        ENDP

WDT_ENABLE_COUNTING PROC
        LDR      r0,|L1.836|
        LDR      r0,[r0,#0]
        MOVS     r1,#0x80
        ORRS     r0,r0,r1
        LDR      r1,|L1.836|
        STR      r0,[r1,#0]
        BX       lr
        ENDP

WDT_CLEAR_RESET_FLAG PROC
        LDR      r0,|L1.836|
        LDR      r0,[r0,#0]
        MOVS     r1,#4
        ORRS     r0,r0,r1
        LDR      r1,|L1.836|
        STR      r0,[r1,#0]
        BX       lr
        ENDP

WDT_TIMER_RESET PROC
        LDR      r0,|L1.836|
        LDR      r0,[r0,#0]
        MOVS     r1,#1
        ORRS     r0,r0,r1
        LDR      r1,|L1.836|
        STR      r0,[r1,#0]
        BX       lr
        ENDP

        DCW      0x0000
|L1.804|
        DCD      0x00010001
|L1.808|
        DCD      0x50000200
|L1.812|
        DCD      0x40010000
|L1.816|
        DCD      source_p
|L1.820|
        DCD      dev_state
|L1.824|
        DCB      "WDT--01.\r\n",0
        DCB      0
|L1.836|
        DCD      0x40004000
|L1.840|
        DCD      0x50004040
|L1.844|
        DCD      gpio_int
|L1.848|
        DCD      0xe000e100
|L1.852|
        DCD      flg_touchin
|L1.856|
        DCD      ptimer
|L1.860|
        DCD      flg_whitebreath
|L1.864|
        DCD      ||R_C||
|L1.868|
        DCD      pwtable
|L1.872|
        DCD      0x50004230
|L1.876|
        DCD      B_C
|L1.880|
        DCD      G_C
|L1.884|
        DCD      0x50000100

        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.data||, DATA, ALIGN=2

flg_poweronsound
        DCB      0x00,0x00,0x00,0x00
ipoweroncount
        DCD      0x00000000
flg_poweron2
        DCB      0x00
NFC_flag
        DCB      0x00
dc_flag
        DCB      0x00
wdt_handler
        DCB      0x00
wdt_timer
        DCD      0x00000000
gpio_int
        DCB      0x00,0x00,0x00,0x00
pwrcon
        DCD      0x50000200
battery_state
        DCB      0x00,0x00,0x00,0x00
pww
        DCD      0x00000082
pwm_tbl
        DCD      0x00000069
        DCD      0x00000069
        DCD      0x00000069
        DCD      0x0000006e
        DCD      0x00000073
        DCD      0x00000078
        DCD      0x00000082
        DCD      0x00000087
        DCD      0x00000091
        DCD      0x000000c7
        DCD      0x000000b4
source_p
        DCD      0x000000ff
bt_ck
        DCD      0x00000000
bt_cycle
        DCD      0x00000006
pvo
        DCD      0x00000000
||R_C||
        DCD      0x00000000
B_C
        DCD      0x00000000
G_C
        DCD      0x00000000
pwtable
        DCD      0x00000000
        DCD      0x00000002
        DCD      0x00000003
        DCD      0x00000004
        DCD      0x00000006
        DCD      0x00000009
        DCD      0x0000000c
        DCD      0x0000000f
        DCD      0x00000012
        DCD      0x00000018
        DCD      0x0000001e
        DCD      0x00000027
        DCD      0x00000030
        DCD      0x0000003e
        DCD      0x0000004e
        DCD      0x0000005f
        DCD      0x00000074
        DCD      0x00000083
        DCD      0x00000096
        DCD      0x000000aa
        DCD      0x000000c8
ptimer
        DCD      0x00000000
pww2
        DCD      0x00000000
flg_playpoweron
        DCB      0x00
flg_poweron
        DCB      0x00
flg_motorup
        DCB      0x00,0x00
nfc_start
        DCD      0x00000000

        EXPORT sysResume [CODE]
        EXPORT sysStore [CODE]
        EXPORT resetHook [CODE]
        EXPORT dealPowerKey [CODE]
        EXPORT doPowerOff [CODE]
        EXPORT powerOff [CODE]
        EXPORT timerInit [CODE]
        EXPORT set_p [CODE]
        EXPORT ampInit1 [CODE]
        EXPORT powerOn [CODE]
        EXPORT outStandby [CODE]
        EXPORT enterStandby [CODE]
        EXPORT WDT_IRQHandler [CODE]
        EXPORT WDTInit [CODE]
        EXPORT WDTwake [CODE]
        EXPORT PWRWU_IRQHandler [CODE]
        EXPORT GPAB_IRQHandler [CODE]
        EXPORT TMR0_IRQHandler [CODE]
        EXPORT openMcuCtrlPin [CODE]
        EXPORT flg_poweronsound [DATA,SIZE=1]
        EXPORT ipoweroncount [DATA,SIZE=4]
        EXPORT flg_poweron2 [DATA,SIZE=1]
        EXPORT NFC_flag [DATA,SIZE=1]
        EXPORT dc_flag [DATA,SIZE=1]
        EXPORT wdt_handler [DATA,SIZE=1]
        EXPORT wdt_timer [DATA,SIZE=4]
        EXPORT gpio_int [DATA,SIZE=1]
        EXPORT pwrcon [DATA,SIZE=4]
        EXPORT battery_state [DATA,SIZE=1]
        EXPORT pww [DATA,SIZE=4]
        EXPORT pwm_tbl [DATA,SIZE=44]
        EXPORT bt_ck [DATA,SIZE=4]
        EXPORT bt_cycle [DATA,SIZE=4]
        EXPORT pvo [DATA,SIZE=4]
        EXPORT ||R_C|| [DATA,SIZE=4]
        EXPORT B_C [DATA,SIZE=4]
        EXPORT G_C [DATA,SIZE=4]
        EXPORT pwtable [DATA,SIZE=84]
        EXPORT pww2 [DATA,SIZE=4]
        EXPORT flg_playpoweron [DATA,SIZE=1]
        EXPORT flg_poweron [DATA,SIZE=1]
        EXPORT flg_motorup [DATA,SIZE=1]
        EXPORT nfc_start [DATA,SIZE=4]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT DrvTIMER_Init [CODE]
        IMPORT DrvTIMER_EnableInt [CODE]
        IMPORT dev_state [DATA]
        IMPORT iputs [CODE]
        IMPORT DrvWDT_Init [CODE]
        IMPORT DrvWDT_EnableInt [CODE]
        IMPORT ledColorSet [CODE]
        IMPORT sysDelayMs [CODE]
        IMPORT flg_touchin [DATA]
        IMPORT flg_whitebreath [DATA]

        KEEP GPIO_DisableInt
        KEEP GPIO_GET_PIN_IF
        KEEP GPIO_CLR_PIN_IF
        KEEP SYS_UnlockReg
        KEEP SYS_LockReg
        KEEP WDT_ENABLE_COUNTING
        KEEP WDT_CLEAR_RESET_FLAG
        KEEP WDT_TIMER_RESET
        KEEP source_p
        KEEP ptimer

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,6
        ATTR SETSTRING Tag_conformance,"2.06"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
