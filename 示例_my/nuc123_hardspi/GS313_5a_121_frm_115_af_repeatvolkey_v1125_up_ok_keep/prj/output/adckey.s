; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--debug -c --asm --info=totals -o.\output\adckey.o --depend=.\output\adckey.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\CMSIS\CM0\DeviceSupport\Nuvoton\NUC123Series -I..\CMSIS\CM0\CoreSupport -I..\INC\DrvInc -I..\INC\SysInc -I..\dw -IC:\Keil_v472\ARM\RV31\INC -IC:\Keil_v472\ARM\CMSIS\Include -IC:\Keil_v472\ARM\Inc\Nuvoton\NUC123Series -D__MICROLIB --omf_browse=.\output\adckey.crf ..\AppSrc\adcKey.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||.text||, CODE, READONLY, ALIGN=2

adcKeyClkInit PROC
        MOVS     r0,#1
        LSLS     r0,r0,#28
        MOVS     r1,#5
        LSLS     r1,r1,#28
        LDR      r1,[r1,#0xc]
        ORRS     r1,r1,r0
        MOVS     r2,#5
        LSLS     r2,r2,#28
        STR      r1,[r2,#0xc]
        MOV      r1,r2
        LDR      r1,[r1,#0xc]
        BICS     r1,r1,r0
        STR      r1,[r2,#0xc]
        NOP      
        MOVS     r0,#0
        LDR      r1,|L1.1040|
        LDR      r1,[r1,#0x14]
        MOVS     r2,#0xc
        BICS     r1,r1,r2
        ORRS     r1,r1,r0
        LDR      r2,|L1.1040|
        STR      r1,[r2,#0x14]
        NOP      
        MOVS     r0,#0x2c
        MOV      r1,r2
        LDR      r1,[r1,#0x18]
        MOVS     r2,#0xff
        LSLS     r2,r2,#16
        BICS     r1,r1,r2
        SUBS     r2,r0,#1
        LSLS     r2,r2,#16
        ORRS     r1,r1,r2
        LDR      r2,|L1.1040|
        STR      r1,[r2,#0x18]
        NOP      
        LSLS     r0,r2,#19
        MOV      r1,r2
        LDR      r1,[r1,#8]
        ORRS     r1,r1,r0
        STR      r1,[r2,#8]
        NOP      
        BX       lr
        ENDP

readCAP8298 PROC
        PUSH     {r2-r4,lr}
        MOV      r4,r0
        LDR      r0,|L1.1044|
        MOVS     r1,#1
        MOVS     r3,#2
        MOV      r2,r1
        STR      r1,[sp,#0]
        STR      r0,[sp,#4]
        MOVS     r1,#0x50
        LDR      r0,|L1.1048|
        BL       initI2cDataBlock
        LDR      r1,|L1.1044|
        STRB     r4,[r1,#1]
        MOVS     r0,#0
        STRB     r0,[r1,#2]
        MOVS     r0,#0xa2
        STRB     r0,[r1,#0]
        MOVS     r1,#0
        LDR      r0,|L1.1048|
        BL       addI2cChain
        NOP      
|L1.130|
        LDR      r0,|L1.1044|
        LDRB     r0,[r0,#0]  ; touch_buf
        CMP      r0,#0xa2
        BEQ      |L1.130|
        LDR      r0,|L1.1044|
        LDRB     r0,[r0,#2]  ; touch_buf
        POP      {r2-r4,pc}
        ENDP

capack PROC
        LDR      r0,|L1.1044|
        LDRB     r0,[r0,#0]  ; touch_buf
        BX       lr
        ENDP

readCAPBlock PROC
        PUSH     {r2-r6,lr}
        MOV      r4,r0
        MOV      r5,r1
        LDR      r0,|L1.1044|
        MOVS     r1,#1
        STR      r1,[sp,#0]
        STR      r0,[sp,#4]
        ADDS     r0,r5,#1
        UXTB     r3,r0
        MOV      r2,r1
        MOVS     r1,#0x50
        LDR      r0,|L1.1048|
        BL       initI2cDataBlock
        LDR      r1,|L1.1044|
        STRB     r4,[r1,#1]
        MOVS     r0,#0
        STRB     r0,[r1,#2]
        MOVS     r0,#0xa2
        STRB     r0,[r1,#0]
        MOVS     r1,#0
        LDR      r0,|L1.1048|
        BL       addI2cChain
        NOP      
|L1.200|
        LDR      r0,|L1.1044|
        LDRB     r0,[r0,#0]  ; touch_buf
        CMP      r0,#0xa2
        BEQ      |L1.200|
        LDR      r0,|L1.1044|
        LDRB     r0,[r0,#0]  ; touch_buf
        CMP      r0,#0xa0
        BNE      |L1.220|
        MOVS     r0,#1
|L1.218|
        POP      {r2-r6,pc}
|L1.220|
        MOVS     r0,#0
        B        |L1.218|
        ENDP

writeCAP8298 PROC
        PUSH     {r2-r6,lr}
        MOV      r4,r0
        MOV      r5,r1
        LDR      r0,|L1.1044|
        MOVS     r1,#1
        MOVS     r3,#2
        MOVS     r2,#0
        STR      r1,[sp,#0]
        STR      r0,[sp,#4]
        MOVS     r1,#0x50
        LDR      r0,|L1.1048|
        BL       initI2cDataBlock
        LDR      r1,|L1.1044|
        STRB     r5,[r1,#1]
        STRB     r4,[r1,#2]
        MOVS     r0,#0xa2
        STRB     r0,[r1,#0]
        MOVS     r1,#0
        LDR      r0,|L1.1048|
        BL       addI2cChain
        NOP      
|L1.270|
        LDR      r0,|L1.1044|
        LDRB     r0,[r0,#0]  ; touch_buf
        CMP      r0,#0xa2
        BEQ      |L1.270|
        LDR      r0,|L1.1044|
        LDRB     r0,[r0,#0]  ; touch_buf
        CMP      r0,#0xa0
        BNE      |L1.290|
        MOVS     r0,#1
|L1.288|
        POP      {r2-r6,pc}
|L1.290|
        MOVS     r0,#0
        B        |L1.288|
        ENDP

writeCAP8298Block PROC
        PUSH     {r2-r6,lr}
        MOV      r4,r0
        MOV      r5,r1
        MOVS     r0,#1
        STR      r4,[sp,#4]
        STR      r0,[sp,#0]
        ADDS     r0,r5,#1
        UXTB     r3,r0
        MOVS     r2,#0
        MOVS     r1,#0x50
        LDR      r0,|L1.1048|
        BL       initI2cDataBlock
        MOVS     r0,#0xa2
        STRB     r0,[r4,#0]
        MOVS     r1,#0
        LDR      r0,|L1.1048|
        BL       addI2cChain
        NOP      
|L1.334|
        LDRB     r0,[r4,#0]
        CMP      r0,#0xa2
        BEQ      |L1.334|
        LDRB     r0,[r4,#0]
        CMP      r0,#0xa0
        BNE      |L1.350|
        MOVS     r0,#1
|L1.348|
        POP      {r2-r6,pc}
|L1.350|
        MOVS     r0,#0
        B        |L1.348|
        ENDP

touchKeyconfig PROC
        PUSH     {r4,lr}
        MOVS     r4,#0
        B        |L1.378|
|L1.360|
        LSLS     r2,r4,#1
        LDR      r3,|L1.1052|
        LDRB     r1,[r3,r2]
        LSLS     r2,r4,#1
        ADDS     r2,r2,r3
        LDRB     r0,[r2,#1]
        BL       writeCAP8298
        ADDS     r4,r4,#1
|L1.378|
        CMP      r4,#0x2e
        BCC      |L1.360|
        POP      {r4,pc}
        ENDP

capIntEnable PROC
        BX       lr
        ENDP

capIntDisable PROC
        PUSH     {r4,lr}
        MOVS     r1,#0xc9
        MOVS     r0,#0
        BL       writeCAP8298
        MOVS     r0,#0x32
        BL       sysDelayMs
        POP      {r4,pc}
        ENDP

capIntDisable1 PROC
        PUSH     {r4,lr}
        MOVS     r1,#0xc9
        MOVS     r0,#2
        BL       writeCAP8298
        MOVS     r0,#0x32
        BL       sysDelayMs
        POP      {r4,pc}
        ENDP

capPinEnable PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        MOVS     r1,#0x21
        MOV      r0,r4
        BL       writeCAP8298
        POP      {r4,pc}
        ENDP

resetCap PROC
        PUSH     {r4,lr}
        MOVS     r1,#0xce
        MOVS     r0,#0xaa
        BL       writeCAP8298
        POP      {r4,pc}
        ENDP

capSliderPostion PROC
        PUSH     {r4-r6,lr}
        MOVS     r5,#0
        MOVS     r6,#0
        MOVS     r0,#0
        LDR      r1,|L1.1056|
        STRB     r0,[r1,#0]
        MOVS     r4,#0
        B        |L1.502|
|L1.464|
        LDR      r0,|L1.1060|
        LDRSB    r0,[r0,r4]
        CMP      r0,#5
        BGE      |L1.478|
        MOVS     r0,#0
        LDR      r1,|L1.1060|
        STRB     r0,[r1,r4]
|L1.478|
        LDR      r0,|L1.1060|
        LDRSB    r0,[r0,r4]
        CMP      r0,r5
        BLE      |L1.494|
        LDR      r1,|L1.1056|
        STRB     r4,[r1,#0]
        LDR      r0,|L1.1060|
        LDRSB    r5,[r0,r4]
|L1.494|
        LDR      r0,|L1.1060|
        LDRSB    r0,[r0,r4]
        ADDS     r6,r0,r6
        ADDS     r4,r4,#1
|L1.502|
        CMP      r4,#6
        BLT      |L1.464|
        LSLS     r0,r5,#2
        ADDS     r0,r5,r0
        ASRS     r0,r0,#1
        CMP      r0,r6
        BLT      |L1.520|
        CMP      r5,#0xa
        BGE      |L1.524|
|L1.520|
        MOVS     r0,#0xff
|L1.522|
        POP      {r4-r6,pc}
|L1.524|
        LDR      r0,|L1.1056|
        LDRB     r0,[r0,#0]  ; maxIndex
        CMP      r0,#0
        BNE      |L1.592|
        MOVS     r0,#5
        LDR      r1,|L1.1064|
        STRB     r0,[r1,#0]
        MOVS     r0,#1
        LDR      r1,|L1.1068|
        STRB     r0,[r1,#0]
        LDR      r0,|L1.1060|
        LDRB     r1,[r1,#0]  ; indexPlusOne
        LDRSB    r0,[r0,r1]
        LDR      r1,|L1.1060|
        LDR      r2,|L1.1064|
        LDRB     r2,[r2,#0]  ; indexMinusOne
        LDRSB    r1,[r1,r2]
        CMP      r0,r1
        BLE      |L1.574|
        MOVS     r0,#0
        LDR      r1,|L1.1064|
        STRB     r0,[r1,#0]
        LDR      r1,|L1.1072|
        STR      r0,[r1,#0]  ; segment
        B        |L1.742|
|L1.574|
        MOVS     r0,#0
        LDR      r1,|L1.1068|
        STRB     r0,[r1,#0]
        MOVS     r0,#5
        LDR      r1,|L1.1064|
        STRB     r0,[r1,#0]
        LDR      r1,|L1.1072|
        STR      r0,[r1,#0]  ; segment
        B        |L1.742|
|L1.592|
        LDR      r0,|L1.1056|
        LDRB     r0,[r0,#0]  ; maxIndex
        CMP      r0,#5
        BNE      |L1.660|
        MOVS     r0,#4
        LDR      r1,|L1.1064|
        STRB     r0,[r1,#0]
        MOVS     r0,#0
        LDR      r1,|L1.1068|
        STRB     r0,[r1,#0]
        LDR      r0,|L1.1060|
        LDRB     r1,[r1,#0]  ; indexPlusOne
        LDRSB    r0,[r0,r1]
        LDR      r1,|L1.1060|
        LDR      r2,|L1.1064|
        LDRB     r2,[r2,#0]  ; indexMinusOne
        LDRSB    r1,[r1,r2]
        CMP      r0,r1
        BLE      |L1.642|
        MOVS     r0,#5
        LDR      r1,|L1.1064|
        STRB     r0,[r1,#0]
        LDR      r1,|L1.1072|
        STR      r0,[r1,#0]  ; segment
        B        |L1.742|
|L1.642|
        MOVS     r0,#5
        LDR      r1,|L1.1068|
        STRB     r0,[r1,#0]
        MOVS     r0,#4
        LDR      r1,|L1.1064|
        STRB     r0,[r1,#0]
        LDR      r1,|L1.1072|
        STR      r0,[r1,#0]  ; segment
        B        |L1.742|
|L1.660|
        LDR      r0,|L1.1056|
        LDRB     r0,[r0,#0]  ; maxIndex
        SUBS     r0,r0,#1
        LDR      r1,|L1.1064|
        STRB     r0,[r1,#0]
        LDR      r0,|L1.1056|
        LDRB     r0,[r0,#0]  ; maxIndex
        ADDS     r0,r0,#1
        LDR      r1,|L1.1068|
        STRB     r0,[r1,#0]
        LDR      r0,|L1.1060|
        LDRB     r1,[r1,#0]  ; indexPlusOne
        LDRSB    r0,[r0,r1]
        LDR      r1,|L1.1060|
        LDR      r2,|L1.1064|
        LDRB     r2,[r2,#0]  ; indexMinusOne
        LDRSB    r1,[r1,r2]
        CMP      r0,r1
        BLE      |L1.716|
        LDR      r0,|L1.1056|
        LDRB     r0,[r0,#0]  ; maxIndex
        LDR      r1,|L1.1064|
        STRB     r0,[r1,#0]
        LDR      r0,|L1.1056|
        LDRB     r0,[r0,#0]  ; maxIndex
        LDR      r1,|L1.1072|
        STR      r0,[r1,#0]  ; segment
        B        |L1.742|
|L1.716|
        LDR      r0,|L1.1056|
        LDRB     r0,[r0,#0]  ; maxIndex
        LDR      r1,|L1.1068|
        STRB     r0,[r1,#0]
        LDR      r0,|L1.1056|
        LDRB     r0,[r0,#0]  ; maxIndex
        SUBS     r0,r0,#1
        LDR      r1,|L1.1064|
        STRB     r0,[r1,#0]
        MOV      r0,r1
        LDRB     r0,[r0,#0]  ; indexMinusOne
        LDR      r1,|L1.1072|
        STR      r0,[r1,#0]  ; segment
|L1.742|
        LDR      r0,|L1.1060|
        LDR      r1,|L1.1068|
        LDRB     r1,[r1,#0]  ; indexPlusOne
        LDRSB    r0,[r0,r1]
        MOVS     r1,#0x14
        MULS     r0,r1,r0
        LDR      r1,|L1.1076|
        STR      r0,[r1,#0]  ; sliderPostion
        LDR      r0,|L1.1060|
        LDR      r2,|L1.1068|
        LDRB     r2,[r2,#0]  ; indexPlusOne
        LDRSB    r0,[r0,r2]
        LDR      r2,|L1.1060|
        LDR      r3,|L1.1064|
        LDRB     r3,[r3,#0]  ; indexMinusOne
        LDRSB    r2,[r2,r3]
        ADDS     r1,r0,r2
        LDR      r0,|L1.1076|
        LDR      r0,[r0,#0]  ; sliderPostion
        BL       __aeabi_uidivmod
        LDR      r1,|L1.1076|
        STR      r0,[r1,#0]  ; sliderPostion
        LDR      r0,|L1.1072|
        LDR      r0,[r0,#0]  ; segment
        MOVS     r1,#0x14
        MULS     r0,r1,r0
        LDR      r1,|L1.1076|
        LDR      r1,[r1,#0]  ; sliderPostion
        ADDS     r0,r0,r1
        B        |L1.522|
        ENDP

adcReadKeyContinue PROC
        MOVS     r0,#0x55
        LDR      r1,|L1.1080|
        STRB     r0,[r1,#0]
        LDR      r0,|L1.1084|
        LDRB     r0,[r0,#0]  ; key_word
        CMP      r0,#0x55
        BEQ      |L1.828|
        MOVS     r0,#5
        MVNS     r0,r0
        LDR      r1,|L1.1088|
        STR      r0,[r1,#0]  ; kwcdc
        B        |L1.878|
|L1.828|
        LDR      r0,|L1.1088|
        LDR      r0,[r0,#0]  ; kwcdc
        ADDS     r0,r0,#1
        LDR      r1,|L1.1088|
        STR      r0,[r1,#0]  ; kwcdc
        CMP      r0,#1
        BGE      |L1.852|
        LDR      r0,|L1.1092|
        LDRB     r0,[r0,#0]  ; key_buf
        LDR      r1,|L1.1096|
        STRB     r0,[r1,#0]
        B        |L1.878|
|L1.852|
        MOVS     r0,#0
        LDR      r1,|L1.1088|
        STR      r0,[r1,#0]  ; kwcdc
        LDR      r0,|L1.1096|
        LDRB     r0,[r0,#0]  ; key_c_r
        LDR      r1,|L1.1092|
        LDRB     r1,[r1,#0]  ; key_buf
        CMP      r0,r1
        BNE      |L1.878|
        LDR      r0,|L1.1092|
        LDRB     r0,[r0,#0]  ; key_buf
        LDR      r1,|L1.1080|
        STRB     r0,[r1,#0]
|L1.878|
        LDR      r0,|L1.1080|
        LDRB     r0,[r0,#0]  ; key_word_continue
        BX       lr
        ENDP

keyRst PROC
        MOVS     r0,#0x55
        LDR      r1,|L1.1100|
        STRB     r0,[r1,#0]
        LDR      r1,|L1.1084|
        STRB     r0,[r1,#0]
        BX       lr
        ENDP

devTestDealAdcKey PROC
        BX       lr
        ENDP

devStandbyDealAdcKey PROC
        PUSH     {r4,lr}
        LDR      r0,|L1.1084|
        LDRB     r0,[r0,#0]  ; key_word
        BL       delStandbytkey
        POP      {r4,pc}
        ENDP

uartdecode2 PROC
        PUSH     {r0-r6,lr}
        MOV      r6,r0
        MOV      r5,r1
        MOV      r1,sp
        MOV      r0,r6
        BL       itoa
        MOV      r4,r0
        B        |L1.936|
|L1.928|
        MOVS     r0,#0x20
        MOV      r1,sp
        STRB     r0,[r1,r4]
        ADDS     r4,r4,#1
|L1.936|
        CMP      r4,#6
        BCC      |L1.928|
        MOVS     r2,#0
        MOV      r0,r4
        ADDS     r4,r4,#1
        MOV      r1,sp
        STRB     r2,[r1,r0]
        MOV      r0,r5
        BL       iputs
        MOV      r0,sp
        BL       iputs
        POP      {r0-r6,pc}
        ENDP

touchClr PROC
        MOVS     r0,#0x64
        BX       lr
        ENDP

NFC_DECT PROC
        LDR      r0,|L1.1104|
        LDRB     r0,[r0,#0]  ; nfc_f
        CMP      r0,#0
        BEQ      |L1.986|
        MOVS     r0,#0
        LDR      r1,|L1.1104|
        STRB     r0,[r1,#0]
        MOVS     r0,#1
|L1.984|
        BX       lr
|L1.986|
        MOVS     r0,#0
        B        |L1.984|
        ENDP

touchKeyRemap PROC
        PUSH     {r4,lr}
        MOVS     r0,#0x55
        LDR      r1,|L1.1100|
        STRB     r0,[r1,#0]
        MOVS     r0,#0
        LDR      r1,|L1.1104|
        STRB     r0,[r1,#0]
        MOVS     r0,#3
        BL       readCAP8298
        LDR      r1,|L1.1108|
        STRB     r0,[r1,#0]
        MOVS     r0,#5
        BL       sysDelayMs
        MOVS     r0,#0xc0
        BL       readCAP8298
        ADR      r1,|L1.1112|
        LDR      r0,|L1.1108|
        LDRB     r0,[r0,#0]  ; key_touch
        BL       uartdecode
        POP      {r4,pc}
        DCW      0x0000
|L1.1040|
        DCD      0x50000200
|L1.1044|
        DCD      touch_buf
|L1.1048|
        DCD      touch_i2c_block
|L1.1052|
        DCD      CAP_cfg
|L1.1056|
        DCD      maxIndex
|L1.1060|
        DCD      CAP_sensorDeltas
|L1.1064|
        DCD      indexMinusOne
|L1.1068|
        DCD      indexPlusOne
|L1.1072|
        DCD      segment
|L1.1076|
        DCD      sliderPostion
|L1.1080|
        DCD      key_word_continue
|L1.1084|
        DCD      key_word
|L1.1088|
        DCD      kwcdc
|L1.1092|
        DCD      key_buf
|L1.1096|
        DCD      key_c_r
|L1.1100|
        DCD      key_f
|L1.1104|
        DCD      nfc_f
|L1.1108|
        DCD      key_touch
|L1.1112|
        DCB      " key ",0
        DCB      0
        DCB      0
        ENDP

adcReadKey PROC
        LDR      r0,|L1.2140|
        LDRB     r0,[r0,#0]  ; key_buf
        CMP      r0,#0x55
        BNE      |L1.1142|
        LDR      r1,|L1.2144|
        STRB     r0,[r1,#0]
        LDR      r1,|L1.2148|
        STRB     r0,[r1,#0]
        LDR      r1,|L1.2152|
        STRB     r0,[r1,#0]
        B        |L1.1234|
|L1.1142|
        LDR      r0,|L1.2152|
        LDRB     r0,[r0,#0]  ; key_word_r
        LDR      r1,|L1.2140|
        LDRB     r1,[r1,#0]  ; key_buf
        CMP      r0,r1
        BNE      |L1.1162|
        MOVS     r0,#0x55
        LDR      r1,|L1.2144|
        STRB     r0,[r1,#0]
        B        |L1.1234|
|L1.1162|
        LDR      r0,|L1.2148|
        LDRB     r0,[r0,#0]  ; key_word_bak
        CMP      r0,#0x55
        BNE      |L1.1190|
        LDR      r0,|L1.2140|
        LDRB     r0,[r0,#0]  ; key_buf
        LDR      r1,|L1.2148|
        STRB     r0,[r1,#0]
        MOVS     r0,#0x55
        LDR      r1,|L1.2144|
        STRB     r0,[r1,#0]
        LDR      r1,|L1.2152|
        STRB     r0,[r1,#0]
        B        |L1.1234|
|L1.1190|
        LDR      r0,|L1.2148|
        LDRB     r0,[r0,#0]  ; key_word_bak
        LDR      r1,|L1.2140|
        LDRB     r1,[r1,#0]  ; key_buf
        CMP      r0,r1
        BNE      |L1.1216|
        LDR      r0,|L1.2140|
        LDRB     r0,[r0,#0]  ; key_buf
        LDR      r1,|L1.2144|
        STRB     r0,[r1,#0]
        LDR      r1,|L1.2152|
        STRB     r0,[r1,#0]
        B        |L1.1234|
|L1.1216|
        LDR      r0,|L1.2140|
        LDRB     r0,[r0,#0]  ; key_buf
        LDR      r1,|L1.2148|
        STRB     r0,[r1,#0]
        MOVS     r0,#0x55
        LDR      r1,|L1.2144|
        STRB     r0,[r1,#0]
        LDR      r1,|L1.2152|
        STRB     r0,[r1,#0]
|L1.1234|
        LDR      r0,|L1.2144|
        LDRB     r0,[r0,#0]  ; key_word
        BX       lr
        ENDP

devStartDealAdcKey PROC
        PUSH     {r4,lr}
        LDR      r0,|L1.2144|
        LDRB     r0,[r0,#0]  ; key_word
        BL       delStartkey
        LDR      r0,|L1.2156|
        LDRB     r0,[r0,#0]  ; key_word_continue
        CMP      r0,#0x5c
        BEQ      |L1.1266|
        LDR      r0,|L1.2156|
        LDRB     r0,[r0,#0]  ; key_word_continue
        CMP      r0,#0x5d
        BNE      |L1.1294|
|L1.1266|
        LDR      r0,|L1.2160|
        LDR      r0,[r0,#0]  ; k_counter
        ADDS     r0,r0,#1
        LDR      r1,|L1.2160|
        STR      r0,[r1,#0]  ; k_counter
        CMP      r0,#8
        BCC      |L1.1294|
        LDR      r0,|L1.2156|
        LDRB     r0,[r0,#0]  ; key_word_continue
        BL       delStartkey
        MOVS     r0,#0
        LDR      r1,|L1.2160|
        STR      r0,[r1,#0]  ; k_counter
|L1.1294|
        POP      {r4,pc}
        ENDP

adcKeyHook PROC
        BX       lr
        ENDP

adckeyScan PROC
        PUSH     {r4,lr}
        BL       adcReadKey
        LDR      r1,|L1.2144|
        STRB     r0,[r1,#0]
        BL       adcReadKeyContinue
        LDR      r1,|L1.2156|
        STRB     r0,[r1,#0]
        LDR      r0,|L1.2164|
        LDRB     r0,[r0,#0]  ; dev_state
        CMP      r0,#0
        BEQ      |L1.1340|
        CMP      r0,#1
        BEQ      |L1.1334|
        CMP      r0,#2
        BNE      |L1.1358|
        B        |L1.1352|
|L1.1334|
        BL       devStartDealAdcKey
        B        |L1.1366|
|L1.1340|
        ADR      r0,|L1.2168|
        BL       iputs
        BL       devTestDealAdcKey
        B        |L1.1366|
|L1.1352|
        BL       devStandbyDealAdcKey
        B        |L1.1366|
|L1.1358|
        ADR      r0,|L1.2172|
        BL       iputs
        NOP      
|L1.1366|
        NOP      
        LDR      r3,|L1.2176|
        MOVS     r2,#0
        MOVS     r1,#0x19
        LDR      r0,|L1.2180|
        LDRB     r0,[r0,#0]  ; adc_key_task
        BL       startATask
        POP      {r4,pc}
        ENDP

adcKeyInit PROC
        PUSH     {r4,lr}
        NOP      
        MOVS     r0,#5
        LSLS     r0,r0,#28
        LDR      r0,[r0,#0x3c]
        MOVS     r1,#0x10
        ORRS     r0,r0,r1
        MOVS     r1,#5
        LSLS     r1,r1,#28
        STR      r0,[r1,#0x3c]
        LDR      r0,|L1.2184|
        LDR      r0,[r0,#0x14]
        MOVS     r1,#1
        LSLS     r1,r1,#20
        ORRS     r0,r0,r1
        LDR      r1,|L1.2184|
        STR      r0,[r1,#0x14]
        NOP      
        MOVS     r0,#4
        MOVS     r1,#0
        LDR      r2,|L1.2188|
        LDR      r2,[r2,#0]
        LSLS     r4,r0,#1
        MOVS     r3,#3
        LSLS     r3,r3,r4
        BICS     r2,r2,r3
        LSLS     r4,r0,#1
        MOV      r3,r1
        LSLS     r3,r3,r4
        ORRS     r2,r2,r3
        LDR      r3,|L1.2188|
        STR      r2,[r3,#0]
        NOP      
        NOP      
        MOV      r1,r3
        LDR      r1,[r1,#4]
        MOV      r2,r0
        ADDS     r2,r2,#0x10
        MOVS     r3,#1
        LSLS     r3,r3,r2
        ORRS     r1,r1,r3
        LDR      r2,|L1.2188|
        STR      r1,[r2,#4]
        NOP      
        MOVS     r0,#8
        LDR      r1,|L1.2192|
        LDR      r1,[r1,#0x20]
        MOVS     r2,#0xc
        BICS     r1,r1,r2
        ORRS     r1,r1,r0
        LDR      r2,|L1.2192|
        STR      r1,[r2,#0x20]
        NOP      
        MOVS     r0,#0x10
        BL       ADC_CH_ENABLE
        MOVS     r0,#0xff
        ADDS     r0,r0,#0x81
        BL       ADC_CH_ENABLE
        NOP      
        LDR      r0,|L1.2192|
        LDR      r0,[r0,#0x20]
        MOVS     r1,#1
        ORRS     r0,r0,r1
        LDR      r1,|L1.2192|
        STR      r0,[r1,#0x20]
        NOP      
        POP      {r4,pc}
        ENDP

adckeyTaskInit PROC
        PUSH     {r4,lr}
        BL       adcKeyInit
        MOVS     r1,#2
        MOVS     r0,#0x1d
        BL       NVIC_SetPriority
        BL       DrvADC_EnableInt
        MOVS     r0,#0
        LDR      r1,|L1.2196|
        STR      r0,[r1,#0]  ; battery_cc
        BL       getATask
        LDR      r1,|L1.2180|
        STRB     r0,[r1,#0]
        LDR      r3,|L1.2176|
        MOVS     r2,#0
        MOVS     r1,#0x19
        LDR      r0,|L1.2180|
        LDRB     r0,[r0,#0]  ; adc_key_task
        BL       startATask
        POP      {r4,pc}
        ENDP

adcKeyRemap PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        LDR      r0,|L1.2200|
        LDRH     r0,[r0,#0]  ; key_bak
        CMP      r4,r0
        BLE      |L1.1590|
        LDR      r0,|L1.2200|
        LDRH     r0,[r0,#0]  ; key_bak
        SUBS     r0,r4,r0
        B        |L1.1596|
|L1.1590|
        LDR      r0,|L1.2200|
        LDRH     r0,[r0,#0]  ; key_bak
        SUBS     r0,r0,r4
|L1.1596|
        CMP      r0,#0x73
        BLE      |L1.1616|
        MOVS     r0,#0
        LDR      r1,|L1.2204|
        STRH     r0,[r1,#0]
        LDR      r1,|L1.2208|
        STRH     r0,[r1,#0]
        LDR      r0,|L1.2200|
        STRH     r4,[r0,#0]
|L1.1614|
        POP      {r4,pc}
|L1.1616|
        LDR      r0,|L1.2208|
        LDRH     r0,[r0,#0]  ; key_adc_value
        ADDS     r0,r0,r4
        LDR      r1,|L1.2208|
        STRH     r0,[r1,#0]
        LDR      r0,|L1.2200|
        STRH     r4,[r0,#0]
        LDR      r0,|L1.2204|
        LDRH     r0,[r0,#0]  ; key_irq_index
        ADDS     r0,r0,#1
        UXTH     r0,r0
        LDR      r1,|L1.2204|
        STRH     r0,[r1,#0]
        CMP      r0,#8
        BNE      |L1.1828|
        MOVS     r0,#0
        STRH     r0,[r1,#0]
        LDR      r0,|L1.2208|
        LDRH     r0,[r0,#0]  ; key_adc_value
        ASRS     r0,r0,#3
        LDR      r1,|L1.2208|
        STRH     r0,[r1,#0]
        MOV      r0,r1
        LDRH     r0,[r0,#0]  ; key_adc_value
        MOVS     r1,#0x7d
        LSLS     r1,r1,#3
        CMP      r0,r1
        BLE      |L1.1680|
        MOVS     r0,#0x55
        LDR      r1,|L1.2140|
        STRB     r0,[r1,#0]
        B        |L1.1762|
|L1.1680|
        LDR      r0,|L1.2208|
        LDRH     r0,[r0,#0]  ; key_adc_value
        LDR      r1,|L1.2212|
        CMP      r0,r1
        BLE      |L1.1698|
        MOVS     r0,#0x55
        LDR      r1,|L1.2140|
        STRB     r0,[r1,#0]
        B        |L1.1762|
|L1.1698|
        LDR      r0,|L1.2208|
        LDRH     r0,[r0,#0]  ; key_adc_value
        LDR      r1,|L1.2212|
        SUBS     r1,r1,#0x64
        CMP      r0,r1
        BLE      |L1.1718|
        MOVS     r0,#0x59
        LDR      r1,|L1.2140|
        STRB     r0,[r1,#0]
        B        |L1.1762|
|L1.1718|
        LDR      r0,|L1.2208|
        LDRH     r0,[r0,#0]  ; key_adc_value
        LDR      r1,|L1.2212|
        SUBS     r1,r1,#0xc8
        CMP      r0,r1
        BLE      |L1.1738|
        MOVS     r0,#0x55
        LDR      r1,|L1.2140|
        STRB     r0,[r1,#0]
        B        |L1.1762|
|L1.1738|
        LDR      r0,|L1.2208|
        LDRH     r0,[r0,#0]  ; key_adc_value
        LDR      r1,|L1.2216|
        CMP      r0,r1
        BLE      |L1.1756|
        MOVS     r0,#0x5a
        LDR      r1,|L1.2140|
        STRB     r0,[r1,#0]
        B        |L1.1762|
|L1.1756|
        MOVS     r0,#0x55
        LDR      r1,|L1.2140|
        STRB     r0,[r1,#0]
|L1.1762|
        LDR      r0,|L1.2140|
        LDRB     r0,[r0,#0]  ; key_buf
        LDR      r1,|L1.2220|
        STRB     r0,[r1,#0]
        LDR      r0,|L1.2224|
        BL       GPIO_GET_PIN
        CMP      r0,#0
        BNE      |L1.1786|
        MOVS     r0,#0x58
        LDR      r1,|L1.2140|
        STRB     r0,[r1,#0]
|L1.1786|
        LDR      r0,|L1.2224|
        ADDS     r0,r0,#4
        BL       GPIO_GET_PIN
        CMP      r0,#0
        BNE      |L1.1804|
        MOVS     r0,#0x5d
        LDR      r1,|L1.2140|
        STRB     r0,[r1,#0]
|L1.1804|
        LDR      r0,|L1.2224|
        ADDS     r0,r0,#8
        BL       GPIO_GET_PIN
        CMP      r0,#0
        BNE      |L1.1822|
        MOVS     r0,#0x5c
        LDR      r1,|L1.2140|
        STRB     r0,[r1,#0]
|L1.1822|
        MOVS     r0,#0
        LDR      r1,|L1.2208|
        STRH     r0,[r1,#0]
|L1.1828|
        NOP      
        B        |L1.1614|
        ENDP

readeeprom PROC
        PUSH     {r2-r4,lr}
        MOV      r4,r0
        LDR      r0,|L1.2228|
        MOVS     r1,#1
        MOVS     r3,#2
        MOV      r2,r1
        STR      r1,[sp,#0]
        STR      r0,[sp,#4]
        MOVS     r1,#0xa0
        LDR      r0,|L1.2232|
        BL       initI2cDataBlock
        LDR      r1,|L1.2228|
        STRB     r4,[r1,#1]
        MOVS     r0,#0
        STRB     r0,[r1,#2]
        MOVS     r0,#0xa2
        STRB     r0,[r1,#0]
        MOVS     r1,#0
        LDR      r0,|L1.2232|
        BL       addI2cChain
        NOP      
|L1.1878|
        LDR      r0,|L1.2228|
        LDRB     r0,[r0,#0]  ; eeprom_i2c_buf
        CMP      r0,#0xa2
        BEQ      |L1.1878|
        LDR      r0,|L1.2228|
        LDRB     r0,[r0,#2]  ; eeprom_i2c_buf
        POP      {r2-r4,pc}
        ENDP

writeeeprom PROC
        PUSH     {r2-r6,lr}
        MOV      r4,r0
        MOV      r5,r1
        LDR      r0,|L1.2228|
        MOVS     r1,#1
        MOVS     r3,#2
        MOVS     r2,#0
        STR      r1,[sp,#0]
        STR      r0,[sp,#4]
        MOVS     r1,#0xa0
        LDR      r0,|L1.2232|
        BL       initI2cDataBlock
        LDR      r1,|L1.2228|
        STRB     r5,[r1,#1]
        STRB     r4,[r1,#2]
        MOVS     r0,#0xa2
        STRB     r0,[r1,#0]
        MOVS     r1,#0
        LDR      r0,|L1.2232|
        BL       addI2cChain
        NOP      
|L1.1938|
        LDR      r0,|L1.2228|
        LDRB     r0,[r0,#0]  ; eeprom_i2c_buf
        CMP      r0,#0xa2
        BEQ      |L1.1938|
        LDR      r0,|L1.2228|
        LDRB     r0,[r0,#0]  ; eeprom_i2c_buf
        CMP      r0,#0xa0
        BNE      |L1.1958|
        MOVS     r0,#1
|L1.1956|
        POP      {r2-r6,pc}
|L1.1958|
        MOVS     r0,#0
        B        |L1.1956|
        ENDP

Key_Scan PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        LDR      r0,|L1.2236|
        LDRB     r0,[r0,#0]  ; f_keyup
        CMP      r0,#0
        BEQ      |L1.2012|
        LDR      r0,|L1.2224|
        ADDS     r0,r0,#0x20
        BL       GPIO_GET_PIN
        CMP      r0,#0
        BNE      |L1.2012|
        LDR      r1,|L1.2236|
        STRB     r0,[r1,#0]
        MOVS     r0,#0xa
        BL       sysDelayMs
        LDR      r0,|L1.2224|
        ADDS     r0,r0,#0x20
        BL       GPIO_GET_PIN
        CMP      r0,#0
        BNE      |L1.2028|
        MOVS     r0,#1
|L1.2010|
        POP      {r4,pc}
|L1.2012|
        LDR      r0,|L1.2224|
        ADDS     r0,r0,#0x20
        BL       GPIO_GET_PIN
        CMP      r0,#1
        BNE      |L1.2028|
        LDR      r1,|L1.2236|
        STRB     r0,[r1,#0]
|L1.2028|
        MOVS     r0,#0
        B        |L1.2010|
        ENDP

readbq PROC
        PUSH     {r2-r4,lr}
        MOV      r4,r0
        LDR      r0,|L1.2240|
        MOVS     r1,#1
        MOVS     r3,#2
        MOV      r2,r1
        STR      r1,[sp,#0]
        STR      r0,[sp,#4]
        MOVS     r1,#0xd6
        LDR      r0,|L1.2244|
        BL       initI2cDataBlock
        LDR      r1,|L1.2240|
        STRB     r4,[r1,#1]
        MOVS     r0,#0
        STRB     r0,[r1,#2]
        MOVS     r0,#0xa2
        STRB     r0,[r1,#0]
        MOVS     r1,#0
        LDR      r0,|L1.2244|
        BL       addI2cChain
        NOP      
|L1.2078|
        LDR      r0,|L1.2240|
        LDRB     r0,[r0,#0]  ; bq_i2c_buf
        CMP      r0,#0xa2
        BEQ      |L1.2078|
        LDR      r0,|L1.2240|
        LDRB     r0,[r0,#2]  ; bq_i2c_buf
        POP      {r2-r4,pc}
        ENDP

writebq PROC
        PUSH     {r2-r6,lr}
        MOV      r4,r0
        MOV      r5,r1
        LDR      r0,|L1.2240|
        MOVS     r1,#1
        MOVS     r3,#2
        MOVS     r2,#0
        STR      r1,[sp,#0]
        STR      r0,[sp,#4]
        MOVS     r1,#0xd6
        LDR      r0,|L1.2244|
        BL       initI2cDataBlock
        LDR      r1,|L1.2240|
        STRB     r5,[r1,#1]
        STRB     r4,[r1,#2]
        MOVS     r0,#0xa2
        STRB     r0,[r1,#0]
        MOVS     r1,#0
        LDR      r0,|L1.2244|
        BL       addI2cChain
        NOP      
|L1.2138|
        B        |L1.2248|
|L1.2140|
        DCD      key_buf
|L1.2144|
        DCD      key_word
|L1.2148|
        DCD      key_word_bak
|L1.2152|
        DCD      key_word_r
|L1.2156|
        DCD      key_word_continue
|L1.2160|
        DCD      k_counter
|L1.2164|
        DCD      dev_state
|L1.2168|
        DCB      "ts",0
        DCB      0
|L1.2172|
        DCB      "sf",0
        DCB      0
|L1.2176|
        DCD      adckeyScan
|L1.2180|
        DCD      adc_key_task
|L1.2184|
        DCD      0x50000040
|L1.2188|
        DCD      0x500040c0
|L1.2192|
        DCD      0x400e0000
|L1.2196|
        DCD      battery_cc
|L1.2200|
        DCD      key_bak
|L1.2204|
        DCD      key_irq_index
|L1.2208|
        DCD      key_adc_value
|L1.2212|
        DCD      0x00000352
|L1.2216|
        DCD      0x00000226
|L1.2220|
        DCD      key_buf_adc
|L1.2224|
        DCD      0x500042a0
|L1.2228|
        DCD      eeprom_i2c_buf
|L1.2232|
        DCD      eeprom_i2c_block
|L1.2236|
        DCD      f_keyup
|L1.2240|
        DCD      bq_i2c_buf
|L1.2244|
        DCD      bq_i2c_block
|L1.2248|
        LDR      r0,|L1.2536|
        LDRB     r0,[r0,#0]  ; bq_i2c_buf
        CMP      r0,#0xa2
        BEQ      |L1.2138|
        LDR      r0,|L1.2536|
        LDRB     r0,[r0,#0]  ; bq_i2c_buf
        CMP      r0,#0xa0
        BNE      |L1.2268|
        MOVS     r0,#1
|L1.2266|
        POP      {r2-r6,pc}
|L1.2268|
        MOVS     r0,#0
        B        |L1.2266|
        ENDP

ADC_IRQHandler PROC
        PUSH     {r4,lr}
        MOVS     r4,#0
        MOVS     r0,#1
        LDR      r1,|L1.2540|
        STR      r0,[r1,#0x30]
        NOP      
        MOVS     r0,#7
        BL       ADC_GET_RSLT
        LDR      r1,|L1.2544|
        LDR      r1,[r1,#0]  ; baseband_adc
        ADDS     r0,r0,r1
        LDR      r1,|L1.2544|
        STR      r0,[r1,#0]  ; baseband_adc
        MOVS     r0,#4
        BL       ADC_GET_RSLT
        LDR      r1,|L1.2548|
        LDR      r1,[r1,#0]  ; batt_adc
        ADDS     r0,r0,r1
        LDR      r1,|L1.2548|
        STR      r0,[r1,#0]  ; batt_adc
        LDR      r0,|L1.2552|
        LDR      r1,[r0,#0]  ; iadccount
        LDR      r0,[r0,#0]  ; iadccount
        ADDS     r0,r0,#1
        LDR      r2,|L1.2552|
        STR      r0,[r2,#0]  ; iadccount
        MOVS     r0,#1
        LSLS     r0,r0,#10
        CMP      r1,r0
        BCC      |L1.2382|
        MOVS     r0,#0
        MOV      r1,r2
        STR      r0,[r1,#0]  ; iadccount
        LDR      r0,|L1.2544|
        LDR      r0,[r0,#0]  ; baseband_adc
        LSRS     r0,r0,#10
        LDR      r1,|L1.2544|
        STR      r0,[r1,#0]  ; baseband_adc
        LDR      r0,|L1.2548|
        LDR      r0,[r0,#0]  ; batt_adc
        LSRS     r0,r0,#10
        LDR      r1,|L1.2548|
        STR      r0,[r1,#0]  ; batt_adc
        LDR      r1,[r1,#0]  ; batt_adc
        LDR      r2,|L1.2556|
        MULS     r1,r2,r1
        MOV      r0,r1
        LDR      r1,|L1.2544|
        LDR      r1,[r1,#0]  ; baseband_adc
        BL       __aeabi_uidivmod
        LDR      r1,|L1.2560|
        STR      r0,[r1,#0]  ; bt_volage_adc
|L1.2382|
        MOV      r0,r4
        BL       adcKeyRemap
        POP      {r4,pc}
        ENDP

NVIC_SetPriority PROC
        PUSH     {r4,lr}
        CMP      r0,#0
        BGE      |L1.2448|
        LDR      r2,|L1.2564|
        LSLS     r3,r0,#28
        LSRS     r3,r3,#28
        SUBS     r3,r3,#8
        LSRS     r3,r3,#2
        LSLS     r3,r3,#2
        LDR      r2,[r2,r3]
        LSLS     r3,r0,#30
        LSRS     r4,r3,#27
        MOVS     r3,#0xff
        LSLS     r3,r3,r4
        BICS     r2,r2,r3
        LSLS     r3,r1,#30
        LSRS     r3,r3,#24
        LSLS     r4,r0,#30
        LSRS     r4,r4,#27
        LSLS     r3,r3,r4
        ORRS     r2,r2,r3
        LDR      r3,|L1.2564|
        LSLS     r4,r0,#28
        LSRS     r4,r4,#28
        SUBS     r4,r4,#8
        LSRS     r4,r4,#2
        LSLS     r4,r4,#2
        STR      r2,[r3,r4]
        B        |L1.2498|
|L1.2448|
        LDR      r2,|L1.2568|
        MOVS     r3,#3
        LSLS     r3,r3,#8
        ADDS     r2,r2,r3
        LSRS     r3,r0,#2
        LSLS     r3,r3,#2
        LDR      r2,[r2,r3]
        LSLS     r3,r0,#30
        LSRS     r4,r3,#27
        MOVS     r3,#0xff
        LSLS     r3,r3,r4
        BICS     r2,r2,r3
        LSLS     r3,r1,#30
        LSRS     r3,r3,#24
        LSLS     r4,r0,#30
        LSRS     r4,r4,#27
        LSLS     r3,r3,r4
        ORRS     r2,r2,r3
        LDR      r3,|L1.2568|
        MOVS     r4,#3
        LSLS     r4,r4,#8
        ADDS     r3,r3,r4
        LSRS     r4,r0,#2
        LSLS     r4,r4,#2
        STR      r2,[r3,r4]
|L1.2498|
        POP      {r4,pc}
        ENDP

ADC_GET_RSLT PROC
        MOV      r1,r0
        LSLS     r0,r1,#2
        LDR      r2,|L1.2540|
        ADDS     r0,r0,r2
        LDR      r0,[r0,#0]
        LSLS     r0,r0,#22
        LSRS     r0,r0,#22
        BX       lr
        ENDP

ADC_CH_ENABLE PROC
        LDR      r1,|L1.2540|
        LDR      r1,[r1,#0x24]
        ORRS     r1,r1,r0
        LDR      r2,|L1.2540|
        STR      r1,[r2,#0x24]
        BX       lr
        ENDP

GPIO_GET_PIN PROC
        MOV      r1,r0
        LDR      r0,[r1,#0]
        BX       lr
        ENDP

        DCW      0x0000
|L1.2536|
        DCD      bq_i2c_buf
|L1.2540|
        DCD      0x400e0000
|L1.2544|
        DCD      baseband_adc
|L1.2548|
        DCD      batt_adc
|L1.2552|
        DCD      iadccount
|L1.2556|
        DCD      0x000004e2
|L1.2560|
        DCD      bt_volage_adc
|L1.2564|
        DCD      0xe000ed1c
|L1.2568|
        DCD      0xe000e100

        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.bss||, DATA, NOINIT, ALIGN=2

touch_i2c_block
        %        16
touch_buf
        %        16
eeprom_i2c_block
        %        16
bq_i2c_block
        %        16

        AREA ||.data||, DATA, ALIGN=2

audio_quiet_time
        DCD      0x00000000
flg_ampdown
        DCB      0x00
key_word
        DCB      0x55
key_word_continue
        DCB      0x55
adc_key_task
        DCB      0xff
key_bak
        DCW      0x0000
key_irq_index
        DCW      0x0000
key_adc_value
        DCW      0x0000
key_buf
        DCB      0x55
key_buf_adc
        DCB      0x55
u16ADCBuf
        DCW      0x0000
        DCB      0x00,0x00
auto_standy_delay_minunte
        DCD      0x00000005
battery_volage
        DCD      0x00000000
dc_time_stamp
        DCD      0x00000000
bt_volage
        DCD      0x00000000
battery_cc
        DCD      0x00000000
battery_level
        DCD      0x00000000
battery_level_old
        DCD      0x00000000
battery_level2
        DCD      0x00000000
inew_volage
        DCD      0x00000000
flg_batterychk
        DCB      0x00
flg_softmute
        DCB      0x00
CAP_cfg
        DCB      0x00,0x00
        DCB      0x1f,0x6f,0x20,0x20
        DCB      0x21,0xff,0x22,0xa4
        DCB      0x23,0x07,0x24,0x39
        DCB      0x26,0x00,0x27,0xff
        DCB      0x28,0xff,0x2a,0x00
        DCB      0x2b,0x00,0x2d,0xff
        DCB      0x2f,0x8a,0x30,0x40
        DCB      0x31,0x40,0x32,0x40
        DCB      0x33,0x40,0x34,0x40
        DCB      0x35,0x40,0x36,0x40
        DCB      0x37,0x40,0x38,0x01
        DCB      0x40,0x01,0x41,0x39
        DCB      0x42,0x02,0x43,0x40
        DCB      0x44,0x40,0x71,0x00
        DCB      0x72,0x00,0x73,0x00
        DCB      0x74,0x00,0x77,0x00
        DCB      0x79,0x00,0x81,0x00
        DCB      0x82,0x00,0x84,0x20
        DCB      0x85,0x14,0x86,0x5d
        DCB      0x88,0x04,0x90,0xf0
        DCB      0x91,0xf0,0x92,0xf0
        DCB      0x93,0xf0,0x94,0x00
        DCB      0x95,0x00,0x00,0x00
amp_Mflag
        DCD      0xffffffff
liocx
        DCD      0x00000000
time_out
        DCB      0x00,0x00,0x00,0x00
lpf_delt
        DCD      0x00000000
sliderPostion
        DCD      0x00000000
segment
        DCD      0x00000000
maxIndex
        DCB      0x00
indexMinusOne
        DCB      0x00
indexPlusOne
        DCB      0x00,0x00
kwcdc
        DCD      0x00000000
key_c_r
        DCB      0x55
key_word_r
        DCB      0x00
key_word_bak
        DCB      0x55,0x00
k_counter
        DCD      0x00000000
f_keyup
        DCB      0x01,0x00,0x00,0x00
iadccount
        DCD      0x00000000
baseband_adc
        DCD      0x00000000
batt_adc
        DCD      0x00000000
bt_volage_adc
        DCD      0x00000000
CAP_sensorDeltas
        %        8
key_f
        DCB      0x00
key_touch
        DCB      0x00
nfc_f
        DCB      0x00,0x00
standby_flag
        DCD      0x00000000
adcKeySubHook
        DCD      0x00000000
appkey_id
        DCB      0x00
eeprom_i2c_buf
        DCB      0x00,0x00,0x00
bq_i2c_buf
        DCB      0x00,0x00,0x00

        EXPORT adcKeyClkInit [CODE]
        EXPORT readCAP8298 [CODE]
        EXPORT capack [CODE]
        EXPORT readCAPBlock [CODE]
        EXPORT writeCAP8298 [CODE]
        EXPORT writeCAP8298Block [CODE]
        EXPORT touchKeyconfig [CODE]
        EXPORT capIntEnable [CODE]
        EXPORT capIntDisable [CODE]
        EXPORT capIntDisable1 [CODE]
        EXPORT capPinEnable [CODE]
        EXPORT resetCap [CODE]
        EXPORT capSliderPostion [CODE]
        EXPORT adcReadKeyContinue [CODE]
        EXPORT keyRst [CODE]
        EXPORT devTestDealAdcKey [CODE]
        EXPORT devStandbyDealAdcKey [CODE]
        EXPORT uartdecode2 [CODE]
        EXPORT touchClr [CODE]
        EXPORT NFC_DECT [CODE]
        EXPORT touchKeyRemap [CODE]
        EXPORT adcReadKey [CODE]
        EXPORT devStartDealAdcKey [CODE]
        EXPORT adcKeyHook [CODE]
        EXPORT adckeyScan [CODE]
        EXPORT adcKeyInit [CODE]
        EXPORT adckeyTaskInit [CODE]
        EXPORT adcKeyRemap [CODE]
        EXPORT readeeprom [CODE]
        EXPORT writeeeprom [CODE]
        EXPORT Key_Scan [CODE]
        EXPORT readbq [CODE]
        EXPORT writebq [CODE]
        EXPORT ADC_IRQHandler [CODE]
        EXPORT audio_quiet_time [DATA,SIZE=4]
        EXPORT flg_ampdown [DATA,SIZE=1]
        EXPORT key_word [DATA,SIZE=1]
        EXPORT key_word_continue [DATA,SIZE=1]
        EXPORT adc_key_task [DATA,SIZE=1]
        EXPORT key_buf [DATA,SIZE=1]
        EXPORT key_buf_adc [DATA,SIZE=1]
        EXPORT u16ADCBuf [DATA,SIZE=2]
        EXPORT auto_standy_delay_minunte [DATA,SIZE=4]
        EXPORT battery_volage [DATA,SIZE=4]
        EXPORT dc_time_stamp [DATA,SIZE=4]
        EXPORT battery_level [DATA,SIZE=4]
        EXPORT battery_level_old [DATA,SIZE=4]
        EXPORT battery_level2 [DATA,SIZE=4]
        EXPORT inew_volage [DATA,SIZE=4]
        EXPORT flg_batterychk [DATA,SIZE=1]
        EXPORT flg_softmute [DATA,SIZE=1]
        EXPORT CAP_cfg [DATA,SIZE=92]
        EXPORT amp_Mflag [DATA,SIZE=4]
        EXPORT liocx [DATA,SIZE=4]
        EXPORT time_out [DATA,SIZE=1]
        EXPORT lpf_delt [DATA,SIZE=4]
        EXPORT bt_volage_adc [DATA,SIZE=4]
        EXPORT key_f [DATA,SIZE=1]
        EXPORT standby_flag [DATA,SIZE=4]
        EXPORT adcKeySubHook [DATA,SIZE=4]
        EXPORT appkey_id [DATA,SIZE=1]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT initI2cDataBlock [CODE]
        IMPORT addI2cChain [CODE]
        IMPORT sysDelayMs [CODE]
        IMPORT __aeabi_uidivmod [CODE]
        IMPORT delStandbytkey [CODE]
        IMPORT itoa [CODE]
        IMPORT iputs [CODE]
        IMPORT uartdecode [CODE]
        IMPORT delStartkey [CODE]
        IMPORT startATask [CODE]
        IMPORT dev_state [DATA]
        IMPORT DrvADC_EnableInt [CODE]
        IMPORT getATask [CODE]

        KEEP NVIC_SetPriority
        KEEP ADC_GET_RSLT
        KEEP ADC_CH_ENABLE
        KEEP GPIO_GET_PIN
        KEEP touch_i2c_block
        KEEP touch_buf
        KEEP eeprom_i2c_block
        KEEP bq_i2c_block
        KEEP key_bak
        KEEP key_irq_index
        KEEP key_adc_value
        KEEP bt_volage
        KEEP battery_cc
        KEEP sliderPostion
        KEEP segment
        KEEP maxIndex
        KEEP indexMinusOne
        KEEP indexPlusOne
        KEEP kwcdc
        KEEP key_c_r
        KEEP key_word_r
        KEEP key_word_bak
        KEEP k_counter
        KEEP f_keyup
        KEEP iadccount
        KEEP baseband_adc
        KEEP batt_adc
        KEEP CAP_sensorDeltas
        KEEP key_touch
        KEEP nfc_f
        KEEP eeprom_i2c_buf
        KEEP bq_i2c_buf

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,6
        ATTR SETSTRING Tag_conformance,"2.06"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
